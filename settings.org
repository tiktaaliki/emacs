
* TOC                                                                    :TOC_1: 
* copy code
:Properties:
:visibility: all
:End:
file:~/.emacs
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC
* Emacs functionality

** org-ref

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-plus-contrib)
  (use-package interleave)
  (use-package pdf-tools)

  (eval-after-load 'org '(require 'org-pdfview))

  (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
  (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" .  org-pdfview-open))

  (use-package org-ref
    :init 
	 (setq org-ref-default-bibliography '("~/Dropbox/Zettelkasten/org/references.bib")
               org-ref-bibliography-notes   '("~/Dropbox/Zettelkasten/org/notes.org")
               reftex-default-bibliography  '("~/Dropbox/Zettelkasten/org/references.bib")
               org-ref-pdf-directory        '("~/Dropbox/Zettelkasten/org/pdfs/"))
    :config 
         (progn
	      (require 'org-ref-helm-cite)
          (require 'doi-utils)
          (require 'org-ref-isbn)
          (setq helm-bibtex-bibliography "~/Dropbox/Zettelkasten/org/references.bib"
               helm-bibtex-library-path "~/Dropbox/Zettelkasten/org/pdfs"
               helm-bibtex-notes-path   "~/Dropbox/Zettelkasten/org/notes.org"
               bibtex-completion-notes-path   "~/Dropbox/Zettelkasten/org/notes.org"
               bib-file                 "~/Dropbox/Zettelkasten/org/references.bib"
               bibtex-completion-bibliography "~/Dropbox/Zettelkasten/org/references.bib"
               bibtex-completion-notes-template-one-file "* ${Author}. (${year}). ${title}. 
                                                            :PROPERTIES:
                                                            :Custom_ID: ${=key=}
                                                            :COURSE:
                                                            :FILE:
                                                            :URL:
                                                            :END:" )      )
    :bind ([f6] . helm-bibtex)
  )


#+END_SRC

#+RESULTS:

** pdf-tools
#+BEGIN_SRC emacs-lisp :tangle yes

(pdf-tools-install)

(eval-after-load 'org '(require 'org-pdfview))

(add-to-list 'org-file-apps 
             '("\\.pdf\\'" . (lambda (file link)
                                     (org-pdfview-open link))))
#+END_SRC

#+RESULTS:
: ((\.pdf\' lambda (file link) (org-pdfview-open link)) (\.pdf::\([[:digit:]]+\)\' . org-pdfview-open) (\.pdf\' . org-pdfview-open) (auto-mode . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . default))

** text editing
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
  (setq ispell-program-name "aspell")
  (require 'ispell)

  ;  (add-hook 'org-mode-hook 'my-org-init)
  ;     (defun my-org-init ()
  ;       (require 'typopunct)
  ;       (typopunct-change-language 'english)
  ;       (typopunct-mode 1))
 (delete-selection-mode) ;allows to delete selected text by typing
 (global-set-key (kbd "M-=") 'count-words)
 (use-package flyspell-correct-helm )
 (use-package company
              :ensure t
              :init (global-company-mode)
	          :config (company-mode 1)
)
 (setq org-support-shift-select (quote always))
 (setq org-src-tab-acts-natively t)
 (setq sentence-end-double-space nil)

(use-package smartparens
 :init
 (progn
  (use-package smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1) ))

;Smartparens is a minor mode for dealing with pairs in Emacs.
;It can automatically insert pairs:
; M-x sp-cheat-sheet

(use-package anzu
  :ensure t
  :config
  (progn
    (global-anzu-mode t)
    (diminish 'anzu-mode)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
(global-set-key [remap query-replace] 'anzu-query-replace)))
;displays current match and total matches information in the mode-line in various search modes.

(use-package iedit)

;allows you to edit one occurrence of some text in a buffer (possibly narrowed) or region, and simultaneously have other occurrences edited in the same way, with visual


#+END_SRC

#+RESULTS:

** Outside world
*** Web

#+BEGIN_SRC emacs-lisp :tangle yes

(defun my-set-eww-buffer-title ()
      (let* ((title (plist-get eww-data :title))
      (url   (plist-get eww-data :url))
      (result (concat "*eww-" 
               (or title Norton Guide reader     
		 (if (string-match "://" url)
                   (substring url (match-beginning 0))
                   url)) "*")))
       (rename-buffer result t)))

(add-hook 'eww-after-render-hook 'my-set-eww-buffer-title)


(defun shr-html2text ()
  "Replacement for standard html2text using shr."
  (interactive)
  (let ((dom (libxml-parse-html-region (point-min) (point-max)))
        (shr-width fill-column)
        (shr-inhibit-images t)
        (shr-bullet " "))
        (erase-buffer)
        (shr-insert-document dom)
        (goto-char (point-min))))

(eval-after-load 'shr  
     '(progn (setq shr-width -1)  
             (defun shr-fill-text (text) text)  
             (defun shr-fill-lines (start end) nil)  
             (defun shr-fill-line () nil)))

#+END_SRC
*** bbdb

#+BEGIN_SRC emacs-lisp :tangle yes
 	
(require 'bbdb)
(bbdb-initialize)

#+END_SRC
*** mu4e

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") 
(require 'mu4e) 
(require 'mu4e-contrib)
(require 'org-mu4e) 

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)
(setq message-kill-buffer-on-exit t)
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-compose-format-flowed t)
(setq smtpmail-default-smtp-server "smtp.gmail.com")

(add-hook 'mu4e-view-mode-hook (lambda ()(set-fill-column 100)))
(add-hook 'message-mode-hook (lambda ()(set-fill-column 120)))
(add-hook 'mu4e-headers-mode-hook (lambda ()(set-fill-column 200)))
 #+END_SRC
**** message view

#+BEGIN_SRC emacs-lisp :tangle yes
(setq mu4e-attachment-dir "~/Downloads")

(setq shr-color-visible-luminance-min 100) 
(setq shr-color-visible-distance-min 5)
(setq message-yank-prefix ""
      message-yank-empty-prefix ""
      message-yank-cited-prefix "")

;; customize the reply-quote-string
(setq message-citation-line-format "\n\nOn %a %d %b %Y at %R, %f wrote:\n")
;; choose to use the formatted string
(setq message-citation-line-function 'message-insert-formatted-citation-line)


(setq mu4e-view-scroll-to-next nil)


#+END_SRC

**** headers view

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-mu4e-link-query-in-headers-mode nil)
(setq mu4e-update-interval 60)
(setq mu4e-index-update-in-background t)
(setq mu4e-headers-fields
      '( (:human-date    .  13)    ;; alternatively, use :human-date
         (:flags         .   6)
         (:from          .  22)
         (:thread-subject       . 70 ))) ;; alternatively, use :thre
   ;; ;;  ;; ad-subject
(setq mu4e-view-prefer-html t)
(setq mu4e-headers-skip-duplicates t)
(setq mu4e-headers-auto-update t)
(setq mu4e-view-show-addresses t)
(setq mu4e-headers-date-format "%x")
(setq mu4e-headers-time-format "%H:%M")
#+END_SRC

**** settings

#+BEGIN_SRC emacs-lisp :tangle yes

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
     starttls-use-gnutls t
     smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
     smtpmail-auth-credentials
       '(("smtp.gmail.com" 587 "betsy.yoon" "gyzoxzmytclnifef"))
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587
     smtpmail-local-domain "gmail.com"
     smtpmail-smtp-user "betsy.yoon")

  ;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "true")

#+END_SRC 

**** folders

#+BEGIN_SRC emacs-lisp :tangle yes

(setq mu4e-maildir-shortcuts
  '( ("/INBOX"  . ?i)
	 ("/Sent"   . ?s)
	 ("/Trash"  . ?t)
	 ("/All"    . ?a)))

(setq mu4e-drafts-folder "/Drafts")
(setq mu4e-sent-folder   "/sent")
(setq mu4e-trash-folder  "/trash")
(setq mu4e-refile-folder "/all")
(setq mu4e-maildir "~/Maildir")
(setq mu4e-attachment-dir "~/Dropbox/Downloads")
#+END_SRC 
*** org-gcal
   
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package calfw)
(use-package calfw-org)
(use-package calfw-gcal)

(setq package-check-signature nil)

;for http400 error, open scratch and evaluate (org-gcal-request-token) using C-x C-e

#+END_SRC

** org-agenda
#+BEGIN_SRC emacs-lisp :tangle yes

(global-set-key (kbd "<f5>") 'org-agenda)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-x .") 'org-archive-subtree-default)
(global-set-key (kbd "C-.") 'org-todo)
(global-set-key (kbd "C-c n") 'org-refile)

(add-hook 'after-init-hook 'org-agenda-list)

(setq org-log-into-drawer t)

(setq org-agenda-files (quote
			   ("~/Dropbox/Zettelkasten/org/inbox.org" 
			    "~/Dropbox/Zettelkasten/org/gcal.org"  
 			    "~/Dropbox/Zettelkasten/org/lis.org"  
 			    "~/Dropbox/Zettelkasten/org/ndd.org"
			    "~/Dropbox/Zettelkasten/org/work.org"
			    "~/Dropbox/Zettelkasten/org/budget.org"
			    "~/Dropbox/Zettelkasten/org/notes.org")))

(setq org-agenda-custom-commands 
      '(("d" "Undated tasks" alltodo "" 
       ((org-agenda-todo-ignore-with-date t))
       ((org-agenda-max-entries 5)))))

(setq org-agenda-deadline-leaders: '("DUE:" "In %3d d.:" "%2d d. ago:"))
(setq org-agenda-scheduled-leaders '("" "%2dx past due: "))
(setq org-agenda-span (quote 8))
(setq org-enforce-todo-dependencies t)
(setq org-agenda-export-html-style nil)
(setq org-agenda-skip-timestamp-if-deadline-is-shown t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-jump-prefer-future t)
(setq org-agenda-start-with-clockreport-mode t)
; (setq org-agenda-todo-ignore-deadlines (quote near))
; (setq org-agenda-window-setup (quote other-frame))
(setq org-deadline-warning-days 4)
(setq org-agenda-with-colors t)

#+END_SRC

#+RESULTS:
: t

** ORG
*** org-toc: table of contents

#+BEGIN_SRC emacs-lisp :tangle yes
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-enable)
    (warn "toc-org not found"))
#+END_SRC
*** org-clock
#+BEGIN_SRC emacs-lisp :tangle yes
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)

;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
;(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

#+END_SRC
*** org-drill

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-drill)
#+END_SRC
*** Org-refile

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq org-refile-use-outline-path (quote file))

  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)
                             ("archive.org" :maxlevel . 9)
		                 ("journal.org" :maxlevel . 9)))

  (setq org-outline-path-complete-in-steps nil) 

; Refile in a single go

  (global-set-key (kbd "<f4>") 'org-refile)

  (setq org-refile-allow-creating-parent-nodes 'confirm)

#+END_SRC
*** org modules

#+BEGIN_SRC emacs-lisp :tangle yes


 (setq org-modules '(org-bbdb
                      org-gnus
                      org-drill
                      org-info
                      org-jsinfo
                      org-habit
                      org-irc
                      org-mouse
                      org-protocol
                      org-annotate-file
                      org-eval
                      org-expiry
                      org-interactive-query
                      org-man
                      org-collector
                      org-panel
                      org-screen
                      org-toc))

(eval-after-load 'org '(org-load-modules-maybe t))

#+END_SRC
*** Org-capture
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "<f1>") 'org-capture)

  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
   (setq org-capture-templates '(
    ("t" "todo" entry (file+headline "~/Dropbox/Zettelkasten/org/inbox.org" "to dos" ) 
	 "** [TODO] %? \nCREATED: %U \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n%a\n\n" )
	("d" "journal" entry (file+datetree "~/Dropbox/Zettelkasten/org/journal.org")
     "** %<%H:%M> \n%?" :kill-buffer nil) 
	("l" "logging" entry (file+datetree "~/Dropbox/Zettelkasten/org/journal.org")
     "** %? %T" :kill-buffer nil) 
	("j" "jobs" table-line (file+headline "~/Dropbox/Zettelkasten/org/lis.org" "Jobs")
     "|%t|%A|%^{How far?}|%^{How much?}|" :append t) 
    ("e" "event" entry (file  "~/Dropbox/Zettelkasten/org/gcal.org" )
 	 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:link: %a\n:location: %^{location}\n\n\n:END:\n\n")
    ("r" "recommendation" table-line (file+headline "~/Dropbox/Zettelkasten/org/recommendations.org" "Books")
 "|%t|%A||%?|" :append t :kill-buffer t)))


#+END_SRC
*** org-brain

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-brain :ensure t
  :init
  (setq org-brain-path "~/Dropbox/Zettelkasten/org/")
  :config (progn
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (setq org-brain-visualize-default-choices 'all)))
#+END_SRC

*** org-archive
 #+BEGIN_SRC emacs-lisp :tangle yes

(setq org-archive-location
        "~/Dropbox/Zettelkasten/org/archive.org::datetree/")

 #+END_SRC


*** org-tags
#+BEGIN_SRC emacs-lisp :tangle yes

(setq org-complete-tags-always-offer-all-agenda-tags t)
(setq org-tags-column -80)
(setq org-tags-match-list-sublevels (quote indented))
(setq tags-add-tables nil)

#+END_SRC

* Emacs style 
** Display

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-startup-indented t)
(setq org-hide-emphasis-markers t)
(setq org-hide-leading-stars t) 

(setq custom-safe-themes (quote
   ("365d9553de0e0d658af60cff7b8f891ca185a2d7ba3fc6d29aadba69f5194c7f" "10e231624707d46f7b2059cc9280c332f7c7a530ebc17dba7e506df34c5332c4" default)))

(use-package darkokai-theme
 :ensure t
 :config (load-theme 'darkokai t))

(global-unset-key (kbd "C-z"))

(setq org-startup-with-inline-images t)


;(require 'centered-window-mode)
#+END_SRC

#+RESULTS:
: t

** fonts
#+BEGIN_SRC emacs-lisp :tangle yes
  
(set-fontset-font "fontset-default" '(#x1100 . #xffdc)
                '("NanumBarunGothic" . "unicode-bmp" ))
(set-fontset-font "fontset-default" '(#xe0bc . #xf66e) 
                '("NanumBarunGothic" . "unicode-bmp"))
(set-fontset-font "fontset-default" '(#x2091 . #x21ff)     
              (font-spec :family "DejaVu Sans Mono" )) 

(setq use-default-font-for-symbols nil)

(use-package unicode-fonts
	  :ensure t
	  :disabled t
	  :init (unicode-fonts-setup))

#+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp :tangle yes

(setq fill-column 100)
(global-visual-line-mode t)

(use-package visual-fill-column
     :ensure t
     :config
     (progn
        (global-visual-fill-column-mode)))
(setq visual-fill-column-center-text t)
#+END_SRC

** org fonts
#+BEGIN_SRC emacs-lisp :tangle yes

(setq org-ellipsis " ෴ " )

(use-package org-bullets
	 :init
	 (add-hook 'org-mode-hook 
         (lambda () (org-bullets-mode 1)))
         (setq org-bullets-bullet-list 
         (quote ("◉""〉""⚬""»" "⊹"  "⯮" "⊸" "∞" "⛯"   ))))

;; ("[TODO]" :foreground "olivedrab1" :weight bold) 

(setq org-todo-keyword-faces
	'(("[◔]" :foreground "olivedrab1")
      ("[?]" :foreground "yellow") 
      ("[✓]" :foreground "gainsboro" )
      ("[☓]" :foreground "gainsboro")))

;; (setq org-todo-keywords 
;; (quote ((sequence "[TODO](t!)""[◔](s!)"  "[?](w!)" "|" "[✓](d!)"   "[☓](c!)" ))))

#+END_SRC

** encoding
#+BEGIN_SRC emacs-lisp :tangle yes

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+END_SRC

* Emacs behavior
** Frame
#+BEGIN_SRC emacs-lisp :tangle yes
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

(set-fringe-mode '(50 . 0))
(setq initial-buffer-choice "~/Dropbox/Zettelkasten/org/inbox.org")
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(setq inhibit-startup-screen t)
;common lisp. 
(require 'cl)  
#+END_SRC
** Saving files

#+BEGIN_SRC emacs-lisp :tangle yes
(global-auto-revert-mode t)

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
; (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
(setq auto-save-interval 20)
(setq auto-save-visited-file-name t)

(use-package magit
     :ensure t)

#+END_SRC
** Exports
#+BEGIN_SRC emacs-lisp :tangle yes

;printing
(add-hook 'org-agenda-before-write-hook
    (lambda ()
    (add-text-properties (point-min) (point-max)
    '(face (:foreground "black")))))

(setq inhibit-eol-conversion nil)


#+END_SRC
** sounds
 #+BEGIN_SRC emacs-lisp :tangle yes
  (setq visible-bell nil)
 #+END_SRC
** Buffer behavior
#+BEGIN_SRC emacs-lisp :tangle yes

(setq split-height-threshold nil)
(setq split-width-threshold 0)
(global-set-key (kbd "C-x /") 'shrink-window-horizontally)
#+END_SRC
** navigating
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ido)
(ido-mode t)
(use-package deft
             :bind ("<f8>" . deft)
             :ensure t
             :init 
             (progn 
             (setq deft-directory "~/Dropbox/Zettelkasten/org/")
             (setq deft-default-extension "org")
             (setq deft-use-filename-as-title t)
             (setq deft-text-mode 'org-mode)
             (setq deft-file-naming-rules '((noslash . "-")
                           		 (nospace . "-")
                           		 (case-fn . downcase))) 
             (setq deft-recursive t)
             (setq deft-extensions '("org" "txt" "emacs"))))

(use-package helm
       :config (helm-mode 1)
       :bind (("M-x" . helm-M-x)
              ([f3]  . helm-buffers-list)))

(fset 'yes-or-no-p 'y-or-n-p)

(bind-keys ("C-+" . text-scale-increase)
           ("C--" . text-scale-decrease)
           ("C-c l" . org-store-link))
(winner-mode 1)

#+END_SRC

#+RESULTS:
: t

* Testing pond

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-edit-src-content-indentation 0)


#+END_SRC

#+RESULTS:
: 0

* Archived
- mobile org [2017-10-19 Thu]
- habitica [2017-10-19 Thu]
