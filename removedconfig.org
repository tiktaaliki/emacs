
*** ORG-AGENDA HYDRA!
#+begin_src emacs-lisp :tangle yes
   ;; Hydra for org agenda (graciously taken from Spacemacs)
   (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                    :post (setq which-key-inhibit nil)
                                    :hint none :color amaranth)
     "
   Org agenda (_q_uit)

   ^Clock^      ^Visit entry^              ^Date^             ^Other^
   ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
   _ci_ in      _SPC_ in other window      _s_ schedule      _r_ reload
   _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
   _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
   _cj_ jump    _o_   link                 _+_  do later      _n_ next line
   ^^           ^^                         _-_  do earlier    _p_ previous line
   ^^           ^^                         ^^                 ^^
   ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
   ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
   _vd_ day        _ft_ by tag              _t_odo     _mf_ follow
   _vw_ week       _fr_ refine by tag                 _ml_ log
   _vt_ fortnight  _fc_ by category         _hr_ refile        _ma_ archive trees
   _vm_ month      _fh_ by top headline     _hA_ archive       _mA_ archive files
   _vy_ year       _fx_ by regexp           _,_ set tags      _mr_ clock report
   _vn_ next span  _fd_ delete all filters  _hp_ set priority  _md_ diaries
   _vp_ prev span  ^^                       ^^                 ^^
   _vr_ reset      ^^                       ^^                 ^^
   _n_ view ^^              ^^                       ^^                 ^^
   "
     ;; Entry
     ("hA" org-agenda-archive-default)
                                           ;  ("hk" org-agenda-kill)
     ("hp" org-agenda-priority)
     ("hr" org-agenda-refile)
     ("," org-agenda-set-tags)
     ("t" org-agenda-todo)
     ;; Visit entry
     ("o"   link-hint-open-link :exit t)
     ("<tab>" org-agenda-goto :exit t)
     ("TAB" org-agenda-goto :exit t)
     ("SPC" org-agenda-show-and-scroll-up)
     ("RET" org-agenda-switch-to :exit t)
     ;; Date
     ("dt" org-agenda-date-prompt :color red)
     ("dd" org-agenda-deadline)
     ("+" org-agenda-do-date-later)
     ("-" org-agenda-do-date-earlier)
     ("s" org-agenda-schedule :color red)
     ;; View
     ("<f7>" org-agenda)
     ("vd" org-agenda-day-view)
     ("vw" org-agenda-week-view)
     ("vt" org-agenda-fortnight-view)
     ("vm" org-agenda-month-view)
     ("vy" org-agenda-year-view)
     ("vn" org-agenda-later)
     ("vp" org-agenda-earlier)
     ("vr" org-agenda-reset-view)
     ;; Toggle mode
     ("ma" org-agenda-archives-mode)
     ("mA" (org-agenda-archives-mode 'files))
     ("mr" org-agenda-clockreport-mode)
     ("mf" org-agenda-follow-mode)
     ("ml" org-agenda-log-mode)
     ("md" org-agenda-toggle-diary)
     ;; Filter
     ("fc" org-agenda-filter-by-category)
     ("fx" org-agenda-filter-by-regexp)
     ("ft" org-agenda-filter-by-tag)
     ("fr" org-agenda-filter-by-tag-refine)
     ("fh" org-agenda-filter-by-top-headline)
     ("fd" org-agenda-filter-remove-all)
     ;; Clock
     ("cq" org-agenda-clock-cancel)
     ("cj" org-agenda-clock-goto :exit t)
     ("ci" org-agenda-clock-in :exit t)
     ("co" org-agenda-clock-out)
     ;; Other
     ("q" nil :exit t)
     ("gd" org-agenda-goto-date)
     ("n" next-line)
     ("p" previous-line)
     ("." org-agenda-goto-today)
     ("r" org-agenda-redo))

#+end_src

#+RESULTS:
: hydra-org-agenda/body

("o" "todos by mode"(
(tags-todo "email-/-HABIT-HOLD-WAIT")
(tags-todo "intake-/-HABIT-WAIT-HOLD")
(tags-todo "focus-/-HABIT-WAIT-HOLD")
(tags-todo "admin-/-HABIT-WAIT-HOLD")
(tags-todo "discovery-/-HABIT-WAIT-HOLD")
(tags-todo "integrate-/-HABIT-WAIT-HOLD")
))

("e" "all todos/projects/etc." ((todo "IN-PROG")
(todo "NEXT")
(tags-todo "-watch-listen+/TODO")
(todo "PROJ")
(tags-todo "watch|listen")
)
)

("e" "all todos/projects/etc." tags-todo "-email-intake-admin-discovery-focus-integrate-cooking-cleaning-self-/-HABIT-WAIT-HOLD-PROJ-AREA")

("b" "Timeblocking" ((agenda "" 
((org-agenda-span 2)
(org-agenda-clockreport-mode nil)))
(todo "AREA")))


("i" "todos by area" (
(tags-todo "ndd")
(tags-todo "mentat-/-HOLD-WAIT")
(tags-todo "sysadmin-/-HOLD-WAIT")
(tags-todo "lis-/-HOLD-WAIT")
(tags-todo "home-/-HABIT-WAIT")
)
)

#+begin_src emacs-lisp



   (use-package org-clock-convenience
     :ensure t
     :bind (:map org-agenda-mode-map
                 ("<S-up>" . org-clock-convenience-timestamp-up)
                 ("<S-down>" . org-clock-convenience-timestamp-down)
                 ("e" . org-clock-convenience-fill-gap)
                 ("o" . org-clock-convenience-fill-gap-both)))

 (use-package org-clock-split)

 
;removed trying to troubleshoot this helm timer error thing

(defun dfeich/helm-org-clock-in (marker)
"Clock into the item at MARKER"
(with-current-buffer (marker-buffer marker)
(goto-char (marker-position marker))
(org-clock-in)))
(eval-after-load 'helm-org
'(nconc helm-org-headings-actions
(list
(cons "Clock into task" #'dfeich/helm-org-clock-in))))



(setq helm-org-headings-actions '(
("Go to heading" . helm-org-goto-marker)
("Clock into task" . dfeich/helm-org-clock-in)
("Open in indirect buffer 'C-c i'" . helm-org--open-heading-in-indirect-buffer)
("Refile heading(s) (multiple-marked-to-selected, or current-to-selected) 'C-c w'" . helm-org--refile-heading-to)
("Insert link to this heading 'C-c l'" . helm-org-insert-link-to-heading-at-marker)
)
)

#+end_src
** continuous clocking - punch in, punch out
#+begin_src emacs-lisp  :tangle yes

   (setq bh/keep-clock-running nil)

   (defun bh/clock-in-to-next (kw)
     "Switch a task from TODO to NEXT when clocking in.
   Skips capture tasks, projects, and subprojects. Switch projects
   and subprojects from NEXT back to TODO"
     (when (not (and (boundp 'org-capture-mode) org-capture-mode))
       (cond
        ((and (member (org-get-todo-state) (list "TODO"))
              (bh/is-task-p))
         "NEXT")
        ((and (member (org-get-todo-state) (list "NEXT"))
              (bh/is-project-p))
         "TODO"))))

   (defun bh/find-project-task ()
     "Move point to the parent (project) task if any"
     (save-restriction
       (widen)
       (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
         (while (org-up-heading-safe)
           (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
             (setq parent-task (point))))
         (goto-char parent-task)
         parent-task)))

   (defun bh/punch-in (arg)
     "Start continuous clocking and set the default task to the
   selected task. If no task is selected set the Organization task
   as the default task."
     (interactive "p")
     (setq bh/keep-clock-running t)
     (if (equal major-mode 'org-agenda-mode)
         ;;
         ;; We're in the agenda
         ;;
         (let* ((marker (org-get-at-bol 'org-hd-marker))
                (tags (org-with-point-at marker (org-get-tags-at))))
           (if (and (eq arg 4) tags)
               (org-agenda-clock-in '(16))
             (bh/clock-in-organization-task-as-default)))
       ;;
       ;; We are not in the agenda
       ;;
       (save-restriction
         (widen)
                                           ; Find the tags on the current task
         (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
             (org-clock-in '(16))
           (bh/clock-in-organization-task-as-default)))))

   (defun bh/punch-out ()
     (interactive)
     (setq bh/keep-clock-running nil)
     (when (org-clock-is-active)
       (org-clock-out))
     (org-agenda-remove-restriction-lock))

   (defun bh/clock-in-default-task ()
     (save-excursion
       (org-with-point-at org-clock-default-task
         (org-clock-in))))

   (defun bh/clock-in-parent-task ()
     "Move point to the parent (project) task if any and clock in"
     (let ((parent-task))
       (save-excursion
         (save-restriction
           (widen)
           (while (and (not parent-task) (org-up-heading-safe))
             (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
               (setq parent-task (point))))
           (if parent-task
               (org-with-point-at parent-task
                 (org-clock-in))
             (when bh/keep-clock-running
               (bh/clock-in-default-task)))))))

   (defvar bh/organization-task-id "default-task-id")

   (defun bh/clock-in-organization-task-as-default ()
     (interactive)
     (org-with-point-at (org-id-find bh/organization-task-id 'marker)
       (org-clock-in '(16))))

   (defun bh/clock-out-maybe ()
     (when (and bh/keep-clock-running
                (not org-clock-clocking-in)
                (marker-buffer org-clock-default-task)
                (not org-clock-resolving-clocks-due-to-idleness))
       (bh/clock-in-parent-task)))

   (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))

#+end_src

#+begin_src emacs-lisp
  ("bcc" :inherit org-tag :foreground "yellow green")
  ("audiovisual" :inherit org-tag :foreground "dark orange")

  ("read" :inherit org-tag :foreground "dark orange")
  ("ingest" :inherit org-tag :foreground "dark orange")
  ("create" :inherit org-tag :foreground "dark orange")
  ("cleaning" :inherit org-tag :foreground "dark orange")
  ("admin" :inherit org-tag :foreground "dark orange")
  ("research" :inherit org-tag :foreground "dark orange")

  (:startgrouptag)
  ("mentat" . ?m)
  (:grouptags)
  ("korean")
  (:endgrouptag)

  ,#+TAGS: { MODE : admin(a) home(h) focus(f) lis(l) }
  ,#+TAGS: { admin : email(e) browser(b) }
  ,#+TAGS: { focus : read(r) notes(n) }
  ,#+TAGS: { home : kitchen(k) laundry cleaning }
  ("bcc")
  (:startgrouptag)
  ("sysadmin" . ?s)
  (:grouptags)
  ("emacs")
  ("system")
  (:endgrouptag)



#+end_src

*** window HYDRA
#+begin_src emacs-lisp :tangle yes


   (defhydra hydra-window ()
     "
      Movement^^        ^Split^         ^Switch^		^Resize^
      ----------------------------------------------------------------
      _h_ ←       	_v_ertical    	_b_uffer		_q_ shrink
      _j_ ↓        	_x_ horizontal	_f_ind files	_w_ balance
      _k_ ↑        	_z_ undo      	_a_ce 1		_e_nlarge
      _l_ →        	_Z_ reset      	_s_wap		_r_ split toggle
      _F_ollow		_D_lt Other   	_S_ave		max_i_mize
      _SPC_ cancel	_o_nly this   	_d_elete          _t_ranspose	
      "
     ("h" windmove-left )
     ("j" windmove-down )
     ("k" windmove-up )
     ("l" windmove-right )
     ("q" shrink-window-horizontally)
     ("w" balance-windows)
     ("e" enlarge-window)
     ("r" window-split-toggle)
     ("b" helm-mini)
     ("f" helm-find-files)
     ("F" follow-mode)
     ("a" (lambda ()
            (interactive)
            (ace-window 1)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body))
      )
     ("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right))
      )
     ("x" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
      )
     ("s" (lambda ()
            (interactive)
            (ace-window 4)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body)))
     ("S" save-buffer)
     ("d" delete-window)
     ("D" (lambda ()
            (interactive)
            (ace-window 16)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body))
      )
     ("o" delete-other-windows)
     ("i" ace-maximize-window)
     ("t" transpose-windows)
     ("z" (progn
            (winner-undo)
            (setq this-command 'winner-undo))
      )
     ("Z" winner-redo)
     ("SPC" nil)
     )
   (global-set-key (kbd "C-<f9>") 'hydra-window/body)

#+end_src

#+RESULTS:
: hydra-window/body

** between buffers
#+begin_src emacs-lisp :tangle yes

    (defhydra hydra-buffer-menu (:color pink
					:hint nil)
      "
    ^Mark^             ^Unmark^           ^Actions^          ^Search
    ^^^^^^^^-----------------------------------------------------------------
    _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
    _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
    _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
    _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
    _~_: modified
    "
      ("m" Buffer-menu-mark)
      ("u" Buffer-menu-unmark)
      ("U" Buffer-menu-backup-unmark)
      ("d" Buffer-menu-delete)
      ("D" Buffer-menu-delete-backwards)
      ("s" Buffer-menu-save)
      ("~" Buffer-menu-not-modified)
      ("x" Buffer-menu-execute)
      ("b" Buffer-menu-bury)
      ("g" revert-buffer)
      ("T" Buffer-menu-toggle-files-only)
      ("O" Buffer-menu-multi-occur :color blue)
      ("I" Buffer-menu-isearch-buffers :color blue)
      ("R" Buffer-menu-isearch-buffers-regexp :color blue)
      ("c" nil "cancel")
      ("v" Buffer-menu-select "select" :color blue)
      ("o" Buffer-menu-other-window "other-window" :color blue)
      ("q" quit-window "quit" :color blue))

    (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)



  (require 'package)
  (setq package-load-list
  '(	(helm t)
  (ace-jump-buffer t)
  (avy t)
  (dash t)
  (async t)
  (popup t)
  (helm-core t)
  (ace-jump-mode t)
  (ace-link t)
  (ace-window t)
  (activity-watch t)
  (use-package t)
  (bind-key t)
  (aggressive-indent t)
  (all-the-icons t)
  (memoize t)
  (anki-connect t)
  (anki-editor t)
  (request t)
  (auto-complete-auctex t)
  (yasnippet t)
  (auto-complete t)
  (calfw t)
  (calfw-org t)
  (centered-cursor-mode t)
  (clean-buffers      t)
  (company-auctex     t)
  (company-bibtex     t)

  (crux               t)
  (define-word        t)
  (deft t)
  (diminish t)          
  (dired-toggle-sudo  t)
  (doom-themes        t)
  (ebib               t)
  (expand-region      t)
  (flyspell-correct-helm t)
  (gnu-elpa-keyring-update t)
  (dash-functional t)
  (company t)
  (auctex t)
  (parsebib t)
  (flyspell-correct t)

  (gnuplot            t)
  (gnuplot-mode       t)
  (helm-bibtexkey     t)
  (chronos t)
  (helm-chronos       t)
  (helm-flyspell      t)
  (helm-org           t)

  (helm-swoop         t)
  (helm-unicode       t)
  (highlight          t)
  (hl-anything        t)
  (html2org           t)
  (interleave         t)
  (keychain-environment t)
  (korean-holidays    t)
  (latex-preview-pane t)
  (ledger-mode        t)
  (magit              t)
  (magit-popup        t)
  (markdown-mode      t) 
  (markdown-preview-eww t)
  (mixed-pitch        t)
  (most-used-words    t)
  (mu4e-conversation  t)
  (multiple-cursors   t)
  (mw-thesaurus       t)
  (nov                t)
  (olivetti           t)
  (on-screen          t)
  (openwith           t)
  (org                t)
  (org-ac             t)
  (org-alert          t)
  (org-bookmark-helm t)
  (org-chef           t)
  (org-cliplink       t)
  (org-clock-convenience t)
  (git-commit t)
  (transient t)
  (with-editor t)
  (esxml t)
  (auto-complete-pcmp t)
  (log4e t)
  (yaxception t)
  (s t)
  (alert t)
  (gntp t)
  (org-clock-split    t)
  (org-clock-today    t)
  (org-download       t)
  (org-edna           t)
  (org-mru-clock      t)
  (org-msg            t)
  (org-noter          t)



  (org-plus-contrib   t)
  (org-pomodoro       t)
  (org-recent-headings t)

  (org-roam           t)
  (org-sticky-header  t)
  (org-superstar      t)
  (org-treeusage      t)
  (org-web-tools      t)
  (htmlize t)
  (frecency t)
  (a t)
  (helm-bibtex t)
  (bibtex-completion t)
  (f t)
  (biblio t)
  (biblio-core t)
  (ivy t)
  (hydra t)
  (lv t)
  (key-chord t)
  (emacsql t)
  (emacsql-sqlite3 t)

  (ov                 t)
  (ox-clip            t)
  (ox-pandoc          t)
  (pandoc             t)
  (pandoc-mode        t)
  (pdf-view-restore   t)
  (powerthesaurus     t)
  (quelpa             t)
  (rainbow-delimiters t)
  (scrollkeeper       t)
  (smartparens        t)
  (solarized-theme    t)
  (speed-type         t)
  (spray              t)
  (ssh-agency         t)
  (undo-tree          t)

  (unkillable-scratch t)
  (uptimes            t)
  (visible-mark       t)
  (visual-fill-column t)
  (w3m                t)
  (which-key          t)
  (xml+               t)
  (yankpad            t)
  (zoom               t)
  (ht t)
  (pdf-tools t)
  (tablist t)
  (jeison t)
  (swiper t)
  (counsel            t)
  (helm-org-rifle     t)



  (org-noter-pdftools t)
  (org-pdftools       t)
  (org-pdfview        t)
  (org-ref            t)
  (bufler t)
  (pretty-hydra t)
  (magit-section t)
  (company-org-roam t)
  (projectile t)
  (pkg-info t)
  (epl t)
  (helm-projectile    t)
  (persistent-soft t)
  (pcache t)
  (list-utils t)
  (font-utils t)
  (unicode-fonts      t)
  (ucs-utils t)
  (powerthesaurus t)
  (with-editor t)
  ))
  (package-initialize)



   (defhydra hydra-pdftools (:color blue :hint nil)
     "
									 ╭───────────┐
	  Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
      ╭──────────────────────────────────────────────────────────────────┴───────────╯
	    ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	    ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	    ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	    ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
       _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	    ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	    ^^_n_^^      ^ ^  _r_eset slice box
	    ^^^↓^^^
	    ^^_G_^^
      --------------------------------------------------------------------------------
	   "
     ("\\" hydra-master/body "back")
     ("<ESC>" nil "quit")
     ("al" pdf-annot-list-annotations)
     ("ad" pdf-annot-delete)
     ("aa" pdf-annot-attachment-dired)
     ("am" pdf-annot-add-markup-annotation)
     ("at" pdf-annot-add-text-annotation)
     ("y"  pdf-view-kill-ring-save)
     ("+" pdf-view-enlarge :color red)
     ("-" pdf-view-shrink :color red)
     ("0" pdf-view-scale-reset)
     ("H" pdf-view-fit-height-to-window)
     ("W" pdf-view-fit-width-to-window)
     ("P" pdf-view-fit-page-to-window)
     ("n" pdf-view-next-page-command :color red)
     ("p" pdf-view-previous-page-command :color red)
     ("d" pdf-view-dark-minor-mode)
     ("b" pdf-view-set-slice-from-bounding-box)
     ("r" pdf-view-reset-slice)
     ("g" pdf-view-first-page)
     ("G" pdf-view-last-page)
     ("e" pdf-view-goto-page)
     ("o" pdf-outline)
     ("s" pdf-occur)
     ("i" pdf-misc-display-metadata)
     ("u" pdf-view-revert-buffer)
     ("F" pdf-links-action-perfom)
     ("f" pdf-links-isearch-link)
     ("B" pdf-history-backward :color red)
     ("N" pdf-history-forward :color red)
     ("l" image-forward-hscroll :color red)
     ("h" image-backward-hscroll :color red))


   (use-package org-treeusage
     :bind ("C-c <f5>" . org-treeusage-mode)
     :custom
     ;; Below two settings recreate the above image
     ((org-treescope-overlay-header nil)
      (org-treeusage-overlay-usecolorbands nil)))

   (defun org-count-subheadings ()
     "Count the number of direct and recursive subheadings below the current heading."
     (interactive)
     (let ((descendants 0)
	   (children 0)
	   (heading-level (1+ (org-outline-level)))
	   (end (save-excursion
		  (ignore-errors
		    (outline-end-of-subtree)
		    (point)))))
       (when end
	 (save-excursion 
	   (while (and (outline-next-heading)
		       (< (point) end))
	     (progn
	       (setf descendants (1+ descendants))
	       (when (= heading-level (org-outline-level))
		 (setf children (1+ children)))))))
       (message "%d direct children, %d descendants" children descendants)))

  (setq chronos-notification-time 120)
   (setq chronos-notification-wav "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")


   (defun chronos-switch-buffer-notify (c)
     "Switch to the chronos buffer when timer expires"
     (switch-to-buffer "chronos"))

   (use-package org-pomodoro) (setq org-pomodoro-finished-sound "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")
					   ; (setq org-pomodoro-finished-sound-args "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")
   (setq org-pomodoro-short-break-sound "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav" )
   (setq org-pomodoro-long-break-sound "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav" )
   (setq org-pomodoro-ticking-sound-p t)
   (setq org-pomodoro-manual-break nil)
   (setq org-pomodoro-clock-break nil)

   (setq helm-chronos-standard-timers
	 '(       "=13:00/END fast + =20:00/BEGIN fast"
		  "=18:00/begin ref shift + -5/ref in 5 min + =22:00/end shift"
		  "25/END pomodoro + 5/END break" 
		  "50/END pomodoro + 5/get back to work" 

		  "25/END pomodoro 1 + 5/END break 1 + 25/END pomodoro 2 + 5/END break 2 + 25/END pomodoro 3 + 5/END break 3 + 25/END pomodoro 4 + 5/END break 4"))


   (use-package crux
     :ensure t
     :bind (("C-c o" . crux-open-with)
            ("M-o" . crux-smart-open-line)
            ("C-c n" . crux-cleanup-buffer-or-region)
            ("C-c f" . crux-recentf-find-file)
            ("C-M-z" . crux-indent-defun)
            ("C-c u" . crux-view-url)
            ("C-c e" . crux-eval-and-replace)
            ("C-c w" . crux-swap-windows)
            ("C-c D" . crux-delete-file-and-buffer)
            ("C-c r" . crux-rename-buffer-and-file)
            ("C-c t" . crux-visit-term-buffer)
            ("C-c k" . crux-kill-other-buffers)
            ("C-c TAB" . crux-indent-rigidly-and-copy-to-clipboard)
            ("C-c I" . crux-find-user-init-file)
            ("C-c S" . crux-find-shell-init-file)
            ("s-r" . crux-recentf-find-file)
            ("s-j" . crux-top-join-line)
            ("C-^" . crux-top-join-line)
            ("s-k" . crux-kill-whole-line)
            ("C-<backspace>" . crux-kill-line-backwards)
            ("s-o" . crux-smart-open-line-above)
            ([remap move-beginning-of-line] . crux-move-beginning-of-line)
            ([(shift return)] . crux-smart-open-line)
            ([(control shift return)] . crux-smart-open-line-above)
            ([remap kill-whole-line] . crux-kill-whole-line)
            ("C-c s" . crux-ispell-word-then-abbrev)))
#+end_src

#+RESULTS:
: hydra-buffer-menu/body




(eval-after-load "dired-aux"
'(add-to-list 'dired-compress-file-suffixes 
'("\\.zip\\'" ".zip" "unzip")))


(defhydra hydra-dired (:hint nil :color pink)
"
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
("\\" dired-do-ispell)
("(" dired-hide-details-mode)
(")" dired-omit-mode)
("+" dired-create-directory)
("=" diredp-ediff)         ;; smart diff
("?" dired-summary)
("$" diredp-hide-subdir-nomove)
("A" dired-do-find-regexp)
("C" dired-do-copy)        ;; Copy all marked files
("D" dired-do-delete)
("E" dired-mark-extension)
("e" dired-ediff-files)
("F" dired-do-find-marked-files)
("G" dired-do-chgrp)
("g" revert-buffer)        ;; read all directories again (refresh)
("i" dired-maybe-insert-subdir)
("l" dired-do-redisplay)   ;; relist the marked or singel directory
("M" dired-do-chmod)
("m" dired-mark)
("O" dired-display-file)
("o" dired-find-file-other-window)
("Q" dired-do-find-regexp-and-replace)
("R" dired-do-rename)
("r" dired-do-rsynch)
("S" dired-do-symlink)
("s" dired-sort-toggle-or-edit)
("t" dired-toggle-marks)
("U" dired-unmark-all-marks)
("u" dired-unmark)
("v" dired-view-file)      ;; q to exit, s to search, = gets line #
("w" dired-kill-subdir)
("Y" dired-do-relsymlink)
("z" diredp-compress-this-file)
("Z" dired-do-compress)
("q" nil)
("." nil :color blue))

; (define-key dired-mode-map "." 'hydra-dired/body)

