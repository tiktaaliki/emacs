#+begin_src emacs-lisp :tangle yes

  (setq  org-agenda-sorting-strategy 
         '((agenda time-up)
           (todo priority-down category-keep)
           (tags priority-down category-keep)
           (search category-keep)))
  (setq org-agenda-tags-todo-honor-ignore-options t)
  (setq org-agenda-use-tag-inheritance t)

  (setq org-agenda-span (quote day))
  (setq org-agenda-jump-prefer-future t)


  (setq org-agenda-start-on-weekday nil)


  (setq org-agenda-include-diary nil)
  (setq org-agenda-inhibit-startup nil)
  (setq org-agenda-time-grid
        (quote
         ((daily weekly today remove-match)
          (900  1200 1500  1800  2100 )
          "......" "----------------")))


(setq org-agenda-custom-commands '(

  ("k" "all untagged TODOs" tags-todo "-{.*}") 
))


#+END_SRC


  (setq org-agenda-custom-commands '(

                                    ;RETURN ANY TODO ITEMS WTIHOUT TAGS
                                     ("x" "With deadline columns" alltodo "" 
                                      ((org-agenda-overriding-columns-format "%40ITEM %SCHEDULED %DEADLINE " )
                                       (org-agenda-view-columns-initially t)
                                       (org-agenda-sorting-strategy '(timestamp-up))
                                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("습관" "HOLD" "WAIT" "PROJ")) ) ))
                                     ("l" "all todos"
                                      ((agenda ""  ((org-agenda-span 1) ))
                                       (alltodo "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'todo '("AREA" "습관" "HOLD" "WAIT" "PROJ")) ))
                                                (org-agenda-sorting-strategy '(priority-down)) )))
                                     ("h" "all HOLD/WAIT items" todo "HOLD|WAIT")
                                     ("g" "all UNSCHEDULED NEXT|TODAY|IN-PROG" 
                                      ((agenda "" 
                                               ((org-agenda-span 2)  
                                                (org-agenda-clockreport-mode nil)))
                                       (todo "NEXT|TODAY|IN-PROG"))
                                      ((org-agenda-todo-ignore-scheduled t)))
                                     ("u" "all UNSCHEDULED" alltodo ""                                                          
                                      (    (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("습관" "HOLD"  "PROJ" "AREA")) )
                                         (org-agenda-todo-ignore-scheduled t) )
                                      )
                                     ))



(setq display-time-mode t)




  (use-package org
    :custom-face
    (org-level-1 ((t (:foreground "#337bae" :weight normal :family "victor mono"))))  
    (org-level-2 ((t (:inherit org-level-1 :foreground "#9a9eab" :height 0.9))))
    (org-level-3 ((t (:inherit org-level-2 :foreground "#68829e"  :height 0.9))))
    (org-level-4 ((t (:inherit org-level-3 :foreground "light coral" :height 1.0))))
    (org-link ((t (:inherit link :foreground "#b38867" :underline nil :weight normal :family "monofur"))))
    (org-ellipsis ((t (:foreground "#a4cabc" :underline nil))))
    (org-todo ((t (:foreground "#98be65" :weight normal :height 0.75 :family "nova mono"))))
    (org-done ((t (:inherit org-headline-done :weight normal :height 0.9 :family "nova mono"))))
    (org-date ((t (:foreground "#ECBE7B" :underline t :family "monofur"))))
    (org-drawer ((t (:foreground "sky blue" :height 0.8))))
    (org-headline-done ((t (:foreground "#5B6268" :strike-through t))))
    (org-special-keyword ((t (:foreground "#83898d" :height 0.9)))) 
    (org-property-value ((t (:foreground "#83898d" :height 0.9)))) 
    )






  (use-package mic-paren
    :config
    (paren-activate)
    )
  adding :defer t to smartparens solves Eager macro-expansion failure: (wrong-type-argument listp [(first-item . rest-items) (sp-get-list-items)]) problem 
 
 
 


  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "_" "_" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))
  (sp-local-pair 'org-mode "+" "+" :actions '(wrap))
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "=" "=" :actions '(wrap))
  (sp-local-pair 'org-mode "-" "-" :actions '(wrap))


   


#+begin_src emacs-lisp :tangle yes
 (setq initial-major-mode 'org-mode)
 (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))
 (add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
;


(load "pi")
(load "org-pdfview")
(load "org-protocol-capture-html")
(load "org-book")
(load "org-depend")
(load "bookmark+")
(load "org-contacts")
(load "org-toc")
(load "org-registry")
(load "run-assoc")
(load "unbound")
(load "org-checklist")
(load "org-notify")

(load "clipboard2org")
(load "pymupdf-mode")
(load "org-super-links")
(load "backup-each-save")
(load "periodic-commit-minor-mode")

         #+end_src

         #+RESULTS:
         : t
	 

 
#+begin_src emacs-lisp :tangle yes
     

(setq byte-compile-warnings '(cl-functions))	
;(setq mu4e-get-mail-command "mbsync -aV") 

(put 'digit-argument 'disabled nil)


					;     (set-face-attribute 'org-special-keyword nil :height 0.8)
					;    (set-face-attribute 'org-date nil :underline t :foreground "#a1d6e2" :family "monofur" )
(set-face-attribute 'org-agenda-diary nil :foreground "#a4cabc" )
					;     (set-face-attribute 'org-ellipsis nil :foreground "#a4cabc" :strike-through nil)

  

      ;https://www.reddit.com/r/emacs/comments/8tz1r0/how_to_set_font_according_to_languages_that_i/e1bjce6?utm_source=share&utm_medium=web2x&context=3
      (when (fboundp #'set-fontset-font)
        (set-fontset-font t 'korean-ksc5601	
                          ;; Noto Sans CJK: https://www.google.com/get/noto/help/cjk/
                          (font-spec :family "Nanum Gothic Coding")))
      (dolist (item '(("Nanum Gothic Coding" . 1.0)))
        (add-to-list 'face-font-rescale-alist item))

            (setq use-default-font-for-symbols nil)

            (use-package unicode-fonts
              :ensure t
              :defer t

:init (unicode-fonts-setup))


#+end_src

#+RESULTS:
   
#+BEGIN_SRC emacs-lisp :tangle yes


	(eval-after-load "flyspell"
	  '(define-key flyspell-mode-map (kbd "C-.") nil))




#+END_SRC

#+RESULTS:
: 70




#+BEGIN_SRC emacs-lisp :tangle yes



   (setq org-list-demote-modify-bullet
         '(("+" . "*") ("-" . "+") ("*" . "-")))
                                           ;  (setq org-list-demote-modify-bullet
                                           ;       '(("+" . "-") ("-" . "+") ))
   (setq org-list-allow-alphabetical t)
   (setq org-list-indent-offset 1)
(setq org-superstar-prettify-item-bullets t)
   (setq org-list=description-max-indent 5)
                                           ;  (setq org-bullets-bullet-list (quote ( "⚫" "⧽" "○" "⯌"     "◆"  "☆"            "⚬" )))
                                           ;   "•"    "‣"    "⏵""▷"   "♦""◇"    "◉" "⬤"〇⭕ "⨀"  "★" "⬤" "ᐅ"  "〇"     "⟐"     "⚬" )))
                                           ;○◔◑◕●⌾⭗☉⌾◎◉⨀◎⌾◉◍⊗⊛•○∙∙⊛⁕✱ ൦❄⊕⊖⊗⊘⊙⊚⊛⊜⊝∘∙◉⏺○◍◎●◐◑◒◓◔◕◦◯◴◵◶◷☉⚪⚫⚬◐

                                           ; too tall: "⬥"  "⯈" "⚫" "∙" ⬤ ✶ "✧" "▸" "⯏"  "⭗"   "⛭" "⚪"  "⭐"  "⏵" 
   (setq org-inlinetask-min-level 7)
   (setq org-checkbox-hierarchical-statistics nil)

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
   
  


(setq org-startup-with-inline-images t)
(setq org-startup-align-all-tables t)

;   (use-package org-bullets)
;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-catch-invisible-edits (quote smart))
(setq org-cycle-separator-lines 0)
                                           

(setq org-show-context-detail '(
                               (agenda . canonical)
                               (bookmark-jump . canonical)
                               (isearch . canonical)
                               (default . minimal)
                                   ))


#+END_SRC




#+RESULTS:
: [nil 24637 31859 998114 300 kiwon/org-agenda-redo-in-other-window nil nil 516000]
  (setq org-agenda-window-setup 'current-window)

  (defun kiwon/org-agenda-redo-in-other-window ()
    "Call org-agenda-redo function even in the non-agenda buffer."
    (interactive)
    (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
      (when agenda-window
        (with-selected-window agenda-window (org-agenda-redo)))))
  (run-at-time nil 300 'kiwon/org-agenda-redo-in-other-window)




#+begin_src emacs-lisp :tangle yes
   (setq org-habit-graph-column 80)
   (setq org-habit-show-habits nil)
   (setq org-habit-show-all-today nil)
   (setq org-habit-show-habits-only-for-today nil)

   (defvar my/org-habit-show-graphs-everywhere t
     "If non-nil, show habit graphs in all types of agenda buffers.

      Normally, habits display consistency graphs only in
      \"agenda\"-type agenda buffers, not in other types of agenda
      buffers.  Set this variable to any non-nil variable to show
      consistency graphs in all Org mode agendas.")

   (defun my/org-agenda-mark-habits ()
     "Mark all habits in current agenda for graph display.

      This function enforces `my/org-habit-show-graphs-everywhere' by
      marking all habits in the current agenda as such.  When run just
      before `org-agenda-finalize' (such as by advice; unfortunately,
      `org-agenda-finalize-hook' is run too late), this has the effect
      of displaying consistency graphs for these habits.

      When `my/org-habit-show-graphs-everywhere' is nil, this function
      has no effect."
     (when (and my/org-habit-show-graphs-everywhere
                (not (get-text-property (point) 'org-series)))
       (let ((cursor (point))
             item data) 
         (while (setq cursor (next-single-property-change cursor 'org-marker))
           (setq item (get-text-property cursor 'org-marker))
           (when (and item (org-is-habit-p item)) 
             (with-current-buffer (marker-buffer item)
               (setq data (org-habit-parse-todo item))) 
             (put-text-property cursor
                                (next-single-property-change cursor 'org-marker)
                                'org-habit-p data))))))

   (advice-add #'org-agenda-finalize :before #'my/org-agenda-mark-habits)


#+end_src



#+BEGIN_SRC emacs-lisp :tangle yes
   (defun my/org-checkbox-todo ()
     "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
     (let ((todo-state (org-get-todo-state)) beg end)
       (unless (not todo-state)
         (save-excursion
           (org-back-to-heading t)
           (setq beg (point))
           (end-of-line)
           (setq end (point))
           (goto-char beg)
           (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                  end t)
               (if (match-end 1)
                   (if (equal (match-string 1) "100%")
                       (unless (string-equal todo-state "DONE")
                         (org-todo 'done))
                     (unless (string-equal todo-state "✶")
                       (org-todo 'todo)))
                 (if (and (> (match-end 2) (match-beginning 2))
                          (equal (match-string 2) (match-string 3)))
                     (unless (string-equal todo-state "DONE")
                       (org-todo 'done))
                   (unless (string-equal todo-state "✶")
                     (org-todo 'todo)))))))))

   (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
  
   (setq org-log-into-drawer t)
(use-package org-clock-split)
   (setq org-clock-continuously nil)
   (setq org-log-note-clock-out t)
   (defun insert-timestamp (prefix)
     "Insert the current date. With prefix-argument, use ISO format. With
            two prefix arguments, write out the day and month name."
     (interactive "P")
     (let ((format (cond
                    ((not prefix) "%Y.%m%d")
                    ((Equal prefix '(4)) "%Y-%m-%d-%H%M")
                    ((equal prefix '(16)) "%A, %d. %B %Y")))
           )
       (insert (format-time-string format))))

   (defun my-org-clock-select-task ()
     (interactive)
     (org-clock-select-task))

   (define-key org-mode-map (kbd "C-<f2>") #'my-org-clock-select-task)





   (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
   (setq org-clock-into-drawer t)
   (setq org-clock-out-remove-zero-time-clocks t)
                                           ;(setq org-clock-in-resume nil)

   (setq org-clock-out-when-done t)


   (setq org-clock-report-include-clocking-task t)


   (setq org-clock-mode-line-total (quote current))

   (setq org-clock-clocked-in-display (quote both))
   (setq org-clock-clocktable-default-properties
         (quote
          (:maxlevel 4 :block today :hidefiles t :tcolumns 1 :narrow 30 :level nil :link t)))
   (setq org-clock-history-length 15)


                                           ;      (setq org-clock-in-resume t)


   (setq org-clock-in-switch-to-state nil)
   (setq org-clock-persist 'history)
                                           ;      (org-clock-persistence-insinuate)
   (setq org-clock-persist-query-resume nil)
   (setq org-clock-sound t)
   (setq org-clocktable-defaults (quote (:maxlevel 4 :scope subtree)))


#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-chef
     :defer t
     )
#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes


   (defun my-org-capture-place-template-dont-delete-windows (oldfun args)
     (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
       (apply oldfun args)))

                                           ;this prevents org-capture from replacing any windows. it just adds. 

         #+END_SRC
        
#+BEGIN_SRC emacs-lisp :tangle yes

   (setq org-complete-tags-always-offer-all-agenda-tags nil)
   (setq org-tags-match-list-sublevels (quote indented))
   (setq tags-add-tables nil)
   (setq org-fast-tag-selection-single-key t)
   (setq org-use-fast-tag-selection (quote auto))

   (setq org-tag-persistent-alist '( 
                                    (:startgroup)
                                    ("ndd" . ?n)
                                    ("sysadmin" . ?s)
                                    ("home" . ?h)
                                    ("lis" . ?l)
                                    ("mentat" . ?m)
                                    ("editing" . ?e)
                                    (:endgroup)



                                    (:startgroup)
                                    ("admin" . ?a)
                                    ("focus" . ?f)
                                    (:endgroup)
                                    (:startgroup)
                                    ("email")
                                    ("discovery" . ?d)
                                    ("intake" . ?i)
                                    ("integrate")
                                    (:endgroup)

                                    (:startgrouptag)
                                    ("lis" . ?l)
                                    (:grouptags)

                                    ("csi")
                                    ("job")
                                    (:endgrouptag)

                                    (:startgrouptag)
                                    ("intake")
                                    (:grouptags)
                                    ("listen")
                                    ("read" . ?r)
                                    ("watch" . ?w)
                                    (:endgrouptag)

                                    (:startgrouptag)
                                    ("home" . ?h)
                                    (:grouptags)
                                 ("habit")
                                    ("cooking")
                                    ("cleaning")
                                    (:endgrouptag)



                                    ))

   (setq org-tag-faces '(
                         ("ndd" :inherit org-tag :foreground "yellow green")
                         ("sysadmin" :inherit org-tag :foreground "yellow green")
                         ("lis" :inherit org-tag :foreground "yellow green")
                         ("mentat" :inherit org-tag :foreground "yellow green")
                         ("editing" :inherit org-tag :foreground "yellow green")
                         ("self" :inherit org-tag :foreground "yellow green")
                         ("home" :inherit org-tag :foreground "yellow green")
                                           ;group2
                         ("journal" :inherit org-tag :foreground "dark orange")
                         ("job" :inherit org-tag :foreground "dark orange")
                         ("csi" :inherit org-tag :foreground "dark orange")
		          ("read" :inherit org-tag :foreground "dodger blue")
		      
                         ))


#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  

   (setq org-edna-mode t)
   (org-edna-mode)
   (setq org-log-done (quote time))
   (setq org-enforce-todo-checkbox-dependencies nil)
   (setq org-enforce-todo-dependencies t)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
  ;   (setq org-id-link-to-org-use-id (quote create-if-interactive))

#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes
   (require 'cl) 
   (setq org-babel-load-languages '((emacs-lisp . t)
				    (css . t)
				    (latex . t)
				    ))
   (setq org-edit-src-content-indentation 3)
					   ;   If non-nil, the effect of TAB in a code block is as if it were issued in the language major mode buffer.
   
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   (setq org-attach-id-dir "/home/betsy/Dropbox/Zettelkasten/attachments")
   (setq org-attach-method (quote ln))
   (setq org-attach-store-link-p t)

(setq org-remove-highlights-with-change nil)
   (setq org-reverse-note-order t)
   (setq org-columns-default-format "%50ITEM %TODO %3PRIORITY %TAGS")
   (setq org-columns-default-format-for-agenda "%50ITEM %TODO %3PRIORITY %TAGS %CLOCKSUM")
   (setq org-ctrl-k-protect-subtree (quote error))
   (setq org-directory "~/Dropbox/Zettelkasten")

   (setq org-export-with-author nil)
   (setq org-export-with-toc nil)
   (setq org-export-initial-scope 'subtree)
   (setq org-export-with-section-numbers nil)
#+END_SRC

#+RESULTS:







#+begin_src emacs-lisp :tangle yes
        (defhydra hydra-zoom (:color red)  "zoom"
          ("=" text-scale-increase "in")
          ("-" text-scale-decrease "out")
          ("0" (text-scale-adjust 0) "reset")
          ("o" (other-window) "other window")
          ("q" nil "quit" :color blue))

        (global-set-key (kbd "C-=") 'hydra-zoom/body)
   (global-hl-line-mode +1)
   (global-hi-lock-mode 1)
   (use-package bar-cursor)
      (bar-cursor-mode 1)
   (beacon-mode 1)
(good-scroll-mode 1)
#+end_src

#+RESULTS:
: t









#+begin_src emacs-lisp :tangle yes
  (setq history-delete-duplicates t)
  (setq helm-M-x-always-save-history t)
  (setq helm-M-x-reverse-history nil)
  (setq helm-bibtex-full-frame nil)
  (setq helm-display-buffer-default-height 22)
  (setq helm-full-frame nil)
  (setq helm-help-full-frame nil)
  (setq helm-move-to-line-cycle-in-source nil)
  (setq helm-org-rifle-show-path nil)
                                          ;(setq helm-split-window-inside-p nil)

#+end_src

#+RESULTS:


#+BEGIN_SRC emacs-lisp :tangle yes
  (setq bookmark-save-flag 1)
  (use-package ido
    :ensure t
    :defer t
    )
  (ido-mode t)

  (setq ido-file-extensions-order '(".org" ".txt" ".emacs" ".el" ".ini" ".cfg" ".cnf"))


  (setq zoom-mode t)

  (defun size-callback ()
    (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
          (t                            '(0.5 . 0.5))))

  (custom-set-variables
   '(zoom-size 'size-callback))

  (custom-set-variables
   '(zoom-ignored-major-modes '(dired-mode markdown-mode))
   '(zoom-ignored-buffer-names '("zoom.el" "init.el"))
   '(zoom-ignored-buffer-name-regexps '("^*calc"))
   '(zoom-ignore-predicates '((lambda () (> (count-lines (point-min) (point-max)) 20)))))

  (custom-set-variables
   '(temp-buffer-resize-mode t))

                                          ;If you want to mark a folder manually as a project just create an empty .projectile file in it.
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
                                          ;   (eyebrowse-mode t)
                                          ;undo and redo changes in window configuration eg go to previous buffer 




  (setq frame-title-format (list (format "%s %%S: %%j " (system-name))
                                 '(buffer-file-name "%f" (dired-directory dired-directory "%b"))
                                 ))

  (defun window-split-toggle ()
    "Toggle between horizontal and vertical split with two windows."
    (interactive)
    (if (> (length (window-list)) 2)
        (error "Can't toggle with more than 2 windows!")
      (let ((func (if (window-full-height-p)
                      #'split-window-vertically
                    #'split-window-horizontally)))
        (delete-other-windows)
        (funcall func)
        (save-selected-window
          (other-window 1)
          (switch-to-buffer (other-buffer))))))

#+END_SRC


#+begin_src emacs-lisp :tangle yes
  (eval-after-load "helm"
    '(define-key helm-map (kbd "C-'") 'ace-jump-helm-line))

#+end_src

#+RESULTS:
: ace-jump-helm-line




#+BEGIN_SRC emacs-lisp :tangle yes
  (setq debug-on-error nil)

  (defun test-emacs ()
    "Test if emacs starts correctly."
    (interactive)
    (if (eq last-command this-command)
        (save-buffers-kill-terminal)
      (require 'async)
      (async-start
       (lambda () (shell-command-to-string
                   "emacs --batch --eval \"
  (condition-case e
      (progn
        (load \\\"~/.emacs.d/init.el\\\")
        (message \\\"-OK-\\\"))
    (error
     (message \\\"ERROR!\\\")
     (signal (car e) (cdr e))))\""))
       `(lambda (output)
          (if (string-match "-OK-" output)
              (when ,(called-interactively-p 'any)
                (message "All is well"))
            (switch-to-buffer-other-window "*startup error*")
            (delete-region (point-min) (point-max))
            (insert output)
            (search-backward "ERROR!"))))))



#+END_SRC

#+RESULTS:
: test-emacs
https://emacs.stackexchange.com/questions/28429/how-do-i-troubleshoot-emacs-problems


(setq browse-url-browser-function 'browse-url-generic
browse-url-generic-program "brave-browser")

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun my-set-eww-buffer-title ()
    (let* ((title (plist-get eww-data :title))
           (url   (plist-get eww-data :url))
           (result (concat "*eww-" 
                           (or title Norton Guide reader     
                               (if (string-match "://" url)
                                   (substring url (match-beginning 0))
                                 url)) "*")))
      (rename-buffer result t)))

  (add-hook 'eww-after-render-hook 'my-set-eww-buffer-title)
  (add-hook 'eww-after-render-hook 'visual-fill-column-mode)
  (add-hook 'eww-after-render-hook 'visual-line-mode)


  (eval-after-load 'shr  
    '(progn (setq shr-width -1)  
            (defun shr-fill-text (text) text)  
            (defun shr-fill-lines (start end) nil)  
            (defun shr-fill-line () nil)))

  (setq browse-url-browser-function (quote browse-url-default-browser))
  (setq browse-url-firefox-new-window-is-tab t)


#+END_SRC

#+RESULTS:
: t


C-h C RET
M-x describe-current-coding-system

#+BEGIN_SRC  emacs-lisp :tangle yes
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (setq inhibit-eol-conversion nil)

  (add-to-list 'file-coding-system-alist '("\\.tex" . utf-8-unix) )
  (add-to-list 'file-coding-system-alist '("\\.txt" . utf-8-unix) )
  (add-to-list 'file-coding-system-alist '("\\.el" . utf-8-unix) )
  (add-to-list 'file-coding-system-alist '("\\.scratch" . utf-8-unix) )
  (add-to-list 'file-coding-system-alist '("user_prefs" . utf-8-unix) )

  (add-to-list 'process-coding-system-alist '("\\.txt" . utf-8-unix) )

  (add-to-list 'network-coding-system-alist '("\\.txt" . utf-8-unix) )

  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)
  (setq-default buffer-file-coding-system 'utf-8-unix)

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; mnemonic for utf-8 is "U", which is defined in the mule.el
  (setq eol-mnemonic-dos ":CRLF")
  (setq eol-mnemonic-mac ":CR")
  (setq eol-mnemonic-undecided ":?")
  (setq eol-mnemonic-unix ":LF")

  (defalias 'read-buffer-file-coding-system 'lawlist-read-buffer-file-coding-system)
  (defun lawlist-read-buffer-file-coding-system ()
    (let* ((bcss (find-coding-systems-region (point-min) (point-max)))
           (css-table
            (unless (equal bcss '(undecided))
              (append '("dos" "unix" "mac")
                      (delq nil (mapcar (lambda (cs)
                                          (if (memq (coding-system-base cs) bcss)
                                              (symbol-name cs)))
                                        coding-system-list)))))
           (combined-table
            (if css-table
                (completion-table-in-turn css-table coding-system-alist)
              coding-system-alist))
           (auto-cs
            (unless find-file-literally
              (save-excursion
                (save-restriction
                  (widen)
                  (goto-char (point-min))
                  (funcall set-auto-coding-function
                           (or buffer-file-name "") (buffer-size))))))
           (preferred 'utf-8-unix)
           (default 'utf-8-unix)
           (completion-ignore-case t)
           (completion-pcm--delim-wild-regex ; Let "u8" complete to "utf-8".
            (concat completion-pcm--delim-wild-regex
                    "\\|\\([[:alpha:]]\\)[[:digit:]]"))
           (cs (completing-read
                (format "Coding system for saving file (default %s): " default)
                combined-table
                nil t nil 'coding-system-history
                (if default (symbol-name default)))))
      (unless (zerop (length cs)) (intern cs))))

#+END_SRC

#+RESULTS:
: lawlist-read-buffer-file-coding-syste


#+BEGIN_SRC emacs-lisp :tangle yes
  (setq auto-save-default t)

  (setq auto-save-timeout 10)
  (setq backup-directory-alist '(("." . "~/Dropbox/emacs/.emacs.d/backups")))

#+END_SRC

#+RESULTS:
: ((. . ~/Dropbox/emacs/.emacs.d/backups))

#+BEGIN_SRC emacs-lisp :tangle yes


  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)

  (use-package pdf-tools :defer t)
  (use-package org-pdfview :defer t)
                                          ;     (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))

 

  (setq pdf-view-continuous t)
  (add-to-list 'org-file-apps 
               '("\\.pdf\\'" . (lambda (file link)
                                 (org-pdfview-open link))))

  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
  (use-package pdf-continuous-scroll-mode :quelpa (pdf-continuous-scroll-mode :fetcher github :repo "dalanicolai/pdf-continuous-scroll-mode.el"))




#+END_SRC








* latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-auctex)
  (company-auctex-init)


  (use-package tex :ensure auctex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)


#+END_SRC

#+RESULTS:
: tx

added from https://orgmode.org/worg/org-tutorials/org-latex-export.html
#+begin_src emacs-lisp :tangle yes
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))


#+end_src

https://emacs.stackexchange.com/questions/38184/org-mode-ignore-heading-when-exporting-to-latex
#+begin_src emacs-lisp :tangle yes

  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))


  (setq TeX-auto-save nil)


#+end_src

#+RESULTS:


#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package yasnippet                  ; Snippets
    )



    (use-package yankpad
    :ensure t
    :defer 10
    :init
    (setq yankpad-file "~/Dropbox/Zettelkasten/yankpad.org")


    )

  (setq yankpad-respect-current-org-level t)
  (setq yas-global-mode t)
  (setq yas-snippet-dirs
  (quote
  ("/home/betsy/Dropbox/emacs/.emacs.d/snippets")))


  (defhydra hydra-yasnippet (:color red :hint nil)
    "
                   ^YASnippets^
     --------------------------------------------
       Modes:    Load/Visit:    Actions:

      _g_lobal  _d_irectory    _i_nsert
      _m_inor   _f_ile         _t_ryout
      _e_xtra   _l_ist         _n_ew
               reload _a_ll
     "
    ("n" down "done")
    ("p" down "up")
    ("N" outline-next-visible-heading "next heading")
    ("P" outline-previous-visible-heading "prev heading")
    ("d" yas-load-directory)
    ("e" yas-activate-extra-mode)
    ("i" yas-insert-snippet)
    ("f" yas-visit-snippet-file :color blue)
    ("n" yas-new-snippet)
    ("t" yas-tryout-snippet)
    ("l" yas-describe-tables)
    ("g" yas/global-mode :color red)
    ("m" yas/minor-mode :color red)
    ("a" yas-reload-all))

#+END_SRC

#+RESULTS:
: hydra-yasnippet/body






#+begin_src emacs-lisp :tangle yes

  (defhydra hydra-org (:color amaranth :columns 3)
    "Org Mode Movements"
    ("n" outline-next-visible-heading "next heading")
    ("p" outline-previous-visible-heading "prev heading")
    ("N" org-forward-heading-same-level "next heading at same level")
    ("P" org-backward-heading-same-level "prev heading at same level")
    ("u" outline-up-heading "up heading")
    ("k" kill-region "kill region")
    ("y" yank "paste")
    ("l" helm-show-kill-ring "list" :color blue)  
    ("r" org-refile "refile")
    ("t" org-todo "todo")
    ("g" org-set-tags-command "tags")
    ("s" show-subtree "expand subtree")
    ("h" hide-subtree "collapse subtree")
    ("a" org-archive-subtree "archive")
    ("G" org-goto "goto" :exit t)
    ("q" nil "quit" :color blue)
    )




  (defhydra goto (:color blue :hint nil)
    "
        Goto:
        ^Char^              ^Word^                ^org^                    ^search^
        ^^^^^^^^---------------------------------------------------------------------------
        _c_: 2 chars        _w_: word by char     _h_: headline in buffer  _o_: helm-occur
        _C_: char           _W_: some word        _a_: heading in agenda   _p_: helm-swoop
        _L_: char in line   _s_: subword by char  _q_: swoop org buffers   _f_: search forward
        ^  ^                _S_: some subword     ^ ^                      _b_: search backward
        -----------------------------------------------------------------------------------
        _B_: helm-buffers       _l_: avy-goto-line
        _m_: helm-mini          _i_: ace-window
        _R_: helm-recentf

        _n_: Navigate           _._: mark position _/_: jump to mark
        "
    ("c" avy-goto-char-2)
    ("C" avy-goto-char)
    ("L" avy-goto-char-in-line)
    ("w" avy-goto-word-1)
    ;; jump to beginning of some word
    ("W" avy-goto-word-0)
    ;; jump to subword starting with a char
    ("s" avy-goto-subword-1)
    ;; jump to some subword
    ("S" avy-goto-subword-0)
    ("l" avy-goto-line)
    ("i" ace-window)
    ("h" helm-org-headlines)
    ("a" helm-org-agenda-files-headings)
    ("q" helm-multi-swoop-org)
    ("o" helm-occur)
    ("p" helm-swoop)
                                          ;        ("p" swiper-helm)
    ("f" isearch-forward)
    ("b" isearch-backward)
    ("." org-mark-ring-push :color red)
    ("/" org-mark-ring-goto :color blue)
    ("B" helm-buffers-list)
    ("m" helm-mini)
    ("R" helm-recentf)
    ("n" hydra-navigate/body))

  (global-set-key (kbd "s-g") 'goto/body)


#+end_src

#+RESULTS:
: goto/body


:PROPERTIES:
:ID:       oi0gh0v0dti0
:UPDATE_DATE: 2020.0822 opens ok
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
 ;added 2020.0822. opens ok. 
  (diredp-toggle-find-file-reuse-dir nil)
#+END_SRC



#+begin_src emacs-lisp :tangle yes



                                          ;(use-package org-super-links
                                          ; :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github :commit "0.2"))



  (use-package org-drill)

  (setq fill-flowed-encode-column 1000)
   (setq org-timer-display (quote both))




 
                                          ;   (global-activity-watch-mode)

  (centered-cursor-mode nil)


  (require 'org-download)

  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)


                                          ; (global-mu4e-conversation-mode)
#+end_src



#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package calfw)
  (use-package calfw-org)
                                          ;   (use-package calfw-gcal)
  (use-package calfw-cal)
  (setq package-check-signature nil)
                                          ;  (setq org-gcal-down-days '30)
                                          ;for http400 error, open scratch and evaluate (org-gcal-request-token) using C-x C-e


  (defun my-open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "pale green")  ; orgmode source
                                          ;    (cfw:cal-create-source "light goldenrod") ; diary source
      ))) 
  (add-hook 'cfw:calendar-mode-hook (lambda () (visual-fill-column-mode 0)))
                                          ;   (setq calendar-daylight-savings-starts '(3 11 year))
                                          ;  (setq calendar-daylight-savings-ends: '(11 4 year))
  (setq calendar-week-start-day 1)

  (setq diary-file "~/Dropbox/Zettelkasten/diary")



#+END_SRC

#+RESULTS:
: ~/Dropbox/Zettelkasten/diary

  




#+begin_src emacs-lisp  :tangle yes

  (add-hook 'ereader-mode-hook (lambda () (visual-line-mode 1)))
  (add-hook 'ereader-mode-hook (lambda () (olivetti-mode 1)))

#+end_src

#+RESULTS:
| olivetti-mode | (lambda nil (visual-line-mode 1)) |






#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-all-like-this)
           ("C-<" . mc/mark-next-like-this)
           ("C-c 1" . mc/insert-numbers)
           ("C-S-'" . mc/edit-lines)
           ("C-M-." . mc/mark-pop)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)))

  
  (setq blink-matching-paren-dont-ignore-comments nil)

                                          ;autocompletion
  (use-package company
    :ensure t
    :init (global-company-mode)
    :config (company-mode 1))     

                                          ;spellcheck
  (use-package flyspell-correct-helm)

#+END_SRC

#+RESULTS:






#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package openwith
    :defer t
    :config (progn
              (when (require 'openwith nil 'noerror)
                (setq openwith-associations
                      (list
                                          ;                   (list (openwith-make-extension-regexp
                                          ;                           '("mpg" "mpeg" "mp3" "mp4"
                                          ;                           "avi" "wmv" "wav" "mov" "flv"
                                          ;                          "ogm" "ogg" "mkv"))
                                          ;                      "audacious"
                                          ;                     '(file))
                                          ;                    (list (openwith-make-extension-regexp
                                          ;                          '("xbm" "pbm" "pgm" "ppm" "pnm"
                                          ;                           "png" "bmp" "tif" "jpeg" "jpg"))
                                          ;                       "gpicview"
                                          ;                      '(file))
                                          ;                       (list (openwith-make-extension-regexp
                                          ;                             '("pdf"))
                                          ;                           "zathura"
                                          ;                          '(file))
                       (list (openwith-make-extension-regexp
                              '("doc" "docx" "ppt" "xls" "xlsx" "pptx"))
                             "LibreOffice"
                             '(file))

                       ))
                (openwith-mode 1)))
    :ensure t)
  (add-to-list  'mm-inhibit-file-name-handlers 'openwith-file-handler)


#+END_SRC


:UPDATE_DATE: 2020
https://www.reddit.com/r/emacs/comments/ioq1et/incorrect_time_output/
(format-time-string "%b%d%Y-%I%M" (current-time) t)

Everywhere else in my Emacs has correct time. For instance, the following outputs the correct time: (current-time).

What is going on?

EDIT: Solved. Passing t causes UTC to be used. Passing nil leads to Emacs time being used and nil to system clock being used.


#+RESULTS:
: org-super-links-insert-link

(setq org-roam-db-location "~/Dropbox/Zettelkasten/Zettels/")
:ensure t
:hook
(org-load . org-roam-mode)
:custom
 
:bind (:map org-roam-mode-map
(("C-c n l" . org-roam)
("C-c n f" . org-roam-find-file)
("C-c n g" . org-roam-graph-show))
:map org-mode-map
(("C-c n i" . org-roam-insert))
(("C-c n I" . org-roam-insert-immediate))))





#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'diminish)
  (diminish 'activity-watch-mode "aw")
  (diminish 'company-mode)
  (diminish 'helm-mode)
  (diminish 'visual-line-mode)
  (diminish 'org-edna-mode "ed")
  (diminish 'org-indent-mode)
  (diminish 'projectile-mode "prj")
  (diminish 'smartparens-mode)
  (diminish 'org-roam-mode "rm")
#+END_SRC

#+RESULTS:
| rm |





#+begin_src emacs-lisp :tangle yes

  (global-unset-key (kbd "M-o"))

  (define-key yas-minor-mode-map [(tab)] nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "M-n") 'toggle-input-method)
  (global-set-key (kbd "C-<f1>") 'set-input-method)

                                          ;   (global-unset-key (kbd "M-c"))
  (global-unset-key (kbd "C-v "))

                                          ; (define-key org-mode-map (kbd "C-a") 'org-beginning-of-line)
  (define-key org-mode-map (kbd "C-a") 'org-beginning-of-line)
  (define-key org-mode-map (kbd "C-e") 'org-end-of-line)
  (define-key org-mode-map (kbd "C-y") 'yank)
  (global-unset-key (kbd "S-SPC"))
  (global-unset-key (kbd "C-c C-x C-r"))

                                          ; (define-key dired-mode-map (kbd "M-z") 'ace-jump-mode)
                                          ;  (define-key dired-mode-map (kbd "<Hangul>-z") 'ace-jump-mode)
  (bind-keys 


                                          ;("C-+"   . text-scale-increase)
   ("C-c p" . org-set-property)
   ("C-y" . yank)                                  ;   a      ("C--"   . text-scale-decrease)
   ("M-<f3>" . org-super-links-store-link)
   ("C-c <f3>" . org-super-links-insert-link)

   ("M-z" . helm-swoop-without-pre-input)
                                          ;          ("<Hangul>-z" . ace-jump-mode)
                                          ;                 ("C-c k" . toggle-korean-input-method)
   ("C-."   . org-todo)
                                          ;              ("C-x /" . shrink-window-horizontally)
   ("C-x ." . org-archive-subtree-default)
                                          ;       ("C-c n" . org-schedule)

   ("M-="   . count-words)

  
   ("M-<f4>" . org-time-stamp-inactive)
   ("M-<f5>" . org-time-stamp)      
                                          ;   ("C-e" . org-end-of-line)
   ("C-k" . org-kill-line)

   ("C-x C-b" . bufler-list)                              ;   ("C-x j" . helm-org-in-buffer-headings)
   ("C-x b" . bufler-switch-buffer)
   ("C-c i" . insert-timestamp)
                                          ;  ("C-c a" . helm-org-agenda-files-headings)
   ("C-c C-x C-r" . org-clock-report)

   ("M-[" . org-metaleft)
   ("M-]" . org-metaright)
   ("M-{" . org-shiftmetaleft)
   ("M-}" . org-shiftmetaright)

   ([f6] . helm-bibtex-with-local-bibliography)

   ([f9] . helm-swoop-without-pre-input)
   ([f12] . bury-buffer)

   )



                                          ;   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
                                          ;  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)


  (define-key key-translation-map (kbd "C-c C-<right>")  (kbd "🡆"))

#+end_src

#+RESULTS:
: [8756]



#+BEGIN_SRC emacs-lisp :tangle yes

     

      (find-file "~/Dropbox/emacs/config-thinkpad.org")
   (find-file "~/Dropbox/Zettelkasten/inbox.org")
      (find-file "/home/betsy/.emacs")

#+end_src

#+RESULTS:
: #<buffer .emacs>



#+RESULTS:
: t


[[file:~/.mbsyncrc::IMAPAccount gmail]]

#+BEGIN_SRC emacs-lisp :tangle yes

                                                       ; (use-package mu4e) 
                                                       ; (use-package mu4e-contrib)
               (require 'mu4e)
               (require 'org-mu4e)
               ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
   (setq org-mu4e-convert-to-html t)
               (setq mu4e-sent-messages-behavior 'delete)
               (setq message-kill-buffer-on-exit t)
               (setq mu4e-change-filenames-when-moving t)
               (setq mu4e-compose-format-flowed t)

               (setq mu4e-hide-index-messages t)
               ;; Call EWW to display HTML messages
                                                       ;(defun jcs-view-in-eww (msg)
                                                       ; (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

               ;; Arrange to view messages in either the default browser or EWW
               (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
                                                       ; (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

               ;; From Ben Maughan: Get some Org functionality in compose buffer
               (add-hook 'message-mode-hook 'turn-on-orgtbl)
                                                       ; (add-hook 'message-mode-hook 'turn-on-orgstruct++)

               (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
               (add-hook 'mu4e-view-mode-hook 'visual-fill-column-mode)

               (defun no-auto-fill ()
                 "Turn off auto-fill-mode."
                 (auto-fill-mode -1))


               (defun vcfm-off ()
                                                       ;turn off visual fill column mode
                 (visual-fill-column-mode nil))

               (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
               (add-hook 'mu4e-headers-mode-hook (lambda ()(visual-line-mode -1)))

               (setq mu4e-compose-dont-reply-to-self t)
               (setq mu4e-confirm-quit nil)
               (setq mu4e-display-update-status-in-modeline nil)
               (setq mu4e-index-lazy-check t)

      (require 'smtpmail)
         (setq message-send-mail-function 'smtpmail-send-it
               smtpmail-starttls-credentials
               '(("smtp.gmail.com" 587 nil nil))
               smtpmail-default-smtp-server "smtp.gmail.com"
               smtpmail-smtp-server "smtp.gmail.com"
               smtpmail-smtp-service 587
               smtpmail-debug-info t)

(add-to-list 'mu4e-bookmarks
  '( :name  "Big messages"
     :query "size:15M..500M"
     :key   ?b))
#+END_SRC
  
  


#+BEGIN_SRC emacs-lisp :tangle yes
                                              ;  (setq mu4e-attachment-dir "/home/betsy/Dropbox/Spring 2019/")

   ;; enable inline images
   ;; use imagemagick, if available
   (when (fboundp 'imagemagick-register-types)
     (imagemagick-register-types))

   (add-hook 'mu4e-compose-mode-hook
       (defun my-do-compose-stuff ()
          "My settings for message composition."
          (visual-line-mode)
          (org-mu4e-compose-org-mode)
              (use-hard-newlines -1)
          (flyspell-mode)))

      (setq shr-color-visible-luminance-min 50) 
      (setq shr-color-visible-distance-min 5)
                                              ;(setq mu4e-view-html-plaintext-ratio-heuristic 'most-positive-fixnum)
      (setq message-yank-prefix ""
            message-yank-empty-prefix ""
            message-yank-cited-prefix "")

      (setq w3m-default-desplay-inline-images t)
      (defun mu4e-action-view-in-w3m ()
        "View the body of the message in emacs w3m."
        (interactive)
        (w3m-browse-url (concat "file://"
                                (mu4e~write-body-to-html (mu4e-message-at-point t)))))


      ;; customize the reply-quote-string
      (setq message-citation-line-format "\n\nOn %a %d %b %Y at %R, %f wrote:\n")
      ;; choose to use the formatted string
      (setq message-citation-line-function 'message-insert-formatted-citation-line)


      (setq mu4e-view-scroll-to-next nil)

      (add-hook 'message-mode-hook 'visual-fill-column-mode)



#+END_SRC



 


#+BEGIN_SRC emacs-lisp :tangle yes
   (setq mu4e-headers-include-related nil)
   (setq mu4e-headers-fields
         '( (:human-date    .  15)    ;; alternatively, use :human-date
            (:flags         .   5)
            (:from          .  20)
            (:thread-subject       . 70 )
                                           ;             (:thread-subject       . 120 )
            )) 
   (setq org-mu4e-link-query-in-headers-mode nil)
   (setq mu4e-update-interval 300)
   (setq mu4e-use-fancy-chars nil)
   (setq mu4e-index-update-in-background t)
   (setq mu4e-view-prefer-html t)
   (setq mu4e-headers-skip-duplicates t)
   (setq mu4e-headers-auto-update t)
   (setq mu4e-view-show-addresses t)
   (setq mu4e-view-show-images t)
   (setq mu4e-headers-date-format "%x")
   (setq mu4e-headers-time-format "%H:%M")
#+END_SRC

#+RESULTS:
: %H:%M



#+BEGIN_SRC emacs-lisp :tangle yes

   ;; allow for updating mail using 'U' in the main view:
   (setq mu4e-get-mail-command "true")
                                           ;(setq mail-user-agent 'mu4e-user-agent)
   (use-package org-msg)
   (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
         org-msg-startup "hidestars indent inlineimages"
                                           ;	org-msg-greeting-fmt "\nHi *%s*,\n\n"
         org-msg-greeting-name-limit 3
         org-msg-text-plain-alternative t
         org-msg-signature "

    In solidarity,

    ,#+begin_signature
    -- *Betsy (she/they)* \\\\
    ,#+end_signature")
   (org-msg-mode)

#+END_SRC 

#+RESULTS:
: t



#+BEGIN_SRC emacs-lisp :tangle yes

 
   (setq mu4e-drafts-folder "/Drafts")
   (setq mu4e-sent-folder   "/Sent")
   (setq mu4e-trash-folder  "/Trash")
   (setq mu4e-refile-folder "/All")
   (setq mu4e-maildir "~/.maildir")
   (setq mu4e-attachment-dir "~/Dropbox/2021")
#+END_SRC 

#+RESULTS:
: ~/Dropbox/2021

  





#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-view-program-selection
   '(((output-dvi has-no-display-manager)
      "dvi2tty")
     ((output-dvi style-pstricks)
      "dvips and gv")
     (output-dvi "xdvi")
     (output-pdf "Okular")
     (output-html "xdg-open")))
 '(ajb-max-window-height 200)
 '(alert-default-style 'notifications)
 '(bibtex-autokey-additional-names "-etal")
 '(bibtex-autokey-name-case-convert-function 'identity)
 '(bibtex-autokey-name-separator "-")
 '(bibtex-autokey-name-year-separator "_")
 '(bibtex-autokey-names 2)
 '(bibtex-autokey-names-stretch 1)
 '(bibtex-autokey-titleword-length 0)
 '(bibtex-autokey-year-length 4)
 '(bmkp-last-as-first-bookmark-file "/home/betsy/.emacs.d/bookmarks")
 '(browse-url-secondary-browser-function 'eww-browse-url)
 '(default-input-method "korean-hangul")
 '(delete-auto-save-files nil)
 '(display-line-numbers 'visual)
 '(display-line-numbers-current-absolute t)
 '(display-time-mode t)
 '(eyebrowse-mode nil)
 '(fill-column 90)
 '(focus-follows-mouse 'auto-raise)
 '(interleave-org-notes-dir-list '("~/Dropbox/Zettelkasten/readings.org"))
 '(line-number-display-limit-width 2)
 '(line-spacing 0.1)
 '(ls-lisp-dirs-first t)
 '(mc/insert-numbers-default 1)

 '(mouse-autoselect-window 0.5)
 '(mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control))))
 '(mu4e-bookmarks
   '((:name "inbox" :query "maildir:/gmail/INBOX" :key 105)
     (:name "Unread messages" :query "flag:unread AND maildir:/gmail/INBOX" :key 117)
     (:name "Today's messages" :query "date:today..now" :key 116)
     (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key 119)
     (:name "Messages with images" :query "mime:image/*" :key 112)))
 '(mu4e-maildir-shortcuts
   '(("/gmail/INBOX" . 105)
     ("/Sent" . 115)
     ("/Trash" . 116)
     ("/All" . 97)))
 '(nov-text-width 20)
 '(on-screen-auto-update t)
 '(on-screen-delay 1)
 '(on-screen-drawing-threshold 1)
 '(on-screen-global-mode t)
 '(on-screen-highlight-method 'shadow)
 '(on-screen-inverse-flag t)
 '(openwith-associations
   '(("\\.\\(?:docx?\\|pptx?\\|xls?\\)$" "libreoffice"
      (file))))
 '(org-agenda-export-html-style
   "<link rel=\"stylesheet\" href=\"\\home\\betsy\\Dropbox\\Zettelkasten\\css\\tufte.css\" type=\"text/css\" />")
 '(org-clock-clocktable-default-properties
   '(:maxlevel 4 :hidefiles t :tags t :tcolumns 1 :narrow 30 :level nil :link t))
 '(org-clock-in-resume nil)
 '(org-download-delete-image-after-download t)
 '(org-download-image-dir "/home/betsy/Dropbox/Zettelkasten/images")
 '(org-edna-mode t)
 '(org-emphasis-alist
   '(("*" bold)
     ("/" italic)
     ("_" underline)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+"
      (:background "#acd0c0" :foreground "black" :family "monofur" :weight bold))))
 '(org-fontify-done-headline t)
 '(org-html-head
   " <link rel=\"stylesheet\" href=\"\\home\\betsy\\Dropbox\\Zettelkasten\\css\\tufte.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lobster Two|Jura|Gentium Basic\">")
 '(org-html-head-include-default-style nil)
 '(org-image-actual-width '(600))
 '(org-latex-default-packages-alist
   '(("rm" "roboto" t nil)
     ("defaultsans" "lato" t nil)
     ("" "paracol" t nil)
     ("" "titletoc" t nil)
     ("" "titletoc" t nil)))
 '(org-link-file-path-type 'absolute)
 '(org-log-note-headings
   '((done . "CLOSING NOTE %t")
     (state . "State %-12s from %-12S %t")
     (note . "%t")
     (reschedule . "Rescheduled from %S on %t")
     (delschedule . "Not scheduled, was %S on %t")
     (redeadline . "New deadline from %S on %t")
     (deldeadline . "Removed deadline, was %S on %t")
     (refile . "Refiled on %t")
     (clock-out . "")))
 '(org-modules
   '(ol-bibtex ol-eww org-habit org-id org-protocol org-tempo ol-w3m org-collector org-notify))
 '(org-org-htmlized-css-url "\"~/Dropbox/emacs/css.org\"")
 '(org-pomodoro-keep-killed-pomodoro-time t)
 '(org-pomodoro-ticking-sound-states '(:pomodoro))
 '(org-recent-headings-mode t)
 '(org-src-fontify-natively t)
 '(org-sticky-header-full-path 'full)
 '(org-sticky-header-heading-star "##")
 '(org-structure-template-alist
   '(("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("h" . "src html")
     ("l" . "export latex")
     ("q" . "quote")
     ("s" . "src emacs-lisp")
     ("v" . "verse")))

 '(org-superstar-prettify-item-bullets t)
 '(org-support-shift-select t)
 '(org-todo-keyword-faces
   '(("WAIT" :weight regular :underline nil :inherit org-todo :foreground "yellow")
     ("TODO" :weight regular :underline nil :inherit org-todo :foreground "#89da59")
     ("슴관" :weight regular :underline nil :inherit org-todo :foreground "#f98866")
     ("NEXT" :weight regular :underline nil :inherit org-todo :foreground "magenta")
     ("IN-PROG" :weight bold :underline t :inherit org-todo :foreground "#5bcbac")
     ("AREA" :weight bold :underline t :inherit org-todo :foreground "#73605b")))
 '(org-todo-repeat-to-state t)
 '(org-web-tools-pandoc-sleep-time 1.0)
 '(org-wild-notifier--alert-severity 'high)
 '(org-wild-notifier-alert-time '(10))
 '(org-wild-notifier-keyword-whitelist nil)
 '(org-wild-notifier-mode t)
 '(package-selected-packages
   '(burly perspective eyebrowse good-scroll org-super-links pymupdf-mode pdf-continuous-scroll-mode quelpa-use-package dired-quick-sort charmap ereader beacon bar-cursor csv-mode ox-extra helm-chronos chronos worf ox-tufte wc-goal-mode org-wc helm-org-ql calibredb amread-mode copyit-pandoc image+ org-alert org-wild-notifier workgroups2 org-analyzer org-drill frog-jump-buffer helm-org dired-x dired-toggle-sudo ac-helm org-clock-today org-clock-split auto-complete-auctex zoom helm-bufler visible-mark spray org-noter-pdftools org-pdftools org-ac mu4e-conversation uptimes unkillable-scratch mw-thesaurus most-used-words korean-holidays helm-unicode helm-flyspell clean-buffers org-mru-clock undo-tree xml+ use-package olivetti quail quelpa activity-watch-mode org company-org-roam org-roam org-roam-bibtex org-msg nov org-superstar yasnippet-snippets org-clock-convenience org-pomodoro org-plus-contrib crux org-noter pdf-view-restore anki-editor anki-connect ace-jump-buffer helm-org-rifle org-download which-key ace-jump-helm-line ace-link expand-region yankpad w3m visual-fill-column unicode-fonts ssh-agency speed-type smartparens rainbow-delimiters powerthesaurus pandoc-mode pandoc ox-pandoc ox-clip ov org-web-tools org-sticky-header org-ref org-recent-headings org-pdfview org-edna org-cliplink org-chef org-bookmark-heading openwith multiple-cursors mixed-pitch markdown-preview-eww markdown-mode magit-popup magit ledger-mode latex-preview-pane keychain-environment interleave html2org hl-anything highlight helm-swoop helm-projectile helm-bibtexkey gnuplot-mode gnuplot gnu-elpa-keyring-update flyspell-correct-helm doom-themes diminish deft define-word counsel company-bibtex company-auctex centered-cursor-mode calfw-org calfw-cal calfw bufler all-the-icons aggressive-indent ace-window 2048-game))
 '(pdf-annot-default-annotation-properties
   '((t
      (label . "Betsy Yoon"))
     (text
      (color . "#ff0000")
      (icon . "Note"))
     (highlight
      (color . "#f5e356"))
     (underline
      (color . "magenta"))
     (squiggly
      (color . "orange"))
     (strike-out
      (color . "red"))))
 '(pdf-annot-list-listed-types
   '(file free-text highlight square squiggly strike-out text underline))
 '(persp-mode nil)
 '(persp-state-default-file "~/Dropbox/emacs/.emacs.d/perspective")
 '(safe-local-variable-values
   '((org-reverse-note-order)
     (org-download-image-dir . "/home/betsy/.local/share/Anki2/User 1/collection.media")))
 '(sentence-end-double-space nil)
 '(split-width-threshold 100)
 '(temp-buffer-resize-mode t)
 '(tooltip-mode nil)
 '(unicode-fonts-block-font-mapping
   '(("Aegean Numbers"
      ("Noto Sans Symbols" "Aegean" "Symbola" "Quivira" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ahom"
      ("AhomUnicode"))
     ("Alchemical Symbols"
      ("Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Alphabetic Presentation Forms"
      ("DejaVu Sans:width=condensed" "Arial Unicode MS" "Cardo" "Code2000" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Anatolian Hieroglyphs"
      ("Anatolian"))
     ("Ancient Greek Musical Notation"
      ("Cardo" "Noto Sans Symbols" "Aegean" "New Athena Unicode" "Musica" "Symbola" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ancient Greek Numbers"
      ("Noto Sans Symbols" "Apple Symbols" "New Athena Unicode" "Cardo" "Aegean" "Quivira" "Symbola" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ancient Symbols"
      ("Noto Sans Symbols" "Analecta" "New Athena Unicode" "Cardo" "Aegean" "Quivira" "Symbola" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Arabic"
      ("Courier New" "Simplified Arabic Fixed" "Simplified Arabic" "Amiri" "Aldhabi" "Adobe Arabic" "Urdu Typesetting" "Geeza Pro" "Baghdad" "Damascus" "Al Bayan" "Andalus" "Arabic Typesetting" "Traditional Arabic" "Scheherazade" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Nadeem" "Microsoft Uighur" "Tahoma" "Microsoft Sans Serif" "MPH 2B Damase" "KufiStandardGK" "DecoType Naskh" "Koodak" "FreeMono" "Code2000"))
     ("Arabic Extended-A"
      ("Scheherazade" "Amiri"))
     ("Arabic Mathematical Alphabetic Symbols"
      ("Amiri"))
     ("Arabic Presentation Forms-A"
      ("Geeza Pro" "Amiri" "Arial Unicode MS" "Microsoft Sans Serif" "Tahoma" "KufiStandardGK" "Andalus" "Arabic Typesetting" "Urdu Typesetting" "Adobe Arabic" "DecoType Naskh" "Al Bayan" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "MPH 2B Damase" "Code2000"))
     ("Arabic Presentation Forms-B"
      ("DejaVu Sans Mono" "Geeza Pro" "Amiri" "Adobe Arabic" "Traditional Arabic" "Urdu Typesetting" "Arial Unicode MS" "Microsoft Sans Serif" "KufiStandardGK" "DejaVu Sans:width=condensed" "FreeMono" "DecoType Naskh" "Code2000"))
     ("Arabic Supplement"
      ("Courier New" "Simplified Arabic Fixed" "Amiri" "Simplified Arabic" "Geeza Pro" "Damascus" "Andalus" "Arabic Typesetting" "Traditional Arabic" "Scheherazade" "Adobe Arabic" "Microsoft Uighur" "Tahoma" "Microsoft Sans Serif" "MPH 2B Damase"))
     ("Armenian"
      ("DejaVu Sans Mono" "Noto Sans Armenian" "Mshtakan" "Sylfaen" "DejaVu Sans:width=condensed" "Quivira" "MPH 2B Damase" "Code2000" "Arial Unicode MS" "Everson Mono:weight=bold" "FreeMono"))
     ("Arrows"
      ("DejaVu Sans Mono" "Apple Symbols" "Cambria Math" "Segoe UI Symbol" "DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS" "BabelStone Modern" "Symbola" "Quivira" "Code2000" "Noto Sans Symbols" "Everson Mono:weight=bold" "FreeMono"))
     ("Avestan"
      ("Noto Sans Avestan" "Ahuramzda:weight=bold" "ALPHABETUM Unicode"))
     ("Balinese"
      ("Noto Sans Balinese:weight=bold" "Aksara Bali"))
     ("Bamum"
      ("Noto Sans Bamum"))
     ("Bamum Supplement"
      ("Noto Sans Bamum"))
     ("Batak"
      ("Batak-Unicode" "Noto Sans Batak"))
     ("Bengali"
      ("Bangla Sangam MN" "Noto Sans Bengali" "Noto Sans Bengali UI" "Nirmala UI" "Vrinda" "Mukti Narrow" "Akaash" "Arial Unicode MS" "Code2000" "ALPHABETUM Unicode"))
     ("Block Elements"
      ("DejaVu Sans Mono" "Noto Sans Symbols" "FreeMono" "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "BabelStone Modern" "Symbola" "Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Bopomofo"
      ("Lantinghei TC" "MingLiU" "SimHei" "LiSong Pro" "FangSong" "SimSun" "DFKai-SB" "WenQuanYi Zen Hei Mono" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei SC" "HAN NOM A" "Arial Unicode MS" "BabelStone Han" "Code2000" "ALPHABETUM Unicode"))
     ("Bopomofo Extended"
      ("MingLiU" "SimHei" "FangSong" "SimSun" "DFKai-SB" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "Code2000"))
     ("Box Drawing"
      ("DejaVu Sans Mono" "FreeMono" "DejaVu Sans" "Everson Mono" "Quivira" "Code2000" "Noto Sans Symbols" "Segoe UI Symbol" "Symbola"))
     ("Brahmi"
      ("Segoe UI Historic" "Noto Sans Brahmi" "Adinatha Tamil Brahmi" "ALPHABETUM Unicode"))
     ("Braille Patterns"
      ("Quivira" "Apple Braille" "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "Symbola" "Noto Sans Symbols" "FreeMono" "Code2000" "Everson Mono:weight=bold"))
     ("Buginese"
      ("Noto Sans Buginese" "MPH 2B Damase" "Monlam Uni Sans Serif" "Code2000"))
     ("Buhid"
      ("Noto Sans Buhid" "Quivira" "Code2000"))
     ("Byzantine Musical Symbols"
      ("Noto Sans Symbols" "Musica" "Symbola" "FreeSerif"))
     ("CJK Compatibility"
      ("SimHei" "FangSong" "SimSun" "MingLiU" "Meiryo" "Microsoft JhengHei" "Microsoft JhengHei UI" "Lantinghei SC" "Lantinghei TC" "HAN NOM A" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "Code2000"))
     ("CJK Compatibility Forms"
      ("WenQuanYi Zen Hei Mono" "Lantinghei SC" "SimHei" "FangSong" "SimSun" "LiSong Pro" "Baoli SC" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei TC" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "Symbola" "Xingkai SC" "DFKai-SB" "Code2000"))
     ("CJK Compatibility Ideographs"
      ("SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "WenQuanYi Zen Hei Mono" "BabelStone Han" "UnBatang" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "Arial Unicode MS" "Lantinghei SC" "HanaMinA"))
     ("CJK Compatibility Ideographs Supplement"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "SimSun" "MingLiU" "HanaMinA" "Hiragino Kaku Gothic Pro" "Hiragino Maru Gothic Pro" "Hiragino Mincho Pro" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM B" "LiSong Pro"))
     ("CJK Radicals Supplement"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "HanaMinA" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "Apple Symbols" "Code2000"))
     ("CJK Strokes"
      ("WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "Code2000"))
     ("CJK Symbols and Punctuation"
      ("Lantinghei SC" "SimHei" "FangSong" "SimSun" "HanaMinA" "WenQuanYi Zen Hei Mono" "LiSong Pro" "STFangsong" "Microsoft YaHei" "Microsoft YaHei UI" "Lantinghei TC" "MingLiU" "HAN NOM A" "Arial Unicode MS" "PCMyungjo" "BabelStone Han" "Osaka:spacing=m" "Code2000"))
     ("CJK Unified Ideographs"
      ("WenQuanYi Zen Hei Mono" "Lantinghei SC" "Songti SC" "SimHei" "FangSong" "STFangsong" "SimSun" "LiSong Pro" "Baoli SC" "HanaMinA" "BabelStone Han" "Apple LiGothic" "Lantinghei TC" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "Arial Unicode MS" "Xingkai SC" "GB18030 Bitmap" "UnBatang"))
     ("CJK Unified Ideographs Extension A"
      ("SimHei" "FangSong" "STFangsong" "SimSun" "Songti SC" "Microsoft YaHei" "Microsoft YaHei UI" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HanaMinA" "HAN NOM A" "Code2000" "DFKai-SB" "BabelStone Han" "GB18030 Bitmap"))
     ("CJK Unified Ideographs Extension B"
      ("SimHei" "FangSong" "SimSun" "LiSong Pro" "Microsoft YaHei" "Microsoft YaHei UI" "HanaMinB" "HAN NOM B" "Code2002" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "BabelStone Han" "DFKai-SB"))
     ("CJK Unified Ideographs Extension C"
      ("HanaMinB" "BabelStone Han" "HAN NOM B"))
     ("CJK Unified Ideographs Extension D"
      ("HanaMinB" "BabelStone Han"))
     ("CJK Unified Ideographs Extension E"
      ("HanaMinB" "BabelStone Han"))
     ("Carian"
      ("Segoe UI Historic" "Noto Sans Carian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Chakma"
      ("Ribeng"))
     ("Cham"
      ("Noto Sans Cham" "Cham OI_Tangin" "Cham OI_Kulbleng" "Cham OI_Kul" "Code2000"))
     ("Cherokee"
      ("Aboriginal Sans" "Aboriginal Serif" "Plantagenet Cherokee" "Noto Sans Cherokee" "Gadugi" "MPH 2B Damase" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Code2000"))
     ("Cherokee Supplement"
      ("Everson Mono:weight=bold"))
     ("Combining Diacritical Marks"
      ("Monaco" "Consolas" "Noto Sans" "Cambria Math" "Charis SIL" "Doulos SIL" "Courier New" "DejaVu Sans:width=condensed" "DejaVu Sans Mono" "Cardo" "Code2000" "Gentium Plus" "Junicode" "Tahoma" "Microsoft Sans Serif" "Arial" "Quivira" "Symbola" "Everson Mono" "FreeMono" "Arial Unicode MS" "ALPHABETUM Unicode"))
     ("Combining Diacritical Marks Extended"
      ("Monlam Uni Sans Serif"))
     ("Combining Diacritical Marks Supplement"
      ("Cardo" "FreeSerif" "Junicode" "Doulos SIL" "DejaVu Sans:width=condensed" "Noto Sans" "Segoe UI" "Code2000" "Everson Mono" "ALPHABETUM Unicode"))
     ("Combining Diacritical Marks for Symbols"
      ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols" "Symbola" "Code2000" "Everson Mono" "Arial Unicode MS"))
     ("Combining Half Marks"
      ("Consolas" "DejaVu Sans:width=condensed" "Everson Mono:weight=bold" "Symbola"))
     ("Common Indic Number Forms"
      ("Noto Sans Kaithi" "Nirmala UI" "Siddhanta"))
     ("Control Pictures"
      ("Apple Symbols" "BabelStone Modern" "Noto Sans Symbols" "Segoe UI Symbol" "Arial Unicode MS" "Symbola" "Quivira" "FreeMono" "Code2000" "Everson Mono:weight=bold"))
     ("Coptic"
      ("Noto Sans Coptic" "Antinoou" "New Athena Unicode" "Segoe UI Historic" "Segoe UI Symbol" "Quivira" "Analecta" "Nilus" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Coptic Epact Numbers"
      ("Nilus" "Symbola"))
     ("Counting Rod Numerals"
      ("WenQuanYi Zen Hei Mono" "Noto Sans Symbols" "BabelStone Modern" "Symbola" "Quivira" "Apple Symbols" "Code2001"))
     ("Cuneiform"
      ("Segoe UI Historic" "Noto Sans Cuneiform" "Noto Sans Sumero-Akkadian Cuneiform" "Akkadian"))
     ("Cuneiform Numbers and Punctuation"
      ("Akkadian" "Segoe UI Historic" "Noto Sans Cuneiform" "Noto Sans Sumero-Akkadian Cuneiform"))
     ("Currency Symbols"
      ("Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Consolas" "Noto Sans Symbols" "Noto Sans" "Segoe UI" "Apple Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Cypriot Syllabary"
      ("Segoe UI Historic" "Noto Sans Cypriot" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Cyrillic"
      ("Consolas" "Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans" "Courier New" "Calibri" "Microsoft Sans Serif" "Code2000" "Arial Unicode MS" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Charcoal CY" "Geneva CY" "ALPHABETUM Unicode"))
     ("Cyrillic Extended-A"
      ("Quivira" "Everson Mono:weight=bold" "FreeSerif" "ALPHABETUM Unicode"))
     ("Cyrillic Extended-B"
      ("Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Cyrillic Supplement"
      ("Consolas" "Courier New" "Calibri" "Noto Sans" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Code2000" "Everson Mono:weight=bold"))
     ("Deseret"
      ("Noto Sans Deseret" "Apple Symbols" "Segoe UI Symbol" "Analecta" "Code2001" "Everson Mono:weight=bold"))
     ("Devanagari"
      ("Annapurna SIL" "Noto Sans Devanagari" "Devanagari Sangam MN" "Devanagari MT" "Nirmala UI" "Mangal" "Samyak Devanagari" "Samyak" "Siddhanta" "Aparajita" "Code2000" "Arial Unicode MS" "ALPHABETUM Unicode"))
     ("Devanagari Extended"
      ("Annapurna SIL" "Siddhanta" "FreeSerif"))
     ("Dingbats"
      ("Apple Color Emoji" "DejaVu Sans Mono" "Segoe UI Symbol" "Zapf Dingbats" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Domino Tiles"
      ("DejaVu Sans:width=condensed" "Symbola" "Quivira" "Segoe UI Symbol" "Noto Sans Symbols" "Code2001" "Everson Mono:weight=bold"))
     ("Early Dynastic Cuneiform"
      ("Akkadian"))
     ("Egyptian Hieroglyphs"
      ("Segoe UI Historic:weight=bold" "Noto Sans Egyptian Hieroglyphs:weight=bold" "Aegyptus:weight=bold" "Gardiner"))
     ("Elbasan"
      ("Albanian" "Everson Mono:weight=bold"))
     ("Emoticons"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
     ("Enclosed Alphanumeric Supplement"
      ("Segoe UI Symbol" "Noto Sans Symbols" "Symbola" "Quivira" "BabelStone Han" "BabelStone Modern"))
     ("Enclosed Alphanumerics"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Junicode" "Arial Unicode MS" "Symbola" "Quivira" "Code2000" "BabelStone Han" "WenQuanYi Zen Hei Mono" "BabelStone Modern" "HAN NOM A" "Everson Mono:weight=bold"))
     ("Enclosed CJK Letters and Months"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "MingLiU" "Arial Unicode MS" "HanaMinA" "Meiryo" "BabelStone Han" "Quivira" "Code2000" "UnBatang" "HAN NOM A"))
     ("Enclosed Ideographic Supplement"
      ("Segoe UI Symbol" "Noto Sans Symbols" "HanaMinA" "BabelStone Han" "Symbola"))
     ("Ethiopic"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Ethiopia Jiret" "Ethiopic WashRa SemiBold" "Ethiopic Yebse" "Code2000"))
     ("Ethiopic Extended"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Code2000"))
     ("Ethiopic Extended-A"
      ("Kefa" "Noto Sans Ethiopic" "Abyssinica SIL"))
     ("Ethiopic Supplement"
      ("Kefa" "Noto Sans Ethiopic" "Nyala" "Abyssinica SIL" "Code2000"))
     ("General Punctuation"
      ("Symbola" "Monaco" "Apple Symbols" "Segoe UI Symbol" "Cambria Math" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Antinoou" "Symbola" "Code2000" "Quivira" "Noto Sans" "Everson Mono:weight=bold" "FreeMono" "BabelStone Modern"))
     ("Geometric Shapes"
      ("Symbola" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Segoe UI Symbol" "Arial Unicode MS" "Noto Sans Symbols" "Quivira" "BabelStone Modern" "Everson Mono" "FreeMono" "Code2000"))
     ("Geometric Shapes Extended"
      ("Symbola" "Quivira"))
     ("Georgian"
      ("DejaVu Sans Mono" "Noto Sans Georgian" "Noto Serif Georgian" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Quivira" "Sylfaen" "MPH 2B Damase" "Everson Mono:weight=bold"))
     ("Georgian Supplement"
      ("Noto Sans Georgian" "Noto Serif Georgian" "DejaVu Serif:width=condensed" "MPH 2B Damase" "Quivira" "Everson Mono:weight=bold"))
     ("Glagolitic"
      ("Noto Sans Glagolitic" "Segoe UI Historic" "Segoe UI Symbol" "MPH 2B Damase" "Quivira" "FreeSerif" "ALPHABETUM Unicode"))
     ("Gothic"
      ("Noto Sans Gothic" "Segoe UI Historic" "Segoe UI Symbol" "Analecta" "Junicode" "Sadagolthina" "MPH 2B Damase" "FreeSerif" "Code2001" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Greek Extended"
      ("Consolas" "DejaVu Sans Mono" "Courier New" "Antinoou" "Noto Sans" "DejaVu Sans:width=condensed" "Cardo" "Junicode" "New Athena Unicode" "Microsoft Sans Serif" "Gentium Plus Compact" "Gentium Plus" "Arial Unicode MS" "Arial" "Tahoma" "Aegean" "Code2000" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Greek and Coptic"
      ("Consolas" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Antinoou" "Noto Sans" "Segoe UI Historic" "Segoe UI Symbol" "New Athena Unicode" "Calibri" "Microsoft Sans Serif" "Gentium Plus Compact" "Gentium Plus" "Lucida Console" "Arial Unicode MS" "Cardo" "Aegean" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "Noto Sans Coptic"))
     ("Gujarati"
      ("Nirmala UI" "Noto Sans Gujarati" "Noto Sans Gujarati UI" "Gujarati MT" "Shruti" "Samyak Gujarati" "Samyak" "Gujarati Sangam MN" "Code2000" "Arial Unicode MS"))
     ("Gurmukhi"
      ("Gurmukhi Sangam MN" "Gurmukhi MN" "Nirmala UI" "Noto Sans Gurmukhi" "Noto Sans Gurmukhi UI" "Raavi" "Code2000" "Arial Unicode MS" "AnmolUni"))
     ("Halfwidth and Fullwidth Forms"
      ("Meiryo" "Arial Unicode MS" "Microsoft JhengHei" "Microsoft JhengHei UI" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "Apple Symbols" "Quivira" "Code2000" "HAN NOM A"))
     ("Hangul Compatibility Jamo"
      ("Nanum Gothic Coding" "NanumBarunpen" "PCMyungjo" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "AppleMyungjo" "UnBatang" "WenQuanYi Zen Hei Mono" "HAN NOM A" "Arial Unicode MS" "Code2000" "HeadLineA"))
     ("Hangul Jamo"
      ("Nanum Gothic Coding" "NanumBarunpen" "UnBatang" "WenQuanYi Zen Hei Mono" "PCMyungjo" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "Arial Unicode MS" "Code2000"))
     ("Hangul Jamo Extended-A"
      ("Nanum Gothic Coding" "NanumBarunpen" "Malgun Gothic" "HanaMinA" "UnBatang"))
     ("Hangul Jamo Extended-B"
      ("Nanum Gothic Coding" "NanumBarunpen" "Malgun Gothic" "HanaMinA" "UnBatang"))
     ("Hangul Syllables"
      ("Nanum Gothic Coding" "NanumBarunpen" "AppleGothic" "Malgun Gothic" "Gulim" "Dotum" "Batang" "Gungsuh" "UnBatang" "WenQuanYi Zen Hei Mono" "Arial Unicode MS" "Code2000"))
     ("Hanunoo"
      ("Noto Sans Hanunoo" "MPH 2B Damase" "Quivira" "FreeSerif"))
     ("Hebrew"
      ("Miriam Fixed" "Ezra SIL" "Ezra SIL SR" "Arial Hebrew" "Raanana" "New Peninim MT" "Aharoni" "David" "FrankRuehl" "Gisha" "Levenim MT" "Narkisim" "Rod" "Cardo" "Courier New" "Adobe Hebrew" "Code2000" "Aramaic Imperial Yeb" "Microsoft Sans Serif" "Tahoma" "Lucida Sans Unicode" "Arial Unicode MS" "Arial" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Hiragana"
      ("Osaka:spacing=m" "MS Gothic" "MS Mincho" "MingLiU" "Hiragino Kaku Gothic Pro" "Meiryo" "Arial Unicode MS" "HanaMinA" "BabelStone Han" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000" "ALPHABETUM Unicode"))
     ("IPA Extensions"
      ("Monaco" "Consolas" "DejaVu Sans Mono" "Courier New" "Noto Sans" "Arial Unicode MS" "Arial" "Tahoma" "Microsoft Sans Serif" "Aboriginal Sans" "Cardo" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono" "Code2000" "ALPHABETUM Unicode"))
     ("Ideographic Description Characters"
      ("SimHei" "FangSong" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "AppleMyungjo" "HanaMinA" "HAN NOM A" "Quivira" "DFKai-SB" "Code2000"))
     ("Imperial Aramaic"
      ("Aramaic Imperial Yeb" "Quivira" "Segoe UI Historic" "Noto Sans Imperial Aramaic" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Inscriptional Pahlavi"
      ("ZH Mono" "Segoe UI Historic" "Noto Sans Inscriptional Pahlavi" "ALPHABETUM Unicode" "Ahuramzda:weight=bold"))
     ("Inscriptional Parthian"
      ("ZH Mono" "Segoe UI Historic" "Noto Sans Inscriptional Parthian" "ALPHABETUM Unicode"))
     ("Javanese"
      ("Noto Sans Javanese" "Tuladha Jejeg"))
     ("Kaithi"
      ("Noto Sans Kaithi"))
     ("Kana Supplement"
      ("Meiryo UI" "HanaMinA" "BabelStone Han"))
     ("Kanbun"
      ("SimHei" "FangSong" "SimSun" "Meiryo" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "HanaMinA" "BabelStone Han" "MingLiU" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000"))
     ("Kangxi Radicals"
      ("WenQuanYi Zen Hei Mono" "SimHei" "FangSong" "Meiryo" "SimSun" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "HanaMinA" "MingLiU" "Microsoft JhengHei" "Microsoft JhengHei UI" "HAN NOM A" "DFKai-SB" "AppleMyungjo" "Apple Symbols" "Code2000"))
     ("Kannada"
      ("Kannada Sangam MN" "Noto Sans Kannada" "Noto Sans Kannada UI" "Tunga" "Akshar Unicode" "Kedage" "Nirmala UI" "Kannada MN" "Arial Unicode MS" "Code2000"))
     ("Katakana"
      ("Osaka:spacing=m" "MS Gothic" "MingLiU" "Meiryo" "HanaMinA" "Arial Unicode MS" "BabelStone Han" "Microsoft JhengHei" "Microsoft YaHei" "Microsoft YaHei UI" "HAN NOM A" "Code2000" "ALPHABETUM Unicode"))
     ("Katakana Phonetic Extensions"
      ("MS Gothic" "MingLiU" "Meiryo" "HanaMinA" "Microsoft YaHei" "Microsoft YaHei UI" "BabelStone Han" "HAN NOM A" "Code2000"))
     ("Kayah Li"
      ("Noto Sans Kayah Li" "Code2000" "FreeMono"))
     ("Kharoshthi"
      ("Segoe UI Historic" "Noto Sans Kharoshthi" "MPH 2B Damase" "ALPHABETUM Unicode"))
     ("Khmer"
      ("Noto Sans Khmer" "Noto Sans Khmer UI" "Noto Serif Khmer" "Khmer Sangam MN" "DaunPenh" "Code2000" "MoolBoran" "Khmer Mondulkiri" "Khmer Busra"))
     ("Khmer Symbols"
      ("Noto Sans Khmer" "Noto Sans Khmer UI" "Noto Serif Khmer" "Khmer Sangam MN" "MoolBoran" "Khmer Mondulkiri" "Khmer Busra" "Code2000"))
     ("Khojki"
      ("KhojkiUnicodeOT"))
     ("Khudawadi"
      ("OldSindhi"))
     ("Lao"
      ("Noto Sans Lao" "Noto Sans Lao UI" "Noto Serif Lao" "Lao Sangam MN" "DokChampa" "DejaVu Sans Mono" "Arial Unicode MS" "Saysettha MX" "DejaVu Sans:width=condensed" "Code2000"))
     ("Latin Extended-C"
      ("DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans" "Cambria Math" "Gentium Plus" "Charis SIL" "Doulos SIL" "Code2000" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Latin Extended-D"
      ("FreeMono" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Charis SIL" "Doulos SIL" "Junicode" "Cardo" "Quivira" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Latin Extended-E"
      ("Quivira" "Everson Mono:weight=bold" "HanaMinA"))
     ("Lepcha"
      ("Mingzat" "Noto Sans Lepcha"))
     ("Letterlike Symbols"
      ("Monaco" "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "Cambria Math" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Code2000" "Symbola" "Quivira" "HAN NOM A" "Everson Mono:weight=bold"))
     ("Limbu"
      ("Noto Sans Limbu" "Namdhinggo SIL" "MPH 2B Damase" "Code2000"))
     ("Linear A"
      ("Aegean"))
     ("Linear B Ideograms"
      ("Noto Sans Linear B" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "MPH 2B Damase"))
     ("Linear B Syllabary"
      ("Noto Sans Linear B" "Aegean" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode" "MPH 2B Damase" "Penuturesu"))
     ("Lisu"
      ("Lisu Unicode" "Miao Unicode" "Noto Sans Lisu" "Lisu Tzimu" "Quivira" "Everson Mono:weight=bold"))
     ("Lycian"
      ("Segoe UI Historic" "Noto Sans Lycian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Lydian"
      ("Segoe UI Historic" "Noto Sans Lydian" "Aegean" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Mahjong Tiles"
      ("Segoe UI Symbol" "Symbola" "Noto Sans Symbols" "Quivira" "Everson Mono"))
     ("Malayalam"
      ("Malayalam Sangam MN" "Nirmala UI" "Kartika" "Code2000" "Akshar Unicode" "Samyak Malayalam" "Samyak" "Arial Unicode MS"))
     ("Mandaic"
      ("Noto Sans Mandaic"))
     ("Mathematical Alphanumeric Symbols"
      ("Cambria Math" "Noto Sans Symbols" "Asana Math" "Code2001" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Mathematical Operators"
      ("Symbola" "Monaco" "DejaVu Sans Mono" "Segoe UI Symbol" "Cambria Math" "DejaVu Sans:width=condensed" "Noto Sans Symbols" "Apple Symbols" "Asana Math" "Arial Unicode MS" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Meetei Mayek"
      ("Noto Sans Meetei Mayek" "Eeyek Unicode" "Meetei Mayek"))
     ("Meetei Mayek Extensions"
      ("Noto Sans Meetei Mayek"))
     ("Meroitic Cursive"
      ("Nilus" "Segoe UI Historic" "Segoe UI Symbol"))
     ("Meroitic Hieroglyphs"
      ("Nilus"))
     ("Miao"
      ("Miao Unicode" "Albanian"))
     ("Miscellaneous Mathematical Symbols-A"
      ("Noto Sans Symbols" "Apple Symbols" "Segoe UI Symbol" "Asana Math" "Code2000" "Symbola" "Quivira" "Cambria Math" "Everson Mono:weight=bold"))
     ("Miscellaneous Mathematical Symbols-B"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "Cambria Math" "Asana Math" "Code2000" "Symbola" "Quivira"))
     ("Miscellaneous Symbols"
      ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Symbola" "Quivira" "MS Reference Sans Serif" "Cardo" "Code2000" "Everson Mono:weight=bold"))
     ("Miscellaneous Symbols and Arrows"
      ("Symbola" "Quivira" "Asana Math" "Code2000" "Segoe UI Symbol" "Noto Sans Symbols"))
     ("Miscellaneous Symbols and Pictographs"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
     ("Miscellaneous Technical"
      ("Segoe UI Symbol" "Noto Sans Symbols" "Apple Symbols" "Cambria Math" "DejaVu Sans Mono" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Modi"
      ("MarathiCursiveG"))
     ("Modifier Tone Letters"
      ("Apple Symbols" "Noto Sans Symbols" "Gentium Plus" "Code2000" "Quivira" "Charis SIL" "Doulos SIL" "DejaVu Sans Mono"))
     ("Mongolian"
      ("STFangsong" "STHeiti" "STKaiti" "STSong" "Noto Sans Mongolian" "Mongolian Baiti" "Daicing Xiaokai" "Code2000"))
     ("Mro"
      ("Mro Unicode"))
     ("Musical Symbols"
      ("Noto Sans Symbols" "Musica" "FreeSerif" "Symbola" "Quivira"))
     ("Myanmar"
      ("Noto Sans Myanmar" "Noto Sans Myanmar UI" "Myanmar Text" "Myanmar Sangam MN" "Myanmar MN" "TharLon" "Yunghkio" "Myanmar3" "Masterpiece Uni Sans" "Padauk" "Code2000" "Tai Le Valentinium"))
     ("Myanmar Extended-A"
      ("Noto Sans Myanmar" "Noto Sans Myanmar UI" "Myanmar Text" "Padauk" "TharLon" "Yunghkio"))
     ("Myanmar Extended-B"
      ("TharLon" "Yunghkio"))
     ("NKo"
      ("Ebrima" "Conakry" "DejaVu Sans:width=condensed" "Noto Sans NKo" "Code2000"))
     ("Nabataean"
      ("Everson Mono:weight=bold"))
     ("New Tai Lue"
      ("Noto Sans New Tai Lue" "Microsoft New Tai Lue" "Dai Banna SIL Book" "Dai Banna SIL Book:style=Regular"))
     ("Number Forms"
      ("DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS" "Junicode" "Symbola" "Quivira" "Charis SIL" "Doulos SIL" "Code2000" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Ogham"
      ("Segoe UI Historic" "Segoe UI Symbol" "Noto Sans Ogham" "DejaVu Sans:width=condensed" "BabelStone Modern" "Code2000" "Aboriginal Serif" "Quivira" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Ol Chiki"
      ("Nirmala UI" "Noto Sans Ol Chiki" "Code2000"))
     ("Old Hungarian"
      ("OldHungarian"))
     ("Old Italic"
      ("Segoe UI Historic" "Segoe UI Symbol" "DejaVu Sans:width=condensed" "Cardo" "New Athena Unicode" "Aegean" "Noto Sans Old Italic" "Albanian" "Code2001" "Quivira" "Everson Mono:weight=bold" "FreeMono" "ALPHABETUM Unicode"))
     ("Old North Arabian"
      ("Marib"))
     ("Old Permic"
      ("Everson Mono:weight=bold"))
     ("Old Persian"
      ("Segoe UI Historic" "Noto Sans Old Persian" "MPH 2B Damase" "Aegean" "Code2001" "FreeSans" "ALPHABETUM Unicode"))
     ("Old South Arabian"
      ("Segoe UI Historic" "Noto Sans Old South Arabian" "Quivira" "Qataban" "Everson Mono:weight=bold"))
     ("Old Turkic"
      ("Noto Sans Old Turkic" "Segoe UI Historic" "Segoe UI Symbol" "Quivira" "Everson Mono:weight=bold"))
     ("Optical Character Recognition"
      ("Apple Symbols" "Segoe UI Symbol" "Noto Sans Symbols" "Arial Unicode MS" "Symbola" "Quivira" "FreeMono" "BabelStone Modern" "Code2000" "Everson Mono"))
     ("Oriya"
      ("Noto Sans Oriya" "Oriya Sangam MN" "Nirmala UI" "Kalinga" "Samyak Oriya" "Samyak" "Code2000" "Arial Unicode MS"))
     ("Ornamental Dingbats"
      ("Symbola"))
     ("Osmanya"
      ("Noto Sans Osmanya" "Ebrima" "Andagii" "MPH 2B Damase" "Code2001" "Everson Mono:weight=bold"))
     ("Phags-pa"
      ("BabelStone Phags-pa Book" "BabelStone Phags-pa Book:style=Regular" "Noto Sans Phags-pa" "Microsoft PhagsPa" "Code2000"))
     ("Phaistos Disc"
      ("Aegean" "Noto Sans Symbols" "Symbola" "Everson Mono:weight=bold" "Code2001" "ALPHABETUM Unicode"))
     ("Phoenician"
      ("Segoe UI Historic" "Noto Sans Phoenician" "Aegean" "Quivira" "Code2001" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Phonetic Extensions"
      ("Monaco" "Consolas" "Calibri" "Noto Sans" "Aboriginal Sans" "Charis SIL" "Doulos SIL" "Quivira" "Courier New" "DejaVu Sans:width=condensed" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Phonetic Extensions Supplement"
      ("Consolas" "Calibri" "Courier New" "Noto Sans" "Aboriginal Sans" "Charis SIL" "Doulos SIL" "Quivira" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Code2000" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Playing Cards"
      ("DejaVu Sans:width=condensed" "Symbola" "Noto Sans Symbols" "Segoe UI Symbol" "Quivira"))
     ("Rejang"
      ("Noto Sans Rejang" "Code2000" "Everson Mono:weight=bold"))
     ("Rumi Numeral Symbols"
      ("HanaMinA"))
     ("Runic"
      ("Noto Sans Runic" "Segoe UI Historic" "Segoe UI Symbol" "Aboriginal Serif" "Junicode" "FreeMono" "Quivira" "Code2000" "Cardo" "Everson Mono:weight=bold" "ALPHABETUM Unicode"))
     ("Samaritan"
      ("Noto Sans Samaritan" "Quivira" "Everson Mono:weight=bold"))
     ("Saurashtra"
      ("Noto Sans Saurashtra" "Code2000" "Sourashtra"))
     ("Sharada"
      ("Albanian"))
     ("Shavian"
      ("Segoe UI Historic" "Noto Sans Shavian" "Andagii" "MPH 2B Damase" "Apple Symbols" "Code2001" "Everson Mono:weight=bold"))
     ("Siddham"
      ("MuktamsiddhamG"))
     ("Sinhala"
      ("Noto Sans Sinhala" "Nirmala UI" "Iskoola Pota" "Akshar Unicode" "Sinhala Sangam MN"))
     ("Small Form Variants"
      ("Apple Symbols" "Arial Unicode MS" "WenQuanYi Zen Hei Mono" "Microsoft YaHei" "Microsoft YaHei UI" "Code2000"))
     ("Sora Sompeng"
      ("Nirmala UI"))
     ("Specials"
      ("BabelStone Modern" "Noto Sans Symbols" "Apple Symbols" "Arial Unicode MS" "Symbola" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Quivira" "FreeMono" "BabelStone Han"))
     ("Sundanese"
      ("Noto Sans Sundanese" "Sundanese Unicode"))
     ("Sundanese Supplement"
      ("Noto Sans Sundanese"))
     ("Superscripts and Subscripts"
      ("Consolas" "Monaco" "Apple Symbols" "Cambria Math" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Segoe UI Symbol" "Asana Math" "Charis SIL" "Doulos SIL" "Symbola" "Quivira" "Everson Mono:weight=bold" "FreeMono"))
     ("Supplemental Arrows-A"
      ("Segoe UI Symbol" "Cambria Math" "DejaVu Sans:width=condensed" "Asana Math" "Quivira" "Symbola" "Apple Symbols" "Noto Sans Symbols" "Code2000" "Everson Mono:weight=bold" "FreeMono" "BabelStone Modern"))
     ("Supplemental Arrows-B"
      ("Cambria Math" "Segoe UI Symbol" "Apple Symbols" "Noto Sans Symbols" "Asana Math" "Quivira" "Symbola" "Code2000" "Everson Mono:weight=bold"))
     ("Supplemental Arrows-C"
      ("Symbola"))
     ("Supplemental Mathematical Operators"
      ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols" "Apple Symbols" "Asana Math" "Code2000" "Symbola" "Quivira" "Everson Mono:weight=bold"))
     ("Supplemental Punctuation"
      ("DejaVu Sans Mono" "Segoe UI Symbol" "Noto Sans Symbols" "Antinoou" "New Athena Unicode" "Cardo" "Aegean" "Symbola" "Quivira" "Everson Mono:weight=bold" "Code2000" "ALPHABETUM Unicode"))
     ("Supplemental Symbols and Pictographs"
      ("Symbola"))
     ("Syloti Nagri"
      ("Noto Sans Syloti Nagri" "MPH 2B Damase"))
     ("Syriac"
      ("Segoe UI Historic" "Estrangelo Edessa" "Estrangelo Nisibin" "Code2000"))
     ("Tagalog"
      ("Quivira" "Noto Sans Tagalog"))
     ("Tagbanwa"
      ("Noto Sans Tagbanwa" "Quivira"))
     ("Tags"
      ("BabelStone Modern" "BabelStone Han"))
     ("Tai Le"
      ("Microsoft Tai Le" "TharLon" "Noto Sans Tai Le" "Yunghkio" "Tai Le Valentinium" "MPH 2B Damase" "FreeSerif"))
     ("Tai Tham"
      ("Noto Sans Tai Tham" "Lanna Alif" "Chiangsaen Alif" "Lanna Unicode UI" "Monlam Uni Sans Serif"))
     ("Tai Viet"
      ("Tai Heritage Pro" "Noto Sans Tai Viet"))
     ("Tai Xuan Jing Symbols"
      ("WenQuanYi Zen Hei Mono" "Apple Symbols" "Noto Sans Symbols" "Segoe UI Symbol" "BabelStone Han" "DejaVu Sans:width=condensed" "Symbola" "Quivira" "BabelStone Modern" "Code2001" "Everson Mono:weight=bold"))
     ("Takri"
      ("Albanian"))
     ("Tamil"
      ("Latha" "Noto Sans Tamil" "Noto Sans Tamil UI" "Nirmala UI" "Tamil MN" "Tamil Sangam MN" "InaiMathi" "Vijaya" "Maduram" "Akshar Unicode" "Samyak Tamil" "Samyak" "Code2000" "Arial Unicode MS"))
     ("Telugu"
      ("Noto Sans Telugu" "Noto Sans Telugu UI" "Telugu Sangam MN" "Vani" "Nirmala UI" "Gautami" "Akshar Unicode" "Code2000" "Arial Unicode MS"))
     ("Thaana"
      ("MV Boli" "Noto Sans Thaana" "MPH 2B Damase" "Code2000" "Everson Mono:weight=bold"))
     ("Thai"
      ("Thonburi" "DokChampa" "Noto Sans Thai" "Noto Sans Thai UI" "Noto Serif Thai" "Ayuthaya" "Silom" "Krungthep" "Sathu" "Angsana New" "AngsanaUPC" "Code2000" "Tahoma" "Arial Unicode MS" "Quivira" "Everson Mono:weight=bold"))
     ("Tibetan"
      ("Noto Sans Tibetan" "Kailasa" "Kokonor" "Tibetan Machine Uni" "Microsoft Himalaya" "Jomolhari" "Monlam Uni Sans Serif" "Arial Unicode MS"))
     ("Tifinagh"
      ("Noto Sans Tifinagh" "Ebrima" "DejaVu Sans:width=condensed" "Code2000" "Quivira" "Everson Mono:weight=bold"))
     ("Transport and Map Symbols"
      ("Apple Color Emoji" "Segoe UI Symbol" "Symbola"))
     ("Ugaritic"
      ("Segoe UI Historic" "Noto Sans Ugaritic" "Aegean" "Code2001" "Andagii" "Quivira" "Everson Mono:weight=bold" "FreeSans" "ALPHABETUM Unicode"))
     ("Unified Canadian Aboriginal Syllabics"
      ("Aboriginal Sans" "Aboriginal Serif" "Noto Sans Canadian Aboriginal" "Gadugi" "Euphemia UCAS" "Euphemia" "Code2000" "Quivira" "Everson Mono:weight=bold"))
     ("Unified Canadian Aboriginal Syllabics Extended"
      ("Aboriginal Sans" "Aboriginal Serif" "Noto Sans Canadian Aboriginal" "Gadugi" "Euphemia UCAS" "Euphemia" "Quivira" "Everson Mono:weight=bold"))
     ("Vai"
      ("Ebrima" "Noto Sans Vai" "Dukor" "Wakor" "Code2000" "Quivira"))
     ("Variation Selectors"
      ("BabelStone Modern" "BabelStone Han" "Code2000"))
     ("Variation Selectors Supplement"
      ("BabelStone Modern" "BabelStone Han"))
     ("Vedic Extensions"
      ("Siddhanta"))
     ("Vertical Forms"
      ("Microsoft YaHei" "Microsoft YaHei UI" "Symbola"))
     ("Yi Radicals"
      ("Noto Sans Yi" "Nuosu SIL" "Microsoft Yi Baiti" "STFangsong" "Code2000"))
     ("Yi Syllables"
      ("Noto Sans Yi" "Nuosu SIL" "Microsoft Yi Baiti" "STFangsong" "Code2000"))
     ("Yijing Hexagram Symbols"
      ("WenQuanYi Zen Hei Mono" "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols" "DejaVu Sans:width=condensed" "BabelStone Han" "Symbola" "Quivira" "BabelStone Modern" "Code2000" "Everson Mono:weight=bold"))))
 '(visual-fill-column-width nil)
 '(zoom-ignore-predicates
   '((lambda nil
       (>
	(count-lines
	 (point-min)
	 (point-max))
	20))))
 '(zoom-ignored-buffer-name-regexps '("^*calc"))
 '(zoom-ignored-buffer-names '("zoom.el" "init.el"))
 '(zoom-ignored-major-modes '(dired-mode markdown-mode))
 '(zoom-size 'size-callback))
 
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 '(diredp-dir-name ((t (:foreground "royalblue2" :weight bold))))
 '(frog-menu-border ((t (:background "RoyalBlue4"))))
 '(frog-menu-posframe-background-face ((t (:background "RoyalBlue4"))))
 '(hl-line ((t (:extend t :background "gray25"))))


 '(on-screen-narrow-line ((t (:underline "dark gray" :width normal))))
 '

(org-tag-group ((t (:inherit nil :foreground "dodger blue"))))

 '(region ((t (:extend t :background "#1a3300"))))




#+end_src
 '(mode-line ((t (:background "#1c1e24" :foreground "medium spring green" :box nil :family "monofur"))))
'(variable-pitch ((t (:family "KoHo")))))

#+begin_src emacs-lisp :tangle yes
  (setq select-enable-clipboard t
        x-select-enable-primary nil)






#+end_src

#+RESULTS:
| anki-editor-reset-cloze-number  | yankpad--remove-id-from-yankpad-capture |

(use-package pomidor)
(setq pomidor-save-session-file "~/Dropbox/emacs/.emacs.d/pomidor-session.json")
(setq pomidor-sound-break-over "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")
(setq pomidor-sound-overwork "~/Dropbox/emacs/.emacs.d/overwork.wav")
(setq pomidor-sound-tick "~/Dropbox/emacs/.emacs.d/tick.wav")
(setq pomidor-sound-tack "~/Dropbox/emacs/.emacs.d/tack.wav")
