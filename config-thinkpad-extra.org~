
  

#+RESULTS:
: t


* org-mode
** org-agenda
*** org-agenda settings
#+begin_src emacs-lisp :tangle yes

         (setq org-agenda-window-setup 'current-window)

         (setq  org-agenda-sorting-strategy 
                '((agenda time-up)
                  (todo priority-down category-keep)
                  (tags priority-down category-keep)
                  (search category-keep)))
         (setq org-agenda-tags-todo-honor-ignore-options t)
         (setq org-agenda-use-tag-inheritance t)

      (setq org-agenda-skip-deadline-if-done t)
         (setq org-agenda-skip-timestamp-if-done t)
         (setq org-agenda-skip-scheduled-if-done t)
         (setq org-agenda-current-time-string "✸✸✸✸✸")

         (setq org-agenda-start-with-clockreport-mode t)
         (setq org-agenda-span (quote day))
         (setq org-agenda-jump-prefer-future t)

         (setq org-agenda-with-colors t)
         (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
         (setq org-agenda-start-on-weekday nil)


         (setq org-agenda-clockreport-parameter-plist
               (quote
                (:link t :maxlevel 4 :narrow 30 :tags t :tcolumns 1 :indent t :hidefiles t :fileskip0 t)))
         (setq org-agenda-dim-blocked-tasks t)
         (setq org-agenda-files
               (quote
                ("~/Dropbox/Zettelkasten/inbox.org" 
                 "~/Dropbox/Zettelkasten/cal.org"
                 "~/Dropbox/Zettelkasten/recipes.org"
                 "~/Dropbox/Zettelkasten/ndd.org"
                 "~/Dropbox/Zettelkasten/readings.org"
                 "~/Dropbox/Zettelkasten/journal.org"
                 "~/Dropbox/Zettelkasten/lis.org"
	               "~/Dropbox/Zettelkasten/personal.org"
                 "~/Dropbox/Zettelkasten/sysadmin.org"   
   "~/Dropbox/Zettelkasten/contacts.org"
                 )))
         (setq org-agenda-include-diary nil)
         (setq org-agenda-inhibit-startup nil)
         (setq org-agenda-time-grid
               (quote
                ((daily weekly today remove-match)
                 (900  1200 1500  1800  2100 )
                 "......" "----------------")))

         (defun kiwon/org-agenda-redo-in-other-window ()
           "Call org-agenda-redo function even in the non-agenda buffer."
           (interactive)
           (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
             (when agenda-window
               (with-selected-window agenda-window (org-agenda-redo)))))
         (run-at-time nil 300 'kiwon/org-agenda-redo-in-other-window)


#+end_src                     

#+RESULTS:
: [nil 24637 31859 998114 300 kiwon/org-agenda-redo-in-other-window nil nil 516000]

*** org-agenda custom commands
:LOGBOOK:
CLOCK: [2020-07-06 Mon 10:55]--[2020-07-06 Mon 10:57] =>  0:02
:END:
(tags-todo "+STYLE=\"habit\"+SCHEDULED<=\"<today>\"+CATEGORY=\"mentat\"") 
(tags-todo "+STYLE=\"habit\"+SCHEDULED<=\"<today>\"+CATEGORY=\"HOME\"")
(tags-todo "+STYLE=\"habit\"+SCHEDULED<=\"<today>\"+CATEGORY=\"SYSADMIN\"")
        (setq org-stuck-projects '("/TODO|PROJ" ("NEXT|IN-PROG") ))
  ("j" "home todos" (
                                                         (tags-todo "cooking-Style=\"habit\"")
                                                         (tags-todo "cleaning-Style=\"habit\"")
                                                         (tags-todo "self-Style=\"habit\"")
                                                         ))

                                      ("n" "ndd & lis" (
                                                        (tags-todo "lis-/-HABIT-WAIT-HOLD")  
                                                        (tags-todo "editing-/-HABIT-WAIT-HOLD")      (tags-todo "ndd-admin-email-focus-/-HABIT-WAIT-HOLD")
                                                        (tags-todo "ndd+admin-/-HABIT-WAIT-HOLD")
                                                        (tags-todo "ndd+email-/-HABIT-WAIT-HOLD")
                                                        (tags-todo "ndd+focus-/-HABIT-WAIT-HOLD")

                                                        ))

                                      ("d" "mentat & sysadmin" (
                                                                (tags-todo "sysadmin-/-HABIT-WAIT-HOLD")
                                                                (tags-todo "mentat-/-HABIT-WAIT-HOLD")
                                                                ))

                                      ("p" "projects and areas" (
                                                                 (todo "PROJ")
                                                                 (todo "AREA")))

#+BEGIN_SRC emacs-lisp :tangle yes   
       (setq org-agenda-custom-commands '(

                                          ("h" "Habits" tags-todo "STYLE=\"habit\""  ((org-agenda-overriding-header "Habits")))

                                          ("b" "today's habits" ((agenda ""  ((org-agenda-span 1) )) (tags-todo "STYLE=\"habit\"+SCHEDULED<=\"<today>\""       )))                                   

                                          ("k" "all untagged TODOs" tags-todo "-{.*}")  ;RETURN ANY TODO ITEMS WTIHOUT TAGS

                                          ("x" "With deadline columns" alltodo "" 
                                           ((org-agenda-overriding-columns-format "%40ITEM %SCHEDULED %DEADLINE " )
                                            (org-agenda-view-columns-initially t)
                                            (org-agenda-sorting-strategy '(timestamp-up))
                                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("습관" "HOLD" "WAIT" "PROJ")) ) ))

                                          ("l" "all todos"
                                           ((agenda ""  ((org-agenda-span 1) ))
                                            (alltodo "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'todo '("AREA" "습관" "HOLD" "WAIT" "PROJ")) ))
                                                     (org-agenda-sorting-strategy '(priority-down)) )))

				          ("r" "stuff to read" tags-todo "read") 
                                          ("h" "all HOLD/WAIT items" todo "HOLD|WAIT")

                                          ("g" "all UNSCHEDULED NEXT|TODAY|IN-PROG" ((agenda "" ((org-agenda-span 2)  (org-agenda-clockreport-mode nil)))
                                                                                     (todo "NEXT|TODAY|IN-PROG"))
                                           ((org-agenda-todo-ignore-scheduled t)))

                                          ("u" "all UNSCHEDULED" alltodo ""                                                          


   (    (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("습관" "HOLD"  "PROJ" "AREA")) )
        (org-agenda-todo-ignore-scheduled t) )

                                           )
    ))



                                                                         #+END_SRC

                                                                         #+RESULTS:
                                                                         | h | Habits                | tags-todo                                                                                                                                                                                         | STYLE="habit" | ((org-agenda-overriding-header Habits))                                                                                                                                                                                                        |       |           |                                        |
                                                                         | b | today's habits        | ((agenda  ((org-agenda-span 1))) (tags-todo STYLE="habit"+SCHEDULED<="<today>"))                                                                                                                  |               |                                                                                                                                                                                                                                                |       |           |                                        |
                                                                         | k | all untagged TODOs    | tags-todo                                                                                                                                                                                         | -{.*}         |                                                                                                                                                                                                                                                |       |           |                                        |
                                                                         | x | With deadline columns | alltodo                                                                                                                                                                                           |               | ((org-agenda-overriding-columns-format %40ITEM %SCHEDULED %DEADLINE ) (org-agenda-view-columns-initially t) (org-agenda-sorting-strategy '(timestamp-up)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '(습관 HOLD WAIT PROJ)))) |       |           |                                        |
                                                                         | l | all todos             | ((agenda  ((org-agenda-span 1))) (alltodo  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'todo '(AREA 습관 HOLD WAIT PROJ)))) (org-agenda-sorting-strategy '(priority-down)))) |               |                                                                                                                                                                                                                                                |       |           |                                        |
                                                                         | r | stuff to read         | tags-todo                                                                                                                                                                                         | read          |                                                                                                                                                                                                                                                |       |           |                                        |
                                                                         | h | all HOLD/WAIT items   | todo                                                                                                                                                                                              | HOLD          | WAIT                                                                                                                                                                                                                                           |       |           |                                        |
                                                                         | g | all UNSCHEDULED NEXT  | TODAY                                                                                                                                                                                             | IN-PROG       | ((agenda  ((org-agenda-span 2) (org-agenda-clockreport-mode nil))) (todo NEXT                                                                                                                                                                  | TODAY | IN-PROG)) | ((org-agenda-todo-ignore-scheduled t)) |
                                                                         | u | all UNSCHEDULED       | alltodo                                                                                                                                                                                           |               | ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '(습관 HOLD PROJ AREA))) (org-agenda-todo-ignore-scheduled t))                                                                                                                     |       |           |                                        |

                                                                      
#+RESULTS:
| h | Habits                | tags-todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | STYLE="habit" | ((org-agenda-overriding-header Habits))                                                                                                                                                                                                        |       |           |                                        |
| b | today's habits        | ((agenda  ((org-agenda-span 1))) (tags-todo STYLE="habit"+SCHEDULED<="<today>"))                                                                                                                                                                                                                                                                                                                                                                                                            |               |                                                                                                                                                                                                                                                |       |           |                                        |
| k | all untagged TODOs    | tags-todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | -{.*}         |                                                                                                                                                                                                                                                |       |           |                                        |
| x | With deadline columns | alltodo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |               | ((org-agenda-overriding-columns-format %40ITEM %SCHEDULED %DEADLINE ) (org-agenda-view-columns-initially t) (org-agenda-sorting-strategy '(timestamp-up)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '(습관 HOLD WAIT PROJ)))) |       |           |                                        |
| l | all todos             | ((agenda  ((org-agenda-span 1))) (alltodo  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '(습관 HOLD WAIT PROJ)))) (org-agenda-sorting-strategy '(priority-down))))                                                                                                                                                                                                                                                                                                           |               |                                                                                                                                                                                                                                                |       |           |                                        |
| h | all HOLD/WAIT items   | todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | HOLD          | WAIT                                                                                                                                                                                                                                           |       |           |                                        |
| g | all UNSCHEDULED NEXT  | TODAY                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | IN-PROG       | ((agenda  ((org-agenda-span 2) (org-agenda-clockreport-mode nil))) (todo NEXT                                                                                                                                                                  | TODAY | IN-PROG)) | ((org-agenda-todo-ignore-scheduled t)) |
| u | all UNSCHEDULED       | ((agenda  ((org-agenda-span 4) (org-agenda-clockreport-mode nil))) (tags-todo ndd ((org-agenda-overriding-header NDD))) (tags-todo lis ((org-agenda-overriding-header LIS))) (tags-todo home ((org-agenda-overriding-header home))) (tags-todo sysadmin ((org-agenda-overriding-header sysadmin))) (tags-todo mentat ((org-agenda-overriding-header mentat))) (((org-agenda-todo-ignore-scheduled t))) (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '(습관 HOLD WAIT PROJ)))) |               |                                                                                                                                                                                                                                                |       |           |                                        |



** org-habit
#+begin_src emacs-lisp :tangle yes
   (setq org-habit-graph-column 80)
   (setq org-habit-show-habits nil)
   (setq org-habit-show-all-today nil)
   (setq org-habit-show-habits-only-for-today nil)

   (defvar my/org-habit-show-graphs-everywhere t
     "If non-nil, show habit graphs in all types of agenda buffers.

      Normally, habits display consistency graphs only in
      \"agenda\"-type agenda buffers, not in other types of agenda
      buffers.  Set this variable to any non-nil variable to show
      consistency graphs in all Org mode agendas.")

   (defun my/org-agenda-mark-habits ()
     "Mark all habits in current agenda for graph display.

      This function enforces `my/org-habit-show-graphs-everywhere' by
      marking all habits in the current agenda as such.  When run just
      before `org-agenda-finalize' (such as by advice; unfortunately,
      `org-agenda-finalize-hook' is run too late), this has the effect
      of displaying consistency graphs for these habits.

      When `my/org-habit-show-graphs-everywhere' is nil, this function
      has no effect."
     (when (and my/org-habit-show-graphs-everywhere
                (not (get-text-property (point) 'org-series)))
       (let ((cursor (point))
             item data) 
         (while (setq cursor (next-single-property-change cursor 'org-marker))
           (setq item (get-text-property cursor 'org-marker))
           (when (and item (org-is-habit-p item)) 
             (with-current-buffer (marker-buffer item)
               (setq data (org-habit-parse-todo item))) 
             (put-text-property cursor
                                (next-single-property-change cursor 'org-marker)
                                'org-habit-p data))))))

   (advice-add #'org-agenda-finalize :before #'my/org-agenda-mark-habits)


#+end_src

#+RESULTS:

** org-list, bullets, checkboxes
*** checkboxes and todo states


#+BEGIN_SRC emacs-lisp :tangle yes
   (defun my/org-checkbox-todo ()
     "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
     (let ((todo-state (org-get-todo-state)) beg end)
       (unless (not todo-state)
         (save-excursion
           (org-back-to-heading t)
           (setq beg (point))
           (end-of-line)
           (setq end (point))
           (goto-char beg)
           (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                  end t)
               (if (match-end 1)
                   (if (equal (match-string 1) "100%")
                       (unless (string-equal todo-state "DONE")
                         (org-todo 'done))
                     (unless (string-equal todo-state "✶")
                       (org-todo 'todo)))
                 (if (and (> (match-end 2) (match-beginning 2))
                          (equal (match-string 2) (match-string 3)))
                     (unless (string-equal todo-state "DONE")
                       (org-todo 'done))
                   (unless (string-equal todo-state "✶")
                     (org-todo 'todo)))))))))

   (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+END_SRC

#+RESULTS:
| my/org-checkbox-todo |
** org-clock
:PROPERTIES:
:UPDATE_DATE: 2020.0823
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  
   (setq org-log-into-drawer t)
(use-package org-clock-split)
   (setq org-clock-continuously nil)
   (setq org-log-note-clock-out t)
   (defun insert-timestamp (prefix)
     "Insert the current date. With prefix-argument, use ISO format. With
            two prefix arguments, write out the day and month name."
     (interactive "P")
     (let ((format (cond
                    ((not prefix) "%Y.%m%d")
                    ((Equal prefix '(4)) "%Y-%m-%d-%H%M")
                    ((equal prefix '(16)) "%A, %d. %B %Y")))
           )
       (insert (format-time-string format))))

   (setq org-mru-clock-how-many 80)
   (setq org-mru-clock-keep-formatting t)
   (defun my-org-clock-select-task ()
     (interactive)
     (org-clock-select-task))

   (define-key org-mode-map (kbd "C-<f2>") #'my-org-clock-select-task)





   (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
   (setq org-clock-into-drawer t)
   (setq org-clock-out-remove-zero-time-clocks t)
                                           ;(setq org-clock-in-resume nil)

   (setq org-clock-out-when-done t)


   (setq org-clock-report-include-clocking-task t)


   (setq org-clock-mode-line-total (quote current))

   (setq org-clock-clocked-in-display (quote both))
   (setq org-clock-clocktable-default-properties
         (quote
          (:maxlevel 4 :block today :hidefiles t :tcolumns 1 :narrow 30 :level nil :link t)))
   (setq org-clock-history-length 15)


                                           ;      (setq org-clock-in-resume t)


   (setq org-clock-in-switch-to-state nil)
   (setq org-clock-persist 'history)
                                           ;      (org-clock-persistence-insinuate)
   (setq org-clock-persist-query-resume nil)
   (setq org-clock-sound t)
   (setq org-clocktable-defaults (quote (:maxlevel 4 :scope subtree)))


#+END_SRC

#+RESULTS:
| :maxlevel | 4 | :scope | subtree |



** org-refile and archiving
#+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-refile-allow-creating-parent-nodes (quote confirm))
   (setq org-refile-use-outline-path (quote file))
   (setq org-archive-location
         "~/Dropbox/Zettelkasten/journal.org::datetree/")
   (setq org-archive-reversed-order nil)
   (setq org-refile-use-cache t)

   (defun my-org-refile-cache-clear ()
     (interactive)
     (org-refile-cache-clear))
   (define-key org-mode-map (kbd "C-0 C-c C-w") 'my-org-refile-cache-clear)


   (setq org-refile-targets (quote (("~/Dropbox/Zettelkasten/ndd.org" :maxlevel . 2)
                                    ("~/Dropbox/Zettelkasten/sysadmin.org" :maxlevel . 1)
                                    ("~/Dropbox/Zettelkasten/readings.org" :maxlevel . 2)
                                    ("~/Dropbox/Zettelkasten/inbox.org" :maxlevel . 2)
				        ("~/Dropbox/Zettelkasten/recipes.org" :maxlevel . 1)
                                    ("~/Dropbox/Zettelkasten/personal.org" :maxlevel . 2)
                                    ("~/Dropbox/Zettelkasten/journal.org" :maxlevel . 3)
                                    ("~/Dropbox/Zettelkasten/cal.org" :maxlevel . 2)
                                    ("~/Dropbox/Zettelkasten/lis.org" :maxlevel . 2))))

   (setq org-outline-path-complete-in-steps nil) 

                                           ; Refile in a single go

                                           ;  (global-set-key (kbd "<f4>") 'org-refile)

   (setq org-refile-allow-creating-parent-nodes 'confirm)



#+END_SRC

#+RESULTS:
: confirm






#+RESULTS:
** org-chef
#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-chef
     :defer t
     )
#+END_SRC

#+RESULTS:


** org-ref

#+BEGIN_SRC emacs-lisp :tangle yes

   (use-package org-ref
     :defer t)
   (setq reftex-default-bibliography '("~/Dropbox/Zettelkasten/references.bib"))

   ;; see org-ref for use of these variables
   (setq org-ref-bibliography-notes "~/Dropbox/Zettelkasten/readings.org"
         org-ref-default-bibliography '("~/Dropbox/Zettelkasten/references.bib")
         org-ref-pdf-directory "~/Dropbox/Library/BIBTEX/")
   (setq org-ref-pdf-directory "~/Dropbox/Library/BIBTEX/")
   (setq bibtex-completion-bibliography "~/Dropbox/Zettelkasten/references.bib"

         bibtex-completion-notes-path "~/Dropbox/Zettelkasten/readings.org")
   (setq org-ref-prefer-bracket-links t)
   ;; open pdf with system pdf viewer (works on mac)
   (setq bibtex-completion-pdf-open-function
         (lambda (fpath)
           (start-process "open" "*open*" "open" fpath)))


                                           ;  (setq pdf-view-continuous nil)

                                           ;  (setq bibtex-autokey-year-title-separator "")
                                           ; (setq bibtex-autokey-titleword-length 0)


   (setq bibtex-completion-notes-template-one-file "\n* ${author} (${year}). /${title}/.\n:PROPERTIES:\n:Custom_ID: ${=key=}\n:CITATION: ${author} (${year}). /${title}/. /${journal}/, /${volume}/(${number}), ${pages}. ${publisher}. ${url}\n:DATE_ADDED: %t\n:READ_STATUS:\n:INGESTED:\n:FORMAT:\n:TYPE:\n:AREA:\n:END:")

   (setq bibtex-maintain-sorted-entries t)

   (use-package org-noter
     :ensure t
     :defer t
     :config (setq org-noter-property-doc-file "INTERLEAVE_PDF")
     (setq org-noter-property-note-location "INTERLEAVE_PAGE_NOTE") 
                                           ;       (setq org-noter-notes-window-location 'other-frame)
                                           ;      (setq org-noter-default-heading-title "p. $p$") 
     (setq org-noter-auto-save-last-location t))

   (use-package interleave 
     :defer t
     )
   (setq org-noter-always-create-frame nil)
   (setq org-noter-auto-save-last-location t)
   (setq org-noter-default-heading-title "$p$: ")
   (setq org-noter-default-notes-file-names (quote ("~/Dropbox/Zettelkasten/readings.org")))
   (setq org-noter-doc-split-fraction (quote (0.75 . 0.75)))
   (setq org-noter-insert-note-no-questions t)
   (setq org-noter-kill-frame-at-session-end nil)
   (setq org-noter-notes-search-path (quote ("~/Dropbox/Zettelkasten/")))
   (setq org-noter-notes-window-location (quote horizontal-split))
(setq org-noter-insert-selected-text-inside-note t)

#+END_SRC

#+RESULTS:
: t




	   

** org-capture

#+BEGIN_SRC emacs-lisp :tangle yes

   (server-start)
   (require 'org-protocol)
   (require 'org-protocol-capture-html)
   (setq org-protocol-default-template-key "w")

   (setq org-capture-templates
         '(
           ("a" "current activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** %? \n" :clock-in t :clock-keep t :kill-buffer nil ) 

           ("c" "calendar" entry (file "~/Dropbox/Zettelkasten/cal.org") "* %^{EVENT}\n%^t\n%a\n%?")
	
           ("d" "download" table-line (id "reading") "|%^{Author} | %^{Title} | %^{Format}|"  )
           ("e" "emacs log" item (id "config") "%U %a %?" :prepend t) 

           ("f" "Anki basic" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic (and reversed card)\n:ANKI_DECK: Default\n:END:\n** Front\n%^{Front}\n** Back\n%^{Back}%?")

           ("F" "Anki cloze" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Default\n:END:\n** Text\n%^{Front}%?\n** Extra")

           ("j" "journal" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** journal :journal: \n%U  \n%?\n\n"   :clock-in t :clock-resume t :clock-keep nil :kill-buffer nil :append t) 
           ("l" "look up" item (id "5br4n6815pi0") "[ ] %? %U %a" :prepend nil)
           ("m" "meditation" table-line (id "meditation") "|%u | %^{Time} | %^{Notes}|" :table-line-pos "II-1" )

           ("t" "todo" entry (file "~/Dropbox/Zettelkasten/inbox.org") "* TODO %? \nSCHEDULED: %t\n%a\n" :prepend nil)
           ("s" "to buy" item (id "shopping") "[ ] %?" :prepend t) 
           ("z" "zettel" entry (file "~/Dropbox/Zettelkasten/zettels.org") "* %^{TOPIC}\n%U\n %? \n%a\n\n\n" :prepend nil :unarrowed t)

           ("w" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
            "* %a \nSCHEDULED: %t %?\n%:initial" )
  ("x" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
            "* TODO %? \nSCHEDULED: %t\n%a\n\n%:initial" )

 ("y" "org-protocol" item (id "resources")
            "[ ] %a %U %:initial" )

           ))


   (defun my-org-capture-place-template-dont-delete-windows (oldfun args)
     (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
       (apply oldfun args)))

                                           ;this prevents org-capture from replacing any windows. it just adds. 

         #+END_SRC

#+RESULTS:
: my-org-capture-place-template-dont-delete-windows

(with-eval-after-load "org-capture"
(advice-add 'org-capture-place-template :around 'my-org-capture-place-template-dont-delete-windows))

;  

;  ("n" "note" entry (file "~/Dropbox/Zettelkasten/inbox.org") "* %^{TOPIC}\n%U\n%? \n%a\n\n\n" :prepend nil)

; ("p" "pomodoro" table-line (id "6w81f6q04qi0") "| %^{Day & time} | %^{How many pomodoros?} | %^{Task} | %^{Area of focus|ndd|lis|home|sysadmin|} |%^{Mode}|  %^{Notes}|" :table-line-pos "I+1" )
("r" "reading log" table-line (id "em87rza1mni0") "|%^{Author}|%^{Title}|%^{Finished}|" :table-line-pos "I+1" )





** org navigation
#+BEGIN_SRC emacs-lisp :tangle yes
;   (setq org-id-link-to-org-use-id (quote create-if-interactive))
   (setq org-id-link-to-org-use-id (quote create-if-interactive))

   (setq org-id-method (quote org))
   (setq org-return-follows-link t)
   (setq org-goto-interface (quote outline-path-completion))
                                           ;   (add-hook 'org-mode-hook (lambda () (org-sticky-header-mode 1)))


   (setq global-visible-mark-mode t)

#+END_SRC

#+RESULTS:
: t

** org-misc
#+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-modules
         (quote
          (ol-bibtex ol-eww org-habit org-id org-protocol ol-w3m ol-bookmark org-checklist org-depend org-registry)))
   (require 'cl) 
   (setq org-babel-load-languages '((emacs-lisp . t)
                                    (css . t)
                                    (latex . t)
                                    ))
   (setq org-edit-src-content-indentation 3)
                                           ;   If non-nil, the effect of TAB in a code block is as if it were issued in the language major mode buffer.
   (setq org-src-tab-acts-natively t)
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   (setq org-attach-id-dir "/home/betsy/Dropbox/Zettelkasten/attachments")
   (setq org-attach-method (quote ln))
   (setq org-attach-store-link-p t)
   (setq org-remove-highlights-with-change nil)
   (setq org-reverse-note-order t
   (setq org-columns-default-format "%50ITEM %TODO %3PRIORITY %TAGS")
   (setq org-columns-default-format-for-agenda "%50ITEM %TODO %3PRIORITY %TAGS %CLOCKSUM")
   (setq org-ctrl-k-protect-subtree (quote error))
   (setq org-directory "~/Dropbox/Zettelkasten")
   (setq org-ellipsis " ⬎ ")
   (setq org-export-with-author nil)
   (setq org-export-with-toc nil)
   (setq org-export-initial-scope 'subtree)
   (setq org-export-with-section-numbers nil)

#+END_SRC

#+RESULTS:
** org-tags
#+BEGIN_SRC emacs-lisp :tangle yes

   (setq org-complete-tags-always-offer-all-agenda-tags nil)
   (setq org-tags-match-list-sublevels (quote indented))
   (setq tags-add-tables nil)
   (setq org-fast-tag-selection-single-key t)
   (setq org-use-fast-tag-selection (quote auto))

   (setq org-tag-persistent-alist '( 
                                    (:startgroup)
                                    ("ndd" . ?n)
                                    ("sysadmin" . ?s)
                                    ("home" . ?h)
                                    ("lis" . ?l)
                                    ("mentat" . ?m)
                                    ("editing" . ?e)
                                    (:endgroup)



                                    (:startgroup)
                                    ("admin" . ?a)
                                    ("focus" . ?f)
                                    (:endgroup)
                                    (:startgroup)
                                    ("email")
                                    ("discovery" . ?d)
                                    ("intake" . ?i)
                                    ("integrate")
                                    (:endgroup)

                                    (:startgrouptag)
                                    ("lis" . ?l)
                                    (:grouptags)

                                    ("csi")
                                    ("job")
                                    (:endgrouptag)

                                    (:startgrouptag)
                                    ("intake")
                                    (:grouptags)
                                    ("listen")
                                    ("read" . ?r)
                                    ("watch" . ?w)
                                    (:endgrouptag)

                                    (:startgrouptag)
                                    ("home" . ?h)
                                    (:grouptags)
                                 ("habit")
                                    ("cooking")
                                    ("cleaning")
                                    (:endgrouptag)



                                    ))

   (setq org-tag-faces '(
                         ("ndd" :inherit org-tag :foreground "yellow green")
                         ("sysadmin" :inherit org-tag :foreground "yellow green")
                         ("lis" :inherit org-tag :foreground "yellow green")
                         ("mentat" :inherit org-tag :foreground "yellow green")
                         ("editing" :inherit org-tag :foreground "yellow green")
                         ("self" :inherit org-tag :foreground "yellow green")
                         ("home" :inherit org-tag :foreground "yellow green")
                                           ;group2
                         ("journal" :inherit org-tag :foreground "dark orange")
                         ("job" :inherit org-tag :foreground "dark orange")
                         ("csi" :inherit org-tag :foreground "dark orange")
		          ("read" :inherit org-tag :foreground "dodger blue")
		      
                         ))


#+END_SRC

#+RESULTS:
| ndd      | :inherit | org-tag | :foreground | yellow green |
| sysadmin | :inherit | org-tag | :foreground | yellow green |
| lis      | :inherit | org-tag | :foreground | yellow green |
| mentat   | :inherit | org-tag | :foreground | yellow green |
| editing  | :inherit | org-tag | :foreground | yellow green |
| self     | :inherit | org-tag | :foreground | yellow green |
| home     | :inherit | org-tag | :foreground | yellow green |
| journal  | :inherit | org-tag | :foreground | dark orange  |
| job      | :inherit | org-tag | :foreground | dark orange  |
| csi      | :inherit | org-tag | :foreground | dark orange  |
| read     | :inherit | org-tag | :foreground | dodger blue  |


** org-todo
#+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-todo-keywords
         (quote
          ((sequence "TODO(t)" "NEXT(n)" "IN-PROG(i)" "WAIT(w)" "|" "DONE(d)"  "x(c)" )
           (type "AREA(a)"  "습관(h)"   "HOLD(l)"  "|" "DONE(d)")     )))


   (setq org-edna-mode t)
   (org-edna-mode)
   (setq org-log-done (quote time))
   (setq org-enforce-todo-checkbox-dependencies nil)
   (setq org-enforce-todo-dependencies t)
#+END_SRC

#+RESULTS:
: t

* STOP!






* mu4e
[[file:~/.mbsyncrc::IMAPAccount gmail]]

#+BEGIN_SRC emacs-lisp :tangle yes

                                                       ; (use-package mu4e) 
                                                       ; (use-package mu4e-contrib)
               (require 'mu4e)
               (require 'org-mu4e)
               ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
   (setq org-mu4e-convert-to-html t)
               (setq mu4e-sent-messages-behavior 'delete)
               (setq message-kill-buffer-on-exit t)
               (setq mu4e-change-filenames-when-moving t)
               (setq mu4e-compose-format-flowed t)

               (setq mu4e-hide-index-messages t)
               ;; Call EWW to display HTML messages
                                                       ;(defun jcs-view-in-eww (msg)
                                                       ; (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

               ;; Arrange to view messages in either the default browser or EWW
               (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
                                                       ; (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

               ;; From Ben Maughan: Get some Org functionality in compose buffer
               (add-hook 'message-mode-hook 'turn-on-orgtbl)
                                                       ; (add-hook 'message-mode-hook 'turn-on-orgstruct++)

               (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
               (add-hook 'mu4e-view-mode-hook 'visual-fill-column-mode)

               (defun no-auto-fill ()
                 "Turn off auto-fill-mode."
                 (auto-fill-mode -1))


               (defun vcfm-off ()
                                                       ;turn off visual fill column mode
                 (visual-fill-column-mode nil))

               (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
               (add-hook 'mu4e-headers-mode-hook (lambda ()(visual-line-mode -1)))

               (setq mu4e-compose-dont-reply-to-self t)
               (setq mu4e-confirm-quit nil)
               (setq mu4e-display-update-status-in-modeline nil)
               (setq mu4e-index-lazy-check t)

      (require 'smtpmail)
         (setq message-send-mail-function 'smtpmail-send-it
               smtpmail-starttls-credentials
               '(("smtp.gmail.com" 587 nil nil))
               smtpmail-default-smtp-server "smtp.gmail.com"
               smtpmail-smtp-server "smtp.gmail.com"
               smtpmail-smtp-service 587
               smtpmail-debug-info t)

(add-to-list 'mu4e-bookmarks
  '( :name  "Big messages"
     :query "size:15M..500M"
     :key   ?b))
#+END_SRC
  
#+RESULTS:
| :name | Big messages         | :query | size:20M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:40M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:50M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:10M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:5M..500M                        | :key         |  98 |      |     |
| :name | inbox                | :query | maildir:/gmail/INBOX                 | :key         | 105 |      |     |
| :name | Unread messages      | :query | flag:unread AND maildir:/gmail/INBOX | :key         | 117 |      |     |
| :name | Today's messages     | :query | date:today..now                      | :key         | 116 |      |     |
| :name | Last 7 days          | :query | date:7d..now                         | :hide-unread |   t | :key | 119 |
| :name | Messages with images | :query | mime:image/*                         | :key         | 112 |      |     |
  
** message view

#+BEGIN_SRC emacs-lisp :tangle yes
                                              ;  (setq mu4e-attachment-dir "/home/betsy/Dropbox/Spring 2019/")

   ;; enable inline images
   ;; use imagemagick, if available
   (when (fboundp 'imagemagick-register-types)
     (imagemagick-register-types))

   (add-hook 'mu4e-compose-mode-hook
       (defun my-do-compose-stuff ()
          "My settings for message composition."
          (visual-line-mode)
          (org-mu4e-compose-org-mode)
              (use-hard-newlines -1)
          (flyspell-mode)))

      (setq shr-color-visible-luminance-min 50) 
      (setq shr-color-visible-distance-min 5)
                                              ;(setq mu4e-view-html-plaintext-ratio-heuristic 'most-positive-fixnum)
      (setq message-yank-prefix ""
            message-yank-empty-prefix ""
            message-yank-cited-prefix "")

      (setq w3m-default-desplay-inline-images t)
      (defun mu4e-action-view-in-w3m ()
        "View the body of the message in emacs w3m."
        (interactive)
        (w3m-browse-url (concat "file://"
                                (mu4e~write-body-to-html (mu4e-message-at-point t)))))


      ;; customize the reply-quote-string
      (setq message-citation-line-format "\n\nOn %a %d %b %Y at %R, %f wrote:\n")
      ;; choose to use the formatted string
      (setq message-citation-line-function 'message-insert-formatted-citation-line)


      (setq mu4e-view-scroll-to-next nil)

      (add-hook 'message-mode-hook 'visual-fill-column-mode)



#+END_SRC

#+RESULTS:
| visual-fill-column-mode | turn-on-orgtbl | org-contacts-setup-completion-at-point |

** headers view

 


#+BEGIN_SRC emacs-lisp :tangle yes
   (setq mu4e-headers-include-related nil)
   (setq mu4e-headers-fields
         '( (:human-date    .  15)    ;; alternatively, use :human-date
            (:flags         .   5)
            (:from          .  20)
            (:thread-subject       . 70 )
                                           ;             (:thread-subject       . 120 )
            )) 
   (setq org-mu4e-link-query-in-headers-mode nil)
   (setq mu4e-update-interval 300)
   (setq mu4e-use-fancy-chars nil)
   (setq mu4e-index-update-in-background t)
   (setq mu4e-view-prefer-html t)
   (setq mu4e-headers-skip-duplicates t)
   (setq mu4e-headers-auto-update t)
   (setq mu4e-view-show-addresses t)
   (setq mu4e-view-show-images t)
   (setq mu4e-headers-date-format "%x")
   (setq mu4e-headers-time-format "%H:%M")
#+END_SRC

#+RESULTS:
: %H:%M

** settings

#+BEGIN_SRC emacs-lisp :tangle yes

   ;; allow for updating mail using 'U' in the main view:
   (setq mu4e-get-mail-command "true")
                                           ;(setq mail-user-agent 'mu4e-user-agent)
   (use-package org-msg)
   (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
         org-msg-startup "hidestars indent inlineimages"
                                           ;	org-msg-greeting-fmt "\nHi *%s*,\n\n"
         org-msg-greeting-name-limit 3
         org-msg-text-plain-alternative t
         org-msg-signature "

    In solidarity,

    ,#+begin_signature
    -- *Betsy (she/they)* \\\\
    ,#+end_signature")
   (org-msg-mode)

#+END_SRC 

#+RESULTS:
: t

** folders

#+BEGIN_SRC emacs-lisp :tangle yes

 
   (setq mu4e-drafts-folder "/Drafts")
   (setq mu4e-sent-folder   "/Sent")
   (setq mu4e-trash-folder  "/Trash")
   (setq mu4e-refile-folder "/All")
   (setq mu4e-maildir "~/.maildir")
   (setq mu4e-attachment-dir "~/Dropbox/2021")
#+END_SRC 

#+RESULTS:
: ~/Dropbox/2021

  








