* load external files

#+begin_src emacs-lisp :tangle yes
   (load "pi")
   (load "org-pdfview")
   (load "org-protocol-capture-html")
   (load "org-book")
   (load "org-depend")
   (load "bookmark+")
   (load "org-contacts")
   (load "org-toc")
   (load "org-registry")
   (load "run-assoc")
   (load "unbound")
   (load "org-checklist")
   (load "org-notify")
   (load "dired+")
(load "clipboard2org")



   (setq org-edna-mode t)
   (org-edna-mode)

     (define-key yas-minor-mode-map [(tab)] nil)
            (define-key yas-minor-mode-map (kbd "TAB") nil)         #+end_src
 (use-package org-pdfview :defer t)
                                           ;     (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))

   (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
   (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" .  org-pdfview-open))

   (setq pdf-view-continuous nil)
   (add-to-list 'org-file-apps 
                '("\\.pdf\\'" . (lambda (file link)
                                  (org-pdfview-open link))))

#+RESULTS:
: t

   

* latex
#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package company-auctex)
   (company-auctex-init)


   (use-package tex :ensure auctex)

   (setq TeX-auto-save t)
   (setq TeX-parse-self t)


#+END_SRC

#+RESULTS:
: t

* yasnippet & yankpad

#+BEGIN_SRC emacs-lisp :tangle yes

   (use-package yasnippet                  ; Snippets
     )



   (use-package yankpad
     :ensure t
     :defer 10
     :init
     (setq yankpad-file "~/Dropbox/Zettelkasten/yankpad.org")


     )

   (setq yankpad-respect-current-org-level t)
   (setq yas-global-mode t)
   (setq yas-snippet-dirs
         (quote
          ("/home/betsy/Dropbox/emacs/.emacs.d/snippets")))


   (defhydra hydra-yasnippet (:color red :hint nil)
     "
                    ^YASnippets^
      --------------------------------------------
        Modes:    Load/Visit:    Actions:

       _g_lobal  _d_irectory    _i_nsert
       _m_inor   _f_ile         _t_ryout
       _e_xtra   _l_ist         _n_ew
                reload _a_ll
      "
     ("n" down "done")
     ("p" down "up")
     ("N" outline-next-visible-heading "next heading")
     ("P" outline-previous-visible-heading "prev heading")
     ("d" yas-load-directory)
     ("e" yas-activate-extra-mode)
     ("i" yas-insert-snippet)
     ("f" yas-visit-snippet-file :color blue)
     ("n" yas-new-snippet)
     ("t" yas-tryout-snippet)
     ("l" yas-describe-tables)
     ("g" yas/global-mode :color red)
     ("m" yas/minor-mode :color red)
     ("a" yas-reload-all))

#+END_SRC

#+RESULTS:
: hydra-yasnippet/body




* HYDRAS
#+begin_src emacs-lisp :tangle yes

   (defhydra hydra-org (:color amaranth :columns 3)
     "Org Mode Movements"
     ("n" outline-next-visible-heading "next heading")
     ("p" outline-previous-visible-heading "prev heading")
     ("N" org-forward-heading-same-level "next heading at same level")
     ("P" org-backward-heading-same-level "prev heading at same level")
     ("u" outline-up-heading "up heading")
     ("k" kill-region "kill region")
     ("y" yank "paste")
     ("l" helm-show-kill-ring "list" :color blue)  
     ("r" org-refile "refile")
     ("t" org-todo "todo")
     ("g" org-set-tags-command "tags")
     ("s" show-subtree "expand subtree")
     ("h" hide-subtree "collapse subtree")
     ("a" org-archive-subtree "archive")
     ("G" org-goto "goto" :exit t)
     ("q" nil "quit" :color blue)
     )




   (defhydra goto (:color blue :hint nil)
     "
         Goto:
         ^Char^              ^Word^                ^org^                    ^search^
         ^^^^^^^^---------------------------------------------------------------------------
         _c_: 2 chars        _w_: word by char     _h_: headline in buffer  _o_: helm-occur
         _C_: char           _W_: some word        _a_: heading in agenda   _p_: helm-swoop
         _L_: char in line   _s_: subword by char  _q_: swoop org buffers   _f_: search forward
         ^  ^                _S_: some subword     ^ ^                      _b_: search backward
         -----------------------------------------------------------------------------------
         _B_: helm-buffers       _l_: avy-goto-line
         _m_: helm-mini          _i_: ace-window
         _R_: helm-recentf

         _n_: Navigate           _._: mark position _/_: jump to mark
         "
     ("c" avy-goto-char-2)
     ("C" avy-goto-char)
     ("L" avy-goto-char-in-line)
     ("w" avy-goto-word-1)
     ;; jump to beginning of some word
     ("W" avy-goto-word-0)
     ;; jump to subword starting with a char
     ("s" avy-goto-subword-1)
     ;; jump to some subword
     ("S" avy-goto-subword-0)
     ("l" avy-goto-line)
     ("i" ace-window)
     ("h" helm-org-headlines)
     ("a" helm-org-agenda-files-headings)
     ("q" helm-multi-swoop-org)
     ("o" helm-occur)
     ("p" helm-swoop)
                                           ;        ("p" swiper-helm)
     ("f" isearch-forward)
     ("b" isearch-backward)
     ("." org-mark-ring-push :color red)
     ("/" org-mark-ring-goto :color blue)
     ("B" helm-buffers-list)
     ("m" helm-mini)
     ("R" helm-recentf)
     ("n" hydra-navigate/body))

   (global-set-key (kbd "s-g") 'goto/body)


#+end_src

#+RESULTS:
: goto/body

* DIRED
:PROPERTIES:
:ID:       oi0gh0v0dti0
:UPDATE_DATE: 2020.0822 opens ok
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
   (add-hook 'dired-load-hook
             (function (lambda () (load "dired-x"))))

   (add-hook 'dired-mode-hook
             (lambda ()
               ;; Set dired-x buffer-local variables here.  For example:
               (dired-omit-mode 1)
               ))
   (setq dired-omit-verbose nil)
   ;; toggle `dired-omit-mode' with C-x M-o
   (add-hook 'dired-mode-hook #'dired-omit-mode)
   (setq dired-omit-files
         (concat dired-omit-files "\\|^.DS_STORE$\\|^.projectile$\\|^.org~$"))
                                           ;added 2020.0822. opens ok. 
   (diredp-toggle-find-file-reuse-dir nil)
#+END_SRC

#+RESULTS:
: Reusing Dired buffers is now OFF


: ^\.?#\|^\.$\|^\.\.$\|^.DS_STORE$\|^.projectile$\|^.org~$\|^.DS_STORE$\|^.projectile$\|^.org~$


#+RESULTS:
: hydra-dired/body

* NEW snippets
#+begin_src emacs-lisp :tangle yes



                                           ;(use-package org-super-links
                                           ; :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github :commit "0.2"))



   (use-package org-drill)

   (setq org-src-fontify-natively t)
   (setq display-time-mode t)
   (setq fill-flowed-encode-column 1000)
   (setq org-contacts-files (quote ("~/Dropbox/Zettelkasten/contacts.org")))
   (setq org-timer-display (quote both))


;   (global-activity-watch-mode)

   (centered-cursor-mode nil)
   (unkillable-scratch 1)

   (require 'org-download)

   ;; Drag-and-drop to `dired`
   (add-hook 'dired-mode-hook 'org-download-enable)


                                           ; (global-mu4e-conversation-mode)
#+end_src

#+RESULTS:
| org-download-enable | dired-omit-mode | (lambda nil (dired-omit-mode 1)) | pdf-occur-dired-minor-mode | diredp-nb-marked-in-mode-name | diredp--set-up-font-locking | (lambda nil (let ((now (lookup-key dired-mode-map J))) (if (and now (not (eq now 'undefined))) nil (define-key dired-mode-map J 'bmkp-dired-jump)) (setq now (lookup-key dired-mode-map |

* calendar & calfw
#+BEGIN_SRC emacs-lisp :tangle yes

   (use-package calfw)
   (use-package calfw-org)
                                           ;   (use-package calfw-gcal)
   (use-package calfw-cal)
   (setq package-check-signature nil)
                                           ;  (setq org-gcal-down-days '30)
                                           ;for http400 error, open scratch and evaluate (org-gcal-request-token) using C-x C-e


   (defun my-open-calendar ()
     (interactive)
     (cfw:open-calendar-buffer
      :contents-sources
      (list
       (cfw:org-create-source "pale green")  ; orgmode source
   ;    (cfw:cal-create-source "light goldenrod") ; diary source
       ))) 
   (add-hook 'cfw:calendar-mode-hook (lambda () (visual-fill-column-mode 0)))
                                           ;   (setq calendar-daylight-savings-starts '(3 11 year))
                                           ;  (setq calendar-daylight-savings-ends: '(11 4 year))
   (setq calendar-week-start-day 1)

   (setq diary-file "~/Dropbox/Zettelkasten/diary")



#+END_SRC

#+RESULTS:
: ~/Dropbox/Zettelkasten/diary

  




* epub
#+begin_src emacs-lisp  :tangle yes

   (setq nov-post-html-render-hook  (lambda () (visual-line-mode 1)))
   (add-hook 'ereader-mode-hook (lambda () (visual-line-mode 1)))
   (add-hook 'nov-post-html-render-hook 'olivetti-mode)

#+end_src

#+RESULTS:
| olivetti-mode | (lambda nil (visual-line-mode 1)) |

* mu4e
[[file:~/.mbsyncrc::IMAPAccount gmail]]

#+BEGIN_SRC emacs-lisp :tangle yes

                                                       ; (use-package mu4e) 
                                                       ; (use-package mu4e-contrib)
               (require 'mu4e)
               (require 'org-mu4e)
               ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
   (setq org-mu4e-convert-to-html t)
               (setq mu4e-sent-messages-behavior 'delete)
               (setq message-kill-buffer-on-exit t)
               (setq mu4e-change-filenames-when-moving t)
               (setq mu4e-compose-format-flowed t)

               (setq mu4e-hide-index-messages t)
               ;; Call EWW to display HTML messages
                                                       ;(defun jcs-view-in-eww (msg)
                                                       ; (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

               ;; Arrange to view messages in either the default browser or EWW
               (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
                                                       ; (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

               ;; From Ben Maughan: Get some Org functionality in compose buffer
               (add-hook 'message-mode-hook 'turn-on-orgtbl)
                                                       ; (add-hook 'message-mode-hook 'turn-on-orgstruct++)

               (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
               (add-hook 'mu4e-view-mode-hook 'visual-fill-column-mode)

               (defun no-auto-fill ()
                 "Turn off auto-fill-mode."
                 (auto-fill-mode -1))


               (defun vcfm-off ()
                                                       ;turn off visual fill column mode
                 (visual-fill-column-mode nil))

               (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
               (add-hook 'mu4e-headers-mode-hook (lambda ()(visual-line-mode -1)))

               (setq mu4e-compose-dont-reply-to-self t)
               (setq mu4e-confirm-quit nil)
               (setq mu4e-display-update-status-in-modeline nil)
               (setq mu4e-index-lazy-check t)

      (require 'smtpmail)
         (setq message-send-mail-function 'smtpmail-send-it
               smtpmail-starttls-credentials
               '(("smtp.gmail.com" 587 nil nil))
               smtpmail-default-smtp-server "smtp.gmail.com"
               smtpmail-smtp-server "smtp.gmail.com"
               smtpmail-smtp-service 587
               smtpmail-debug-info t)

(add-to-list 'mu4e-bookmarks
  '( :name  "Big messages"
     :query "size:15M..500M"
     :key   ?b))
#+END_SRC
  
#+RESULTS:
| :name | Big messages         | :query | size:20M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:40M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:50M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:10M..500M                       | :key         |  98 |      |     |
| :name | Big messages         | :query | size:5M..500M                        | :key         |  98 |      |     |
| :name | inbox                | :query | maildir:/gmail/INBOX                 | :key         | 105 |      |     |
| :name | Unread messages      | :query | flag:unread AND maildir:/gmail/INBOX | :key         | 117 |      |     |
| :name | Today's messages     | :query | date:today..now                      | :key         | 116 |      |     |
| :name | Last 7 days          | :query | date:7d..now                         | :hide-unread |   t | :key | 119 |
| :name | Messages with images | :query | mime:image/*                         | :key         | 112 |      |     |
  
** message view

#+BEGIN_SRC emacs-lisp :tangle yes
                                              ;  (setq mu4e-attachment-dir "/home/betsy/Dropbox/Spring 2019/")

   ;; enable inline images
   ;; use imagemagick, if available
   (when (fboundp 'imagemagick-register-types)
     (imagemagick-register-types))

   (add-hook 'mu4e-compose-mode-hook
       (defun my-do-compose-stuff ()
          "My settings for message composition."
          (visual-line-mode)
          (org-mu4e-compose-org-mode)
              (use-hard-newlines -1)
          (flyspell-mode)))

      (setq shr-color-visible-luminance-min 50) 
      (setq shr-color-visible-distance-min 5)
                                              ;(setq mu4e-view-html-plaintext-ratio-heuristic 'most-positive-fixnum)
      (setq message-yank-prefix ""
            message-yank-empty-prefix ""
            message-yank-cited-prefix "")

      (setq w3m-default-desplay-inline-images t)
      (defun mu4e-action-view-in-w3m ()
        "View the body of the message in emacs w3m."
        (interactive)
        (w3m-browse-url (concat "file://"
                                (mu4e~write-body-to-html (mu4e-message-at-point t)))))


      ;; customize the reply-quote-string
      (setq message-citation-line-format "\n\nOn %a %d %b %Y at %R, %f wrote:\n")
      ;; choose to use the formatted string
      (setq message-citation-line-function 'message-insert-formatted-citation-line)


      (setq mu4e-view-scroll-to-next nil)

      (add-hook 'message-mode-hook 'visual-fill-column-mode)



#+END_SRC

#+RESULTS:
| visual-fill-column-mode | turn-on-orgtbl | org-contacts-setup-completion-at-point |

** headers view

 


#+BEGIN_SRC emacs-lisp :tangle yes
   (setq mu4e-headers-include-related nil)
   (setq mu4e-headers-fields
         '( (:human-date    .  15)    ;; alternatively, use :human-date
            (:flags         .   5)
            (:from          .  20)
            (:thread-subject       . 70 )
                                           ;             (:thread-subject       . 120 )
            )) 
   (setq org-mu4e-link-query-in-headers-mode nil)
   (setq mu4e-update-interval 300)
   (setq mu4e-use-fancy-chars nil)
   (setq mu4e-index-update-in-background t)
   (setq mu4e-view-prefer-html t)
   (setq mu4e-headers-skip-duplicates t)
   (setq mu4e-headers-auto-update t)
   (setq mu4e-view-show-addresses t)
   (setq mu4e-view-show-images t)
   (setq mu4e-headers-date-format "%x")
   (setq mu4e-headers-time-format "%H:%M")
#+END_SRC

#+RESULTS:
: %H:%M

** settings

#+BEGIN_SRC emacs-lisp :tangle yes

   ;; allow for updating mail using 'U' in the main view:
   (setq mu4e-get-mail-command "true")
                                           ;(setq mail-user-agent 'mu4e-user-agent)
   (use-package org-msg)
   (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
         org-msg-startup "hidestars indent inlineimages"
                                           ;	org-msg-greeting-fmt "\nHi *%s*,\n\n"
         org-msg-greeting-name-limit 3
         org-msg-text-plain-alternative t
         org-msg-signature "

    In solidarity,

    ,#+begin_signature
    -- *Betsy (she/they)* \\\\
    ,#+end_signature")
   (org-msg-mode)

#+END_SRC 

#+RESULTS:
: t

** folders

#+BEGIN_SRC emacs-lisp :tangle yes

 
   (setq mu4e-drafts-folder "/Drafts")
   (setq mu4e-sent-folder   "/Sent")
   (setq mu4e-trash-folder  "/Trash")
   (setq mu4e-refile-folder "/All")
   (setq mu4e-maildir "~/.maildir")
   (setq mu4e-attachment-dir "~/Dropbox/2021")
#+END_SRC 

#+RESULTS:
: ~/Dropbox/2021

  









* diminish
#+BEGIN_SRC emacs-lisp :tangle yes
     (require 'diminish)
   (diminish 'activity-watch-mode "aw")
   (diminish 'company-mode)
   (diminish 'helm-mode)
   (diminish 'visual-line-mode)
   (diminish 'org-edna-mode "ed")
   (diminish 'org-indent-mode)
   (diminish 'projectile-mode "prj")
   (diminish 'smartparens-mode)
(diminish 'org-roam-mode "rm")
#+END_SRC

#+RESULTS:
| rm |
