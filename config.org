:PROPERTIES:
:ID:       yqffv4x08ek0
:END:
#+auto_tangle: t

[[file:configoct2024.org]]

#+BEGIN_SRC emacs-lisp :tangle yes :results none

#+END_SRC


* Minimum Usability


#+BEGIN_SRC emacs-lisp :tangle yes
   
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq confirm-kill-emacs nil
            visible-bell nil
            inhibit-startup-screen t
            org-support-shift-select t
            ring-bell-function (quote ignore)
            split-width-threshold 100
            )

      (add-to-list 'default-frame-alist '(fullscreen . maximized))

      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)

      (delete-selection-mode) ;allows to delete selected text by typing
      (global-set-key (kbd "M-o") 'other-window)
     (setq org-special-ctrl-a/e (quote (t . t)))

    ;  (setq debug-on-error t)


       (use-package modus-themes)
    ;  (modus-themes-load-themes)
    ; (load-theme 'modus-vivendi t)
  ;(load-theme 'modus-vivendi-tinted t) 
  (load-theme 'modus-vivendi-deuteranopia t) 
  ;   (load-theme 'modus-vivendi-tritanopia t)



     (setq org-startup-indented t
           org-hide-emphasis-markers t
           org-startup-folded t
           org-ellipsis " Â»"
           org-hide-leading-stars t)

    (setq org-indirect-buffer-display 'current-window)


(setq confirm-kill-emacs 'y-or-n-p)
  
#+END_SRC

#+RESULTS:
: y-or-n-p


#+BEGIN_SRC emacs-lisp :tangle yes :results none
  (set-fringe-mode '(10 . 20))
  (set-face-attribute 'fringe nil :background "#000000")


#+END_SRC
 
* autosave/backup
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :init (progn
            (setq magit-repository-directories '("~/Dropbox/" ))))
  (setq global-auto-revert-mode t
        auto-save-interval 5)
  (auto-save-visited-mode 1)
  
  (add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))

  (setq vc-follow-symlinks t)
#+END_SRC

#+RESULTS:
: t

* file navigation

** helm
#+BEGIN_SRC emacs-lisp :tangle yes
 (use-package helm
    ;      :config (helm-mode +1)
          :bind ( ([f9] . helm-occur )
;("M-x"   . helm-M-x)
      ;           ([f3] . helm-buffers-list)       
       ;          ("<Hangul> x" . helm-M-x)
                
                 ))
#+END_SRC

#+RESULTS:
: helm-occur


** dired
#+begin_src  emacs-lisp :tangle yes
  ;; from https://protesilaos.com/codelog/2023-06-26-emacs-file-dired-basics/
    ;; When you first call `find-file' (C-x C-f by default), you do not
  ;; need to clear the existing file path before adding the new one.
  ;; Just start typing the whole path and Emacs will "shadow" the
  ;; current one.  For example, you are at ~/Documents/notes/file.txt
  ;; and you want to go to ~/.emacs.d/init.el: type the latter directly
  ;; and Emacs will take you there.
  (file-name-shadow-mode 1)

  ;; This works with `file-name-shadow-mode' enabled.  When you are in
  ;; a sub-directory and use, say, `find-file' to go to your home '~/'
  ;; or root '/' directory, Vertico will clear the old path to keep
  ;; only your current input.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

  ;; Do not outright delete files.  Move them to the system trash
  ;; instead.  The `trashed' package can act on them in a Dired-like
  ;; fashion.  I use it and can recommend it to either restore (R) or
  ;; permanently delete (D) the files.
  (setq delete-by-moving-to-trash t)

  ;; When there are two Dired buffers side-by-side make Emacs
  ;; automatically suggest the other one as the target of copy or rename
  ;; operations.  Remember that you can always use M-p and M-n in the
  ;; minibuffer to cycle through the history, regardless of what this
  ;; does.  (The "dwim" stands for "Do What I Mean".)
  (setq dired-dwim-target t)

  ;; Automatically hide the detailed listing when visiting a Dired
  ;; buffer.  This can always be toggled on/off by calling the
  ;; `dired-hide-details-mode' interactively with M-x or its keybindings
  ;; (the left parenthesis by default).
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  ;; Teach Dired to use a specific external program with either the
  ;; `dired-do-shell-command' or `dired-do-async-shell-command' command
  ;; (with the default keys, those are bound to `!' `&', respectively).
  ;; The first string is a pattern match against file names.  The
  ;; remaining strings are external programs that Dired will provide as
  ;; suggestions.  Of course, you can always type an arbitrary program
  ;; despite these defaults.
  (setq dired-guess-shell-alist-user
        '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open")
          ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mpv" "xdg-open")
  		(".*" "xdg-open")))


#+end_src

#+RESULTS:

** projectile
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
               :config
               (projectile-mode +1))

      ; (use-package helm-projectile
       ;   :bind    ([f5] . helm-projectile))

#+END_SRC

#+RESULTS:
: helm-projectile


** deft
[2022-06-13 Mon] deft has seemed to lag. disabling it to see if that has any impact. 
#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :ensure t
    :bind
    ([f8] . deft))
  (setq deft-directory "~/Dropbox/Zettelkasten/"
        deft-default-extension "org"
        deft-time-format " %b-%Y %H:%M"
        deft-use-filename-as-title t
        deft-new-file-format "%Y%b%d"
        deft-text-mode 'org-mode
        deft-recursive t
        deft-extensions '("org" "txt" "emacs" "bib" "ledger" "el" "tex")
        deft-auto-save-interval 15.0
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase))) 
  
  
  
  ;(add-hook 'after-init-hook 'deft)
  (add-hook 'deft-mode-hook #'visual-line-mode)
  
  
#+end_src

#+RESULTS:
| visual-line-mode |

* html2org
#+BEGIN_SRC emacs-lisp :tangle yes
(load "html2org")
(require 'html2org)

#+END_SRC

#+RESULTS:
: html2org

--> doesn't seem to work anymore
(defun kdm/html2org-clipboard ()
  "Convert clipboard contents from HTML to Org and then paste (yank)."
  (interactive)
  (kill-new (shell-command-to-string "xclip -o -t text/html | pandoc -f html -t json | pandoc -f json -t org --wrap=none"
                                     ))
  (yank))


* quelpa
#+BEGIN_SRC emacs-lisp :tangle yes :results none
   (use-package quelpa)
               (quelpa
                '(quelpa-use-package
                  :fetcher git
                  :url "https://github.com/quelpa/quelpa-use-package.git"))
               (require 'quelpa-use-package)
        
#+END_SRC



* scratch
#+BEGIN_SRC emacs-lisp  :tangle yes
  ;; Set the default mode of the scratch buffer to Org
  (setq initial-major-mode 'org-mode)
  ;; and change the message accordingly
  (setq initial-scratch-message "\
  # This buffer is for notes you don't want to save. You can use
  # org-mode markup (and all Org's goodness) to organise the notes.
  # If you want to create a file, visit that file with C-x C-f,
  # then enter the text in that file's own buffer.
   
  ")

   (use-package unkillable-scratch
    :config
    (unkillable-scratch 1))

#+END_SRC

* editing / movement

** smartparens
#+BEGIN_SRC emacs-lisp  :tangle yes :results none
  (use-package smartparens
    :ensure t
    :defer t
    :init
    (show-smartparens-global-mode 1))
  (smartparens-global-mode 1)
  (setq show-paren-style 'expression)

  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "_" "_" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))
  (sp-local-pair 'org-mode "+" "+" :actions '(wrap))
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "=" "=" :actions '(wrap))
  (sp-local-pair 'org-mode "-" "-" :actions '(wrap))
  (sp-pair "'" nil :actions :rem)
#+END_SRC



** delimiters
#+begin_src emacs-lisp :tangle yes
  

(defun select-text-in-delimiters ()
  "Select text between the nearest left and right delimiters."
  (interactive)
  (let (start end)
    (skip-chars-backward "^<>([{\"'")
    (setq start (point))
    (skip-chars-forward "^<>)]}\"'")
    (setq end (point))
    (set-mark start)))



#+end_src

#+RESULTS:
: select-text-in-delimiters



** avy

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy)
  (global-set-key (kbd "M-z") 'avy-goto-char)
  (global-set-key (kbd "C-;") 'avy-goto-line) 
#+END_SRC

#+RESULTS:
: avy-goto-line




** yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
  :demand t
  :bind (:map yas-minor-mode-map
         ("TAB" . nil)
         ("<tab>" . nil))
  :config
  (yas-global-mode))
      (setq yas-snippet-dirs '("~/Dropbox/emacs/.emacs.d/snippets/"
    ))

#+END_SRC

#+RESULTS:
| ~/Dropbox/emacs/.emacs.d/snippets/ |




* writing
** org weights mode
https://github.com/pinard/org-weights

#+BEGIN_SRC emacs-lisp :tangle yes
(autoload 'org-weights-mode "org-weights" nil t)
(define-key org-mode-map "\C-cow" 'org-weights-mode)

#+END_SRC

#+RESULTS:
: org-weights-mode

** flyspell


#+BEGIN_SRC emacs-lisp :tangle yes



  (use-package flyspell)
  (define-key flyspell-mode-map (kbd "C-.") nil)


  ;; Set $DICPATH to "$HOME/Library/Spelling" for hunspell. https://passingcuriosity.com/2017/emacs-hunspell-and-dictionaries/
(setenv
  "DICPATH"
  (concat (getenv "HOME") "/Documents/Spelling"))
;; Tell ispell-mode to use hunspell.
(setq
  ispell-program-name
  "/usr/bin/hunspell")
#+END_SRC

#+RESULTS:
: /usr/bin/hunspell

** org ref
#+BEGIN_SRC emacs-lisp :tangle yes :results none
  
  (use-package org-ref)
  (setq reftex-default-bibliography '("~/Dropbox/Zettelkasten/references.bib"))
  
  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/Dropbox/Zettelkasten/readings.org"
        org-ref-default-bibliography '("~/Dropbox/Zettelkasten/references.bib")
        org-ref-pdf-directory "~/Dropbox/Library/BIBTEX/"
        org-ref-prefer-bracket-links t
        )
#+END_SRC

** bibtex 
#+BEGIN_SRC emacs-lisp :tangle yes :results none

  
  (setq bibtex-completion-bibliography "~/Dropbox/Zettelkasten/references.bib"
        bibtex-completion-notes-path "~/Dropbox/Zettelkasten/readings.org")
  
  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))
  
  
                                          ;  (setq pdf-view-continuous nil)
  
                                          ;  (setq bibtex-autokey-year-title-separator "")
                                          ; (setq bibtex-autokey-titleword-length 0)
  
  
(setq bibtex-completion-notes-template-one-file "\n* ${author} (${year}). /${title}/. ${journal}. \n:PROPERTIES:\n:Custom_ID: ${=key=}\n:ID: ${=key=}\n:CITATION: ${author} (${year}). /${title}/. /${journal}/, /${volume}/(${number}), ${pages}. ${publisher}. \n:DATE_ADDED: %t\n:NOTER_DOCUMENT: ../Library/BIBTEX/ \n:END:")
  
  (setq bibtex-maintain-sorted-entries t)

 
  

;(setq org-cite-global-bibliography '("c:/Users/byoon/Dropbox (Personal)/Zettelkasten/references.bib" "/home/betsy/Dropbox/Zettelkasten/references.bib"))
#+END_SRC



#+RESULTS:
: t


https://lucidmanager.org/productivity/emacs-bibtex-mode/
there's a few other things here 
#+begin_src emacs-lisp :tangle yes
  
   
    ;; Spell checking (requires the ispell software)
  (add-hook 'bibtex-mode-hook 'flyspell-mode)
  
  ;; Change fields and format
  (setq bibtex-user-optional-fields '(("keywords" "Keywords to describe the entry" "")
                                      ("file" "Link to document file." ":"))
        bibtex-align-at-equal-sign t)
  
    ;; BibLaTeX settings
  ;; bibtex-mode
;  (setq bibtex-dialect 'biblatex)
  
  
  
#+end_src


#+begin_src emacs-lisp :tangle yes
  (setq bibtex-autokey-additional-names "etal"
        bibtex-autokey-name-separator "-"
        bibtex-autokey-name-year-separator "_"
        bibtex-autokey-names 2
        bibtex-autokey-titleword-length 0
              bibtex-autokey-titleword-separator ""
      bibtex-autokey-year-length 4
    bibtex-autokey-name-case-convert-function 'capitalize
        )

#+end_src

** citar
#+begin_src emacs-lisp :tangle yes
  (use-package citar
    :custom
    (citar-bibliography '("~/Dropbox/Zettelkasten/references.bib")))

  (use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+end_src

#+RESULTS:
: t

* keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
        (global-set-key (kbd "C-c C-x C-o") 'org-clock-out)
        (global-set-key (kbd "C-c <f2>") 'org-clock-out)
    ;    (global-unset-key (kbd "C-v"))
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
        (global-set-key (kbd "<f1>") 'org-capture)
        (global-set-key (kbd "C-c C-x C-j") 'org-clock-goto)
        (define-key org-mode-map (kbd "C-a") 'org-beginning-of-line)
        (define-key org-mode-map (kbd "C-e") 'org-end-of-line)
        (define-key org-mode-map (kbd "C-.") 'org-todo)
  ;     (define-key flyspell-mode-map (kbd "C-.") 'org-todo)
        (bind-keys
         ("C-c r" . org-clock-report)
         ("C-c l" . org-store-link)
         ("C-c C-l" . org-insert-link)
         ("C-c b" . list-bookmarks)
         ("C-a" . org-beginning-of-line) 
         ("C-e" . end-of-line) 
         ("C-k" . org-kill-line)
         ("M->" . end-of-buffer)
         ("C->" . end-of-buffer) ; necessary b/c for some reason emacs in kde plasma doesn't seem to recognize M-< and only see is it as M-.
         ("C-<" . beginning-of-buffer)    ; necessary b/c for some reason emacs in kde plasma doesn't seem to recognize M-< and only see is it as M-.
         ("C-."   . org-todo)
         ("C-x /" . shrink-window-horizontally)
         ("C-x ." . org-archive-subtree-default)
         ("C-c 5" . yas-insert-snippet)
      
         ([f1] . org-capture)
         ([f2] . org-clock-in)
         ;;f3 is helm
         ([f4] . org-refile)
         ;;f5 is projectile
         ([f6] . helm-bibtex-with-local-bibliography)
         ([f7] . org-agenda)
         ;;f8 is deft
                                                ; ([f10] . org-tree-to-indirect-buffer)
         ([f11] . org-id-goto)
         ([f12] . bury-buffer)     )


        (global-set-key (kbd "<f10>") (lambda ()
                                        (interactive)
                                        (let ((current-prefix-arg '(4)))
                                          (call-interactively #'org-tree-to-indirect-buffer))))


#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (let ((current-prefix-arg '(4))) (call-interactively #'org-tree-to-indirect-buffer)) |

#+BEGIN_SRC emacs-lisp :tangle yes :results none
  
  
  (define-key key-translation-map (kbd "C-c <up>") (kbd "â"))
  (define-key key-translation-map (kbd "C-c <down>") (kbd "â"))
  (define-key key-translation-map (kbd "C-c =") (kbd "â "))
  (define-key key-translation-map (kbd "C-c <right>") (kbd "â"))
  (define-key key-translation-map (kbd "C-c m") (kbd "â"))
  (define-key key-translation-map (kbd "C-_") (kbd "â"))
  (define-key key-translation-map (kbd "C-c d") (kbd "Î"))
  (define-key key-translation-map (kbd "C-c z")  (kbd "â´"))
#+END_SRC

#+RESULTS:
: [8756]

* org capture
#+BEGIN_SRC emacs-lisp :tangle yes

      (setq org-capture-templates
            '(
              ("a" "current activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** %? \n" :clock-in t :clock-keep t :kill-buffer nil)

              ("c" "calendar" entry (file "~/Dropbox/Zettelkasten/inbox.org" ) "** %^{EVENT}\n%^t\n%a\n%?")

              ("e" "emacs log" item (id "config") "%U %a %?" :prepend t) 
              ("f" "Anki Flashcards")
              ("fb" "Anki basic" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic \n:ANKI_DECK: ìì ë\n:END:\n** Front\n%^{Front}\n** Back\n%^{Back}%?")

              ("fc" "Anki cloze" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Default\n:END:\n** Text\n%^{Front}%?\n** Extra")

              ("j" "journal" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** journal :journal: \n%U  \n%?\n\n"   :clock-in t :clock-resume t :clock-keep nil :kill-buffer nil :append t ) 
    ;removed "scheduled" from todo entries
         ;added it back in [2022-07-09 Sat]
              ("t" "todo" entry (file "~/Dropbox/Zettelkasten/inbox.org") "* TODO %? \nSCHEDULED: %t \n%a\n" :prepend nil)
     ("r" "research consultation" entry (file+headline "~/Dropbox/Zettelkasten/baruch.org" "*Consultations*") "*** TODO \n:PROPERTIES:\n:PROFESSOR:\n:COURSE_NUMBER:\n:COURSE_TITLE:\n:END:\n
  - [ ] email student\n- [ ] send calendar invite\n- [ ] review materials\n- [ ] prep consult\n- [ ] report consult\n\n%? \n**** template \n\nYour requested research consultation

  Dear
  
  Thanks for reaching out to the library to request a consultation!

  Please send me your syllabus and assignment description (if not included in the syllabus).

  Please also let me know if you've done any research on this yet, and if so, what databases you looked at, what you found, and what you'd like to find during our session. If you haven't done any research yet, that's fine! I just want to make sure I don't cover anything you've already done.

  Would ____ work for you to meet? If yes, I will send a calendar invite with the zoom link. If not, please propose a few alternative times.

  Please note that until a calendar invite is sent, this appointment is not confirmed.

  Talk soon!" :clock-in t :prepend t :clock-keep t)
                ("w" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
               "* %a \nSCHEDULED: %t %?\n%:initial" )
              ("x" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
               "* TODO %? \nSCHEDULED: %t\n%a\n\n%:initial" )
              ("p" "org-protocol" table-line (id "pens")
               "|%^{Pen}|%A|%^{Price}|%U|" )

              ("y" "org-protocol" item (id "resources")
               "[ ] %a %:initial" )

              ))



#+END_SRC

#+RESULTS:
| a         | current activity | entry       | (file+olp+datetree ~/Dropbox/Zettelkasten/journal.org) | ** %?        |     |
| :clock-in | t                | :clock-keep | t                                                      | :kill-buffer | nil |
| c         | calendar         | entry       | (file ~/Dropbox/Zettelkasten/inbox.org)                | ** %^{EVENT} |     |


* org-protocol
#+BEGIN_SRC emacs-lisp :tangle yes
  
  (server-start)
  (require 'org-protocol)
  (require 'org-protocol-capture-html)
  (setq org-protocol-default-template-key "w")
  
  
#+END_SRC

#+RESULTS:
: w





* org-todo

#+begin_src emacs-lisp :tangle yes :results none
(setq org-todo-keywords
      (quote
       ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"  "x(c)" )
        (type   "BLOCK(b)" "HABIT(h)" "PROJ(p)"  "WAIT(w)" "|" "DONE(d)")
	(sequence   "TO-READ(r)" "NOTES(o)" "|" "DONE(d)")
	)))

#+end_src
#+begin_src emacs-lisp :tangle yes :results none
(setq org-enforce-todo-dependencies t
      org-clock-out-when-done t
      )

(setq org-log-into-drawer t)



(setq org-todo-keyword-faces
      '(("WAIT" :weight regular :underline nil :inherit org-todo :foreground "yellow")
                                        ;          ("TODO" :weight regular :underline nil :inherit org-todo :foreground "#89da59")
        ("TODO" :weight regular :underline nil :inherit org-todo )
	("BLOCK" :weight bold :underline t :inherit org-todo :box (:line-width (2 . 2)) :foreground "green yellow")
        ("NEXT" :weight regular :underline nil :inherit org-todo :foreground "lime green")
;        ("IN-PROG" :weight bold :underline nil :inherit org-todo :foreground "light slate blue")
         ("HABIT" :weight bold :underline nil :inherit org-todo :foreground "forestgreen")
        ("PROJ" :foreground "magenta")
	("NOTES" :foreground "orange red" :underline t)
		("TO-READ" :foreground "misty rose" :weight regular :underline t)
        ("HOLD" :weight bold :underline nil :inherit org-todo :foreground "#336b87")))


(use-package org-edna)
(org-edna-mode 1)
(setq org-log-done 'time)

#+end_src


* org-refile and archiving
:LOGBOOK:
CLOCK: [2025-07-06 Sun 05:56]--[2025-07-06 Sun 06:01] =>  0:05
CLOCK: [2021-09-06 Mon 15:03]--[2021-09-06 Mon 15:04] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-directory "~/Dropbox/Zettelkasten/" org-default-notes-file
      "~/Dropbox/Zettelkasten/inbox.org" org-archive-location
      "~/Dropbox/Zettelkasten/journal.org::datetree/" org-contacts-files (quote
      ("~/Dropbox/Zettelkasten/contacts.org")) ) (setq org-archive-reversed-order nil
      org-reverse-note-order t org-refile-use-cache t org-refile-allow-creating-parent-nodes t
      org-refile-use-outline-path 'file org-outline-path-complete-in-steps nil )

(setq org-refile-targets '( ("~/Dropbox/Zettelkasten/journal.org" :maxlevel . 5)
                           ("~/Dropbox/Zettelkasten/events.org" :maxlevel . 3)
                           ("~/Dropbox/Zettelkasten/inbox.org" :maxlevel . 2)
                           ("~/Dropbox/Zettelkasten/readings.org" :maxlevel . 3)
                           ("~/Dropbox/Zettelkasten/contacts.org" :maxlevel . 1) ;
                           ("~/Dropbox/Zettelkasten/projects.org" :maxlevel . 1)
                           ("~/Dropbox/Zettelkasten/ndd.org" :maxlevel . 3)
                           ("~/Dropbox/Zettelkasten/korean.org" :maxlevel . 1)
			   ("~/Dropbox/Zettelkasten/zettles/zettles.org" :maxlevel . 1)
			   ("~/Dropbox/Zettelkasten/instruction.org" :maxlevel . 2)
			   ("~/Dropbox/emacs/config.org" :maxlevel . 2)
                           ("~/Dropbox/Zettelkasten/habits.org" :maxlevel . 1)
                           ("~/Dropbox/Zettelkasten/baruch.org" :maxlevel . 5)
 ;                            ("~/Dropbox/Zettelkasten/Scholarship/sanctions.org" :maxlevel . 5)			   
                           ("~/Dropbox/Zettelkasten/personal.org" :maxlevel . 2)
			   ("~/Dropbox/Zettelkasten/Scholarship/slow.org" :maxlevel . 3)
                           ("~/Dropbox/Zettelkasten/lis.org" :maxlevel . 2)
                           ("~/Dropbox/Zettelkasten/recipes.org" :maxlevel . 2)
                           ("~/Dropbox/Zettelkasten/sysadmin.org" :maxlevel . 1)
			   ("~/Dropbox/Zettelkasten/scholarship.org" :maxlevel . 5)
                           ("~/Dropbox/Zettelkasten/editing.org" :maxlevel . 2)
                           ("~/Dropbox/Zettelkasten/hold.org" :maxlevel . 1)
                           ("~/Dropbox/Zettelkasten/quotes.org" :maxlevel . 1)
;                           ("~/Dropbox/Baruch/Scholarship/OER-origins/open.org" :maxlevel . 5)
                           ("~/Dropbox/Zettelkasten/zettels.org" :maxlevel . 2) )


      )

(defun my-org-refile-cache-clear () (interactive) (org-refile-cache-clear)) (define-key org-mode-map
  (kbd "C-0 C-c C-w") 'my-org-refile-cache-clear)




                                        ; Refile in a single go

                                        ;  (global-set-key (kbd "<f4>") 'org-refile)


(setq org-id-link-to-org-use-id (quote create-if-interactive) org-id-method (quote org)
      org-return-follows-link t org-link-keep-stored-after-insertion nil org-goto-interface (quote
      outline-path-completion) org-clock-mode-line-total 'current)

                                        ;   (add-hook 'org-mode-hook (lambda ()
                                        ;   (org-sticky-header-mode 1)))


(setq global-visible-mark-mode t)


#+END_SRC

#+RESULTS:
: t










* org-noter

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package org-noter
;      org-noter-default-notes-file-names "~/Dropbox/Zettelkasten/readings.org"
      )
(setq org-noter-notes-search-path "~/Dropbox/Zettelkasten/")
(setq org-noter-highlight-selected-text t)
(setq org-noter-insert-note-no-questions nil)
(setq org-noter-default-notes-file-names "readings.org")
(setq org-noter-always-create-frame nil)
(setq org-noter-notes-window-location 'other-frame)
(setq org-noter-default-heading-title "$p$: ")
(setq org-noter-kill-frame-at-session-end nil)
#+END_SRC

#+RESULTS:

  (use-package org-noter
    :ensure t
    :defer t
    :config
    (setq org-noter-property-doc-file "INTERLEAVE_PDF"
          org-noter-property-note-location "INTERLEAVE_PAGE_NOTE"
    
          org-noter-notes-search-path "~/Dropbox/Zettelkasten"
          ;;org noter windows
          org-noter-always-create-frame nil
          org-noter-notes-window-location (quote horizontal-split)
          org-noter-doc-split-fraction (quote (0.75 . 0.75))
          org-noter-kill-frame-at-session-end nil
  
          org-noter-auto-save-last-location t
          org-noter-default-heading-title "$p$: "
          org-noter-insert-note-no-questions nil
          org-noter-insert-selected-text-inside-note t
          ))



#+RESULTS:







* minibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
      ;; The `vertico' package applies a vertical layout to the minibuffer.
      ;; It also pops up the minibuffer eagerly so we can see the available
      ;; options without further interactions.  This package is very fast
      ;; and "just works", though it also is highly customisable in case we
      ;; need to modify its behaviour.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:cff33514-d3ac-4c16-a889-ea39d7346dc5
      (use-package vertico
        :ensure t
        :bind ("C-z" . vertico-quick-jump)
         :hook (after-init . vertico-mode)
        :config
        (setq vertico-cycle t)
        (setq vertico-resize nil)
        (vertico-mode 1))

      ;; The `marginalia' package provides helpful annotations next to
      ;; completion candidates in the minibuffer.  The information on
      ;; display depends on the type of content.  If it is about files, it
      ;; shows file permissions and the last modified date.  If it is a
      ;; buffer, it shows the buffer's size, major mode, and the like.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:bd3f7a1d-a53d-4d3e-860e-25c5b35d8e7e
      (use-package marginalia
        :ensure t
        :config
        (marginalia-mode 1))

      ;; The `orderless' package lets the minibuffer use an out-of-order
      ;; pattern matching algorithm.  It matches space-separated words or
      ;; regular expressions in any order.  In its simplest form, something
      ;; like "ins pac" matches `package-menu-mark-install' as well as
      ;; `package-install'.  This is a powerful tool because we no longer
      ;; need to remember exactly how something is named.
      ;;
      ;; Note that Emacs has lots of "completion styles" (pattern matching
      ;; algorithms), but let us keep things simple.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2
      (use-package orderless
        :ensure t
        :config
        (setq completion-styles '(orderless basic)))

  ;; The `consult' package provides lots of commands that are enhanced
  ;; variants of basic, built-in functionality.  One of the headline
  ;; features of `consult' is its preview facility, where it shows in
  ;; another Emacs window the context of what is currently matched in
  ;; the minibuffer.  Here I define key bindings for some commands you
  ;; may find useful.  The mnemonic for their prefix is "alternative
  ;; search" (as opposed to the basic C-s or C-r keys).
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d
        (use-package consult
        :ensure t
        :bind (;; A recursive grep
               ("M-s M-g" . consult-grep)
               ;; Search for files names recursively
               ("M-s M-f" . consult-find)
  	     ([f5] . consult-find)
               ;; Search through the outline (headings) of the file
               ("M-s M-o" . consult-outline)
               ;; Search the current buffer
               ("M-s M-l" . consult-line)
               ;; Switch to another buffer, or bookmarked file, or recently
               ;; opened file. 
      ;;         ("M-s M-b" . consult-buffer)
    	 ([f3] . consult-buffer)
    	       ))


    ;; The `embark' package lets you target the thing or context at point
      ;; and select an action to perform on it.  Use the `embark-act'
      ;; command while over something to find relevant commands.
      ;;
      ;; When inside the minibuffer, `embark' can collect/export the
      ;; contents to a fully fledged Emacs buffer.  The `embark-collect'
      ;; command retains the original behaviour of the minibuffer, meaning
      ;; that if you navigate over the candidate at hit RET, it will do what
      ;; the minibuffer would have done.  In contrast, the `embark-export'
      ;; command reads the metadata to figure out what category this is and
      ;; places them in a buffer whose major mode is specialised for that
      ;; type of content.  For example, when we are completing against
      ;; files, the export will take us to a `dired-mode' buffer; when we
      ;; preview the results of a grep, the export will put us in a
      ;; `grep-mode' buffer.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995
      (use-package embark
        :ensure t
        :bind (("C-." . embark-act)
               :map minibuffer-local-map
               ("C-c C-c" . embark-collect)
               ("C-c C-e" . embark-export)))

      ;; The `embark-consult' package is glue code to tie together `embark'
      ;; and `consult'.
      (use-package embark-consult
        :ensure t)

      ;; The `wgrep' packages lets us edit the results of a grep search
      ;; while inside a `grep-mode' buffer.  All we need is to toggle the
      ;; editable mode, make the changes, and then type C-c C-c to confirm
      ;; or C-c C-k to abort.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
      (use-package wgrep
        :ensure t
        :bind ( :map grep-mode-map
                ("e" . wgrep-change-to-wgrep-mode)
                ("C-x C-q" . wgrep-change-to-wgrep-mode)
                ("C-c C-c" . wgrep-finish-edit)))

      ;; The built-in `savehist-mode' saves minibuffer histories.  Vertico
      ;; can then use that information to put recently selected options at
      ;; the top.
      ;;
      ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:25765797-27a5-431e-8aa4-cc890a6a913a
      (savehist-mode 1)

      ;; The built-in `recentf-mode' keeps track of recently visited files.
      ;; You can then access those through the `consult-buffer' interface or
      ;; with `recentf-open'/`recentf-open-files'.
      ;;
      ;; I do not use this facility, because the files I care about are
      ;; either in projects or are bookmarked.
      (recentf-mode 1)
    (setq recentf-max-menu-items 30)
#+END_SRC

#+RESULTS:
: 30



* mode line format
:LOGBOOK:
CLOCK: [2021-06-08 Tue 13:51]--[2021-06-08 Tue 14:06] =>  0:15
:END:
#+begin_src emacs-lisp :tangle yes
 
    (setq-default mode-line-format '("%e"   mode-line-front-space
                                   mode-line-mule-info ;;file info and time
                                   mode-line-modified ;; shows if the file has been modified
                                   mode-line-misc-info ;; shows a bunch of stuff
                                   mode-line-remote
                                   mode-line-frame-identification mode-line-buffer-identification  "   " mode-line-position
                                   (vc-mode vc-mode)
                                   "  " mode-line-modes  mode-line-end-spaces)
                )
  (display-time-mode 1)
#+end_src

#+RESULTS:
: t

  (setq-default mode-line-format '("%e"   mode-line-front-space
                                   mode-line-mule-info ;;file info and time
                                   mode-line-modified ;; shows if the file has been modified
                                   mode-line-misc-info ;; shows a bunch of stuff
                                   mode-line-remote
                                   mode-line-frame-identification mode-line-buffer-identification  "   " mode-line-position
                                   (vc-mode vc-mode)
                                   "  " mode-line-modes  mode-line-end-spaces)
                )





* org-clock

** norang punch in/out
#+begin_src emacs-lisp :tangle yes
  (setq org-clock-out-remove-zero-time-clocks t)


;;http://doc.norang.ca/org-mode.html#ClockingIn
;;
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;

;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
;(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
;;(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))


;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)

  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  
#+end_src

#+RESULTS:
| bh/clock-out-maybe |

** org-mru

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-mru-clock
    :bind     ("M-<f2>" . org-mru-clock-in)
    :config
    (setq org-mru-clock-how-many 80)
    (setq org-mru-clock-keep-formatting t)
    )
  
  (setq org-clock-mode-line-total 'current)
   (use-package org-clock-split)
#+END_SRC

#+RESULTS:
: current


** chronos
#+begin_src emacs-lisp :tangle yes

    (use-package org-alert)

    (setq org-alert-interval 300 ;check agenda every 5 minutes
        org-alert-notify-cutoff 10 ;notify 10 min before event
        org-alert-notify-after-event-cutoff 10) ;stop notifying 10 min after
      (use-package chronos
        :config
        (setq chronos-expiry-functions '(chronos-shell-notify
                                         chronos-dunstify
                                         chronos-buffer-notify
                                         ))
        (setq chronos-notification-wav "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")
        )
      (use-package helm-chronos
        :config
        (setq helm-chronos-standard-timers
              '(
                ;;intermittent fasting
                "=13:00/end fast + =21:00/begin fast"
  "0:19:30/vineyard"
  "0:14:30/lights"
                ))

        )

          (setq chronos-shell-notify-program "mpv"
              chronos-shell-notify-parameters '("~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")


    )
#+end_src

#+RESULTS:
| ~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav |

** org-clock-convenience
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-clock-convenience
    :ensure t
    :bind (:map org-agenda-mode-map
     	   ("<S-up>" . org-clock-convenience-timestamp-up)
     	   ("<S-down>" . org-clock-convenience-timestamp-down)
     	 ;  ("Ã¶" . org-clock-convenience-fill-gap)
     ;	   ("Ã©" . org-clock-convenience-fill-gap-both)
  	   ))
#+END_SRC

#+RESULTS:
: org-clock-convenience-timestamp-down



** org-pomodoro
:PROPERTIES:
:ID:       pomodoro
:END:
:LOGBOOK:
CLOCK: [2021-10-18 Mon 10:47]--[2021-10-18 Mon 10:47] =>  0:00
CLOCK: [2021-05-04 Tue 11:33]--[2021-05-04 Tue 12:02] =>  0:29
CLOCK: [2021-05-04 Tue 10:21]--[2021-05-04 Tue 10:22] =>  0:01
CLOCK: [2021-05-04 Tue 10:18]--[2021-05-04 Tue 10:19] =>  0:01
CLOCK: [2021-04-30 Fri 12:07]--[2021-04-30 Fri 12:09] =>  0:02
CLOCK: [2021-04-30 Fri 12:06]--[2021-04-30 Fri 12:07] =>  0:01
CLOCK: [2021-04-30 Fri 12:03]--[2021-04-30 Fri 12:04] =>  0:01
CLOCK: [2021-04-30 Fri 11:58]--[2021-04-30 Fri 12:00] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes


      ;  (use-package pomm)
        (use-package org-pomodoro)
      (setq org-pomodoro-audio-player "/usr/bin/mpv")
        (setq org-pomodoro-ticking-sound-p nil)
        (setq org-pomodoro-finished-sound-p t) ;i couldn't remember why this is nil [2021-10-16 Sat]:-- this is nil b/c the short break sound and long break sound signal the end of the pomodoro
        (setq org-pomodoro-overtime-sound "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
        (setq org-pomodoro-short-break-sound "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
        (setq org-pomodoro-long-break-sound  "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
        (setq org-pomodoro-finished-sound  "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
;(setq org-pomodoro-ticking-sound "/home/betsy/emacs.d/sms-alert-1-daniel_simon.wav")
                                          ;  (setq org-pomodoro-ticking-sound "/home/betsy/emacs.d/tick.wav")
      ;  (setq org-pomodoro-ticking-sound "/home/betsy/emacs.d/elpa/org-pomodoro-20220318.1618/resources/tick.wav")
    (setq org-pomodoro-start-sound "/home/betsy/.emacs.d/tick.wav")
  (setq org-pomodoro-start-sound-p t)
        (setq org-pomodoro-keep-killed-pomodoro-time t)
        (setq org-pomodoro-manual-break t)
        (setq org-pomodoro-clock-break t)
        (setq org-pomodoro-ticking-frequency 1)
        (setq org-pomodoro-ticking-sound-states '(:pomodoro :overtime))
        (setq org-pomodoro-length 25
              org-pomodoro-short-break-length 5)

#+end_src

#+RESULTS:
: 5
 (setq org-pomodoro-length 25
          org-pomodoro-short-break-length 5)
************
* org-tag
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-tag-alist '(
                    

                        (:startgroup . nil)
  		      ("quick" . ?q)
                        (:endgroup . nil)

                        (:startgroup . nil)
                        ("dept" . ?d)
  		      ("marxe" . ?m)
                        ("service" . ?v)
  		      ("instr" . ?i)
                        ("schol" . ?s)
                        ("tenure" . ?t)
                        (:endgroup . nil)

                        (:startgroup . nil)
                        ("@phone" . ?p)
                        (:endgroup . nil)


  		      
                        ))



  (setq org-tags-column -77)
  (setq org-complete-tags-always-offer-all-agenda-tags nil)

#+END_SRC

#+RESULTS:
    (:startgroup . nil)
                        ("ndd" . ?n)
                        ("health" . ?m)
                        ("baruch" . ?b)
                        ("finances" . ?i)
                        ("sysadmin" . ?y)
                        ("home" . ?h)
                        (:endgroup . nil)
          ("lc" . ?e)
                        ("tongsol" . ?g)
                        ("keep" . ?k)
                        ("archives" . ?v) 
           ("schol" . ?s)
                        ("lis" . ?l)
                         (:startgroup . nil)
                         ("admin" . ?a)
                         ("lookup" . ?p)
                         ("research" . ?r)
                         ("process" . ?c)
                         ("write" . ?w)
                         ("read" . ?d)
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("focus" . ?f)
                         ("quick" . ?q)
                         ("analog" . ?g)
                         (:endgroup . nil)

#+begin_src emacs-lisp :tangle no
  (setq org-tag-alist '(  ("NOW" . ?n) ("workflow" . ?w)
                      (:startgroup . nil)
                      ("SHALLOW" . ?s) ("DEEP" . ?d) ("HOME" . ?h) 
                      (:endgroup . nil)
                      (:startgroup . nil)
                      ("#necessary" . ?c) ("#wouldbenice" . ?b)
                      (:endgroup . nil)
                      (:startgroup . nil)
                      ("@timely". ?t) ("@nottimely" . ?e)
                      (:endgroup . nil)
                     
                      ))



  

#+end_src
#+RESULTS:
: ((:startgroup) (quick . 113) (:endgroup))

* org-list checklists
#+begin_src emacs-lisp :tangle yes :results none
   (setq org-list-demote-modify-bullet
         '(("+" . "-") ("-" . "+") ))

   (defun my/org-checkbox-todo ()
     "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
     (let ((todo-state (org-get-todo-state)) beg end)
       (unless (not todo-state)
         (save-excursion
           (org-back-to-heading t)
           (setq beg (point))
           (end-of-line)
           (setq end (point))
           (goto-char beg)
           (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                  end t)
               (if (match-end 1)
                   (if (equal (match-string 1) "100%")
                       (unless (string-equal todo-state "DONE")
                         (org-todo 'done))
                     (unless (string-equal todo-state "â¶")
                       (org-todo 'todo)))
                 (if (and (> (match-end 2) (match-beginning 2))
                          (equal (match-string 2) (match-string 3)))
                     (unless (string-equal todo-state "DONE")
                       (org-todo 'done))
                   (unless (string-equal todo-state "â¶")
                     (org-todo 'todo)))))))))

   (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+end_src



#+begin_src emacs-lisp :tangle yes

;to fontify done checkbox items
(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
 'append)


 (set-face-attribute 'org-checkbox nil
		     :foreground "pale green")
#+end_src

#+RESULTS:

* anki
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package anki-editor
  :after org
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t)
  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
  #+END_SRC

  #+RESULTS:
  | anki-editor-reset-cloze-number |
  :after org

  ; Reset cloze-number after each capture.

  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number)
  #+RESULTS:





  
* org-auto-tangle
#+BEGIN_SRC emacs-lisp :tangle yes
                (use-package org-auto-tangle
                  :hook (org-mode . org-auto-tangle-mode))
 
#+END_SRC

#+RESULTS:


(add-hook 'org-mode-hook 'org-auto-tangle-mode) = :hook (org-mode . org-auto-tangle-mode)


* org-export
#+BEGIN_SRC emacs-lisp :tangle yes :results none
   (setq org-html-head "<link rel=\"stylesheet\" href=\"\\home\\betsy\\Dropbox\\Zettelkasten\\css\\tufte.css\" type=\"text/css\" />")
    (setq org-agenda-export-html-style "/home/betsy/Dropbox/Zettelkasten/css/tufte.css")
  (setq org-export-with-toc nil)
  (setq org-export-initial-scope 'subtree)
    (setq org-export-with-section-numbers nil)
#+END_SRC


* org-agenda
(setq org-agenda-prefix-format
'((agenda . " %i %-12:c%?-12t% s")
(todo . " %i %-5:c")
(tags . " %i %-12:c")
(search . " %i %-12:c")))

** agenda settings
#+begin_src emacs-lisp :tangle yes
                   (add-hook 'org-agenda-mode-hook (lambda ()
                                                         (visual-line-mode
                                                         -1)
                                                         (toggle-truncate-lines
                                                         1)))


                     (setq org-agenda-overriding-columns-format "%40ITEM
                        %4EFFORT %4CLOCKSUM %16SCHEDULED %16DEADLINE ")
 (setq org-global-properties '(("EFFORT_ALL" . "0:05 0:10 0:15 0:20 0:25 0:30 0:35 0:40 0:45 0:50 0:55 0:60")))


                   (setq org-agenda-files '(
  "~/Dropbox/Zettelkasten/Scholarship/slow.org"
       "~/Dropbox/Zettelkasten/Scholarship/sanctions.org"
     "~/Dropbox/Zettelkasten/recipes.org"
 ;    "~/Dropbox/Zettelkasten/zettels.org"
  "~/Dropbox/Zettelkasten/contacts.org"
      "~/Dropbox/Zettelkasten/inbox.org"
          "~/Dropbox/Zettelkasten/sysadmin.org"
	  "~/Dropbox/Zettelkasten/readings.org"
     "~/Dropbox/Zettelkasten/events.org"
     "~/Dropbox/Zettelkasten/editing.org"
     "~/Dropbox/Zettelkasten/instruction.org"
     "~/Dropbox/Zettelkasten/scholarship.org"
     "~/Dropbox/Zettelkasten/lis.org"
     "~/Dropbox/Zettelkasten/personal.org"
   "~/Dropbox/Zettelkasten/habits.org"
   "~/Dropbox/Zettelkasten/journal.org"
"~/Dropbox/Zettelkasten/readings.org"
     "~/Dropbox/Zettelkasten/ndd.org"
;     "~/Dropbox/Zettelkasten/time.org"
     "~/Dropbox/Zettelkasten/korean.org"
     "~/Dropbox/Zettelkasten/baruch.org"
     )) 
    


                   (setq org-agenda-skip-scheduled-if-done nil
                         org-agenda-skip-deadline-if-done t
                         org-agenda-skip-timestamp-if-done t
                         org-agenda-skip-deadline-prewarning-if-scheduled t )

                   (setq org-agenda-clockreport-parameter-plist (quote (:link
                         t :maxlevel 4 :narrow 30 :tcolumns 1 :indent t :tags
                         nil :hidefiles nil :fileskip0 t)))

                   (setq org-clock-report-include-clocking-task t) (setq
                   org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%
                   s") (todo . " %i %-12:c") (tags . " %i %-12:c") (search
                   . " %i %-12:c")))

                   (setq org-agenda-with-colors t org-agenda-start-on-weekday
                         nil ;; this allows agenda to start on current day
                         org-agenda-current-time-string "â¸â¸â¸â¸â¸"
                         org-agenda-start-with-clockreport-mode t
                         org-agenda-dim-blocked-tasks 'invisible
                         org-agenda-window-setup 'only-window )


                   (setq org-agenda-format-date (lambda (date) (concat
                         "\n---------------------------------\n"
                         (org-agenda-format-date-aligned date))))


                 (setq org-agenda-sticky t)

                     ;this makes it so that habits show up in the time grid
                     (setq org-agenda-sorting-strategy '((agenda time-up
                     priority-down category-keep) (todo priority-down
                     category-keep) (tags priority-down category-keep)
                     (search category-keep)) )

#+end_src

#+RESULTS:
| agenda | time-up       | priority-down | category-keep |
| todo   | priority-down | category-keep |               |
| tags   | priority-down | category-keep |               |
| search | category-keep |               |               |




** org-super-agenda [0/0]
:LOGBOOK:
CLOCK: [2021-10-13 Wed 17:03]--[2021-10-13 Wed 17:03] =>  0:00
:END:
                
#+begin_src emacs-lisp :tangle yes :results none
  (use-package org-super-agenda)
  (org-super-agenda-mode 1)
   (setq org-super-agenda-mode 1)

  
            #+end_src




            
               ("g" "all UNSCHEDULED NEXT|TODAY|IN-PROG"
           ((agenda "" ((org-agenda-span 2)
                        (org-agenda-clockreport-mode nil)))
            (todo "NEXT|TODAY|IN-PROG"))
           ((org-agenda-todo-ignore-scheduled t)))
                
#+BEGIN_SRC emacs-lisp :tangle no  :results none
 
 

  (let ((org-super-agenda-groups
       '((:auto-category t))))
  (org-agenda-list))
  

 
#+END_SRC

  
#+RESULTS:
: 1
** org-agenda-custom-commands additions
#+begin_src emacs-lisp :tangle yes :results none


   (add-to-list 'org-agenda-custom-commands '("f" "two-week view" agenda "" ((org-agenda-span 14))))
   (add-to-list 'org-agenda-custom-commands '("o" "three-week view" agenda "" ((org-agenda-span 21))))
   (add-to-list 'org-agenda-custom-commands '("u" "3 month" agenda "" ((org-agenda-span 90))))
   (add-to-list 'org-agenda-custom-commands '("z" "agenda + buckets"
     					   ((agenda "" ((org-agenda-span 2)
                                                            (org-super-agenda-groups
                                                             '((:discard (:todo ("WAIT" )))
                                                               (:name "Day" :time-grid t :order 1)

                                                               (:name "PRIORITY" :priority "A" :order 3)

  							     (:name "inbox" :category "inbox" :order 10)
       							    (:name "scholarship" :category "scholarship" :order 15)
  							     (:name "1015" :category "instruction" :tag "instr" :order 18)
  							     (:name "tenure" :category "tenure" :tag "tenure" :order 19)
                                                               (:name "baruch" :category "baruch" :order 20)
                                                               (:name "ndd" :category "ndd" :order 30)
                                                               (:name "home" :category "personal" :order 50)
                                                               ))
  							  ))
     					     (alltodo "" ((org-agenda-overriding-header "")
     							  (org-super-agenda-groups '(					     
     										     (:discard (:todo "HABIT" :todo "BLOCK"))
     										     (:name "to sort" :category "inbox")
       										     (:name "ndd" :category "ndd")
     										     (:name "scholarship" :category "scholarship")
  										     (:name "instruction" :category "instruction" :tag "instr")
     										     (:name "marxe"  :tag "marxe")
     										     (:name "baruch tenure" :tag "tenure")
     										     (:name "baruch service" :tag "service")
     										     (:name "baruch" :category "baruch")
     										     (:name "finances" :tag "finances")
     										     (:name "health" :tag "health")
     										     (:name "home" :category "personal")
     										     (:name "admin" :category "sysadmin")
     										     
     										     
   										     )))))
                                               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "AREA")) )
                                                (org-agenda-todo-ignore-scheduled t) )))


  (add-to-list 'org-agenda-custom-commands '("b" "status updates"
    					   (
    					     (alltodo "" ((org-agenda-overriding-header "")
    							  (org-super-agenda-groups '(					     
    										     (:discard (:todo "HABIT" :todo "BLOCK" :todo "TODO"))
      										     (:name "NEXT + UNSCHEDULED" :todo "NEXT")
    										     (:name "projects" :todo "PROJ")
    										     (:name "waiting" :todo "WAIT")
    										     
    										     
   										     )))))
                                              ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "AREA")) )
                                               (org-agenda-todo-ignore-scheduled t) )))


  (add-to-list 'org-agenda-custom-commands '("x" "all unscheduled todos"
    					   (
    					     (alltodo "" ((org-agenda-overriding-header "")
    							  (org-super-agenda-groups '(					     
    										     (:discard (:todo "HABIT" :todo "BLOCK" :todo "PROJ" :todo "WAIT"))
      										     

    										     
   										     )))))
                                              ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "AREA")) )
                                               (org-agenda-todo-ignore-scheduled t) )))

#+end_src










** archived stuff
  (add-to-list 'org-agenda-custom-commands '(
                                              "c" "class"
                                             ((agenda "" ((org-agenda-span 'day))
                                               (tags-todo "1015"))
                                              )))


(:name "Scholarship writing" :and (:tag "schol" :tag "write"))
                                               (:name "To read" :and (:tag "read"))
                                               (:name "NDD" :and (:tag "ndd"))
                                               (:name "Scholarship research" :and (:tag "schol" :tag "research"))
                                               (:name "Scholarship reading" :and (:tag "schol" :tag "read"))
                                               (:name "Scholarship admin" :and (:tag "schol" :tag "admin")) 
                                               (:name "Baruch" :and (:tag "baruch"))
                                               (:name "Me" :and (:tag "me"))
old version of alltodo....changed to reflect categories

   (alltodo "" ((org-agenda-overriding-header "")
                                            (org-super-agenda-groups
                                             '(
                                            (:name "DEEP: necessary and timely" :and (:tag "DEEP" :tag "#necessary" :tag "@timely"))
                                                   (:name "SHALLOW: necessary and timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@timely"))
                                               (:name "wait" :todo "WAIT")
                                               ))))
          
         (:name "NOW" :tag "NOW")
                                             (:name "DEEP: necessary and timely" :and (:tag "DEEP" :tag "#necessary" :tag "@timely"))
                                             (:name "SHALLOW: necessary and timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@timely"))
                                             (:name "HOME" :and (:tag "HOME"))
                                             (:name "DEEP: necessary but not timely" :and (:tag "DEEP" :tag "#necessary" :tag "@nottimely"))
                                             (:name "SHALLOW: necessary but not timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@nottimely"))
                                             (:name "SHALLOW: timely" :and (:tag "SHALLOW" :tag "@timely"))
                                             (:name "DEEP: timely but not necessary" :and (:tag "DEEP" :tag "#wouldbenice" :tag "@timely"))
                                             (:name "SHALLOW: timely but not necessary" :and (:tag "SHALLOW" :tag "#wouldbenice" :tag "@timely"))                                                       
                                             (:name "necessary but not timely" :and (:tag "#necessary" :tag "@nottimely"))
                                             (:tag "workflow")

  (setq org-agenda-custom-commands
              '(
                ("l" . "just todo lists") ;description for "l" prefix
                ("lt" tags-todo "untagged todos" "-{.*}")
                ("ls" alltodo "all unscheduled by type" (
  						       (org-agenda-todo-ignore-scheduled t)
  						       (org-super-agenda-groups
  							'(
  							  (:discard (:todo "HABIT" :todo "PROJ" ))
  							  (:name "TO READ" :and (:tag "read"))
  							  (:name "Meetings" :and (:tag "meetings"))
  							  (:name "TO WRITE" :and (:tag "write"))
  							  (:name "TO PROCESS" :and (:tag "process"))
  							  (:name "look up" :and (:tag "lookup"))
  							  (:name "focus" :and (:tag "focus"))
  							  (:name "quick" :and (:tag "quick"))
  							  (:name "analog" :and (:tag "analog"))
  							  (:name "waiting" :and (:todo "WAIT"))
  							  )))

                 (org-agenda-skip-function
                                                ;                                              '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "PROJ" "AREA")) )
                  ))

                ("lb" alltodo "all unscheduled by bucket" (
                                                 (org-agenda-todo-ignore-scheduled t)
                                                 (org-super-agenda-groups
                                                  '(
                                                    (:discard (:todo "HABIT" :todo "PROJ" ))
                                                    (:name "NDD" :and (:tag "ndd"))
                                                    (:name "Baruch" :and (:tag "baruch"))
                                                    (:name "scholarship" :and (:tag "schol"))
                                                    (:name "sysadmin" :and (:tag "sysadmin"))
                                                    (:name "finances" :and (:tag "finances"))
                                                    (:name "me" :and (:tag "me"))
                                                    (:name "home" :and (:tag "home"))
                                                    )))

                 (org-agenda-skip-function
                                                ;                                              '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "PROJ" "AREA")) )
                  )

  
                ("lx" "With deadline columns" alltodo "" 
                 ((org-agenda-overriding-columns-format "%40ITEM %SCHEDULED %DEADLINE %EFFORT " )
                  (org-agenda-view-columns-initially t)
                  (org-agenda-sorting-strategy '(timestamp-up))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD" "HABIT" "WAIT" )) ) )      )
                ("la" "all todos" ((alltodo "" ((org-agenda-overriding-header "")
                                                (org-super-agenda-groups
                                                 '(
                                                   (:discard (:todo "HABIT"))
                                                   (:name "TO READ" :and (:tag "read"))
                                                   (:name "Meetings" :and (:tag "meetings"))
                                                   (:name "TO WRITE" :and (:tag "write"))
                                                   (:name "TO PROCESS" :and (:tag "process"))
                                                   (:name "look up" :and (:tag "lookup"))
                                                   (:name "focus" :and (:tag "focus"))
                                                   (:name "quick" :and (:tag "quick"))

                                                   (:name "away from computer" :and (:tag "analog"))

                                                   (:name "waiting" :and (:todo "WAIT"))

                                                   ))))))


             ("x" . "agenda + tasks") ;description for "x" prefix

             ("xt" "agenda by task type" ((agenda "" ((org-agenda-span 'day)
                                                 (org-super-agenda-groups
                                                  '((:name "Day" :time-grid t :order 1)))))
                                     (alltodo "" ((org-agenda-overriding-header "")
                                                  (org-super-agenda-groups '(

                                                                             (:discard (:todo "HABIT"))
                                                                             (:name "Projects" :and (:todo "PROJ"))
                                                                             (:name "TO READ" :and (:tag "read"))
                                                                             (:name "Meetings" :and (:tag "meetings"))
                                                                             (:name "TO WRITE" :and (:tag "write"))
                                                                             (:name "TO PROCESS" :and (:tag "process"))
                                                                             (:name "look up" :and (:tag "lookup"))
                                                                             (:name "focus" :and (:tag "focus"))
                                                                             (:name "quick" :and (:tag "quick"))

                                                                             (:name "away from computer" :and (:tag "analog"))
                                                                             (:name "waiting" :and (:todo "WAIT"))

                                                                             )))))
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "AREA")) )
                  (org-agenda-todo-ignore-scheduled t) ))





             
                )


     
   




    (add-to-list 'org-agenda-custom-commands
    	     '("xn" "agenda + ndd" ((agenda "" ((org-agenda-span 'day)
                                                    (org-super-agenda-groups
                                                     '((:name "Day" :time-grid t :order 1)))))
                                        (alltodo "" ((org-agenda-overriding-header "")
                                                     (org-super-agenda-groups '(
    									    
                                                                                (:discard (:todo "HABIT"))
                                                                                (:name "leadership" :and (:tag "lc"))
                                                                                (:name "tongsol" :and (:tag "tongsol"))
                                                                                (:name "keep" :and (:tag "keep"))
                                                                                (:name "archives" :and (:tag "archives"))
                                                                                (:name "ndd" :and (:tag "ndd"))
    									    
    									    
                                                                                )))))
                   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("ìµê´" "HOLD"  "AREA")) )
                    (org-agenda-todo-ignore-scheduled t) )))

                                             

* org-download
#+begin_src emacs-lisp :tangle yes

 
(use-package org-download
:ensure t
:after org
:hook (dired-mode . org-download-enable)
:hook (org-mode . org-download-enable)
:custom
(org-download-image-dir "~/Dropbox/Zettelkasten/images")
(org-download-heading-lvl nil)
)

(setq org-download-method 'directory)
;org download doesn't seem to work, org yank takes precedence
(setq org-yank-image-save-method "~/Dropbox/Zettelkasten/images")
(setq org-yank-dnd-default-attach-method 'cp)
(setq org-yank-dnd-method 'attach)
#+end_src

#+RESULTS:
: attach

(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
(setq-default org-download-image-dir "~/Dropbox/Zettelkasten/images")
(setq org-download-timestamp t)

;org download doesn't seem to work, org yank takes precedence
(setq org-yank-image-save-method "~/Dropbox/Zettelkasten/images")



 (use-package org-download
    :ensure t
    :config
    (setq org-download-method 'directory)
    (setq org-download-image-dir (concat (file-name-sans-extension (buffer-file-name)) ".assets"))
    (setq org-download-image-org-width 600)
    (setq org-download-link-format "[[file:%s]]\n"
          org-download-abbreviate-filename-function #'file-relative-name)
    (setq org-download-link-format-function #'org-download-link-format-function-default))

        ;; Drag-and-drop to `dired`
      (add-hook 'dired-mode-hook 'org-download-enable)

      (defun org-download--dnd-xds-function (need-name filename)
      (if need-name
          (let ((method (if (eq org-yank-dnd-method 'ask)
                            (org--dnd-rmc
                             "What to do with dropped file?"
                             '((?a "attach" attach)
                               (?o "open" open)
                               (?f "insert file: link" file-link)))
                          org-yank-dnd-method)))
            (setq-local org--dnd-xds-method method)
            (pcase method
              (`attach (expand-file-name filename (org-attach-dir 'create)))
              (`open (expand-file-name (make-temp-name "emacs.") temporary-file-directory))
    	  ;; Save file specified by org-download--dir
              (`file-link (expand-file-name (org-download-file-format-default filename)
    					(funcall #'org-download--dir)))))
        (pcase org--dnd-xds-method
          (`attach (insert (org-link-make-string
                            (concat "attachment:" (file-name-nondirectory filename)))))
          (`file-link
           ; Insert the attributes from `org-download-image-attr-list`
           (mapc (lambda (attr) (insert attr "\n")) org-download-image-attr-list)
           (insert (org-link-make-string (concat "file:" filename)))
           (setq org-download-path-last-file filename))
          (`open (find-file filename)))
        (setq-local org--dnd-xds-method nil)))

    (advice-add 'org--dnd-xds-function :override #'org-download--dnd-xds-function)
    (advice-add 'org--dnd-local-file-handler :override #'org-download-dnd)



* bufler
#+BEGIN_SRC emacs-lisp :tangle yes
     (use-package bufler
          :custom
          (bufler-column-name-width 70)
          (bufler-filter-buffer-modes nil))

   
        (add-hook 'bufler-list-mode-hook
                  (lambda ()
                    (visual-line-mode -1)
                    (toggle-truncate-lines 1)))
#+END_SRC

#+RESULTS:
| #[nil ((visual-line-mode -1) (toggle-truncate-lines 1)) nil] | hl-line-mode |
  


* org pandoc import
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
  
  (use-package org-pandoc-import
    :straight (:host github
               :repo "tecosaur/org-pandoc-import"
               :files ("*.el" "filters" "preprocessors")))
#+END_SRC

#+RESULTS:

* latex
#+begin_src emacs-lisp :tangle yes

  (setq org-latex-default-packages-alist
      '(("AUTO" "inputenc" t
         ("pdflatex"))
        ("T1" "fontenc" t
         ("pdflatex"))
        ("" "graphicx" t)
        ("" "grffile" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "textcomp" t)
        ("" "amssymb" t)
        ("" "capt-of" nil)
        ("dvipsnames" "xcolor" nil)
        ("colorlinks=true, linkcolor=Blue, citecolor=BrickRed, urlcolor=PineGreen" "hyperref" nil)
	    ("" "indentfirst" nil)))

#+end_src
;;; secret entries
"-----BEGIN PGP MESSAGE-----

jA0ECQMIyXNEd5TajtTs0ukBLbpYeQ0S5HaMfozn+z6tN/aRmrWS2V9eDC8YwX2H
4tac7j423b3uRXvJmlcPP1vNe8G+qdm0BkYirRcudMPwgsK4eniFlaHwpv3FNnds
bU4igBAO22TNuuIWwN9noS8WuFdwvCdOApPGnZlnJP0g7ve9tWcikYwrgie/9JNi
Uh9m05UBZvOCscJEEyIdLoNcpnchIxzzm8XM0OyNxDkxMZoFK3D+NZDWrBrg1f7z
TVbRyZYmcgUjPcRA14qOcWFCmm1+2La4bZ/RUgk0xa+8CY3CJNq0ia/yCN2OXPs5
dJVNtjr8ugyG1YmIKz/DJUVZ+fbeip45M8UAOc8tvuCkDcJsGz+OhqOYji9NVmQP
zR/uzj/F0aH5IbjBwH7LpYUEhhanZmClvmzHMA4FFYipAvUCs1UYHbbZaSMxpjvR
P3qfV2p0YLQbeoMy3WdosWIWqXfpJfhE3OrryPWG4vU93OFNRi/EgKQ/FGk0YNR6
kiUZoVRYTQUaBJvF1kfU5MpwSrZR1ik5fOA2zKt6VL7FevbWPlVQvZKqsg6b3d1A
IiA+yGBYGnqDg2pj/quj3wEdaY2twQAX+Pt+FeEWcPwvCZCg/mk7iqZZkdphTV2Y
Jfjt1bIp8j7rnmgBvczN1X1pif7oRaTIgfq5dcpQSc+mX1Ix1C1M9OREO5YGoB/3
ssD7E0RCjeCmxfKtzbIvh9vbQhx4Ze9Xe6fmj9e3zGqESnoK8oZreq9EHeERmxSz
ogG0L+jc0EIFZeyLeOzEIglABWMnPwNdVVRjUAqT1DbeeRHSDZhpHJI5Me+DMHWn
y3KN2Cm7QE9TJpZ9EpVW3Hj0Gc8cvgX46rW26Wd7WFomfR/A7Vk5y8/O4w3ccNp8
pDzXcERTXZJhKPk650BXu35ZB7ucsTtXbl/4xZxxuGEFOOVBqB5kzN/iuXyx45+Y
h14wSDuEZQzCyiotIP6RrankZcSJbZkEQNz9ouuWJXyHB9vTMxEyQXvGtjDptuKP
Y680KSzF6K01W0bjvkeJ5JQwf/3ebe0BDnBFeSLx/gCpUzZz85RhNalFQnevNRSj
DzaP5hLmXWV7XYqEzaONCzSTudx8DuM+2pVj89MFl3vTZOqgWk7KpKfXkb4Ru+6S
Ht0ZzZLpvO3neXhGSD6txeCnNfdVWZ77EtFnzObiMsmugoDwP0cwZDrX6SGVOJqC
qw8SRFC1RzsKGEqSC+OCWScjRH+TXQd8IABNQQMsGG/8QMr63YgpXyc92vG1Cxce
V+Dp3/jk5yN/t3LBbI0=
=v9TS
-----END PGP MESSAGE-----
"
;;; secret entries
"-----BEGIN PGP MESSAGE-----

jA0ECQMIedwXLYmW7nTs0ukBHBDzjXECL3dDYWfk5M0hy8paNyWbZaijnSlmjUlC
TvvoxU6tsQgMnT2SRFCnCIP/zeGemQ1hgmMnch/TFGcxGbttNCpnOgw/NNBrJH8i
o/uZlbNYZA187C01X4kAjKVQOC/QqTScGDR2oCLSFxxRDlH70+iQvq69WVdZU1xf
r5QAaMvQL2inXtghTvpDc6LuBGmmyVlF+isF/6RxBO8LLpMIpB/E1BlcCk9VPfmM
arw1ufe/upgKl2y1BOASL8K5hsrZ2PV2Z+A3pw8vP5SexrBUxRlCRoGIUx0TyCD2
7Sn9Q63X77n7bcYtvUUuyZBG/q5zj55GShP9mxp2TanQYuX9C1q+Ez1G7Cb8pgTk
y6U+akRgBcO+g9PlvkwCoVRDYFXluJ7nklc8tofEn1SJH6Ea4GgMK6AVf36noHwX
W8cdhe+x5fYAcH1BIUwOTEEelSoXQ76dvPbHpfy1k8Vkzf4uEvBMXFKq59IdOrNA
D92XvFqI8ELE+nDSWP64DsyGHg/g4tBPVmz4KZg0JE4S8VtVHjto636ovF/OvIAO
U+lHi0xxgsOB3VP4xOaBiuLWS0VC8cF5oQJKLFMv5RC8nvIU4Chakn8o07EtCJ/y
RYfOcrXNnDr/OMsOLynh7a7SMDV7r92Y90LmhhH6XoT6+QinHSarTnUmwL7Lra8o
wsDv6pTDg4NnqbP34kkTK1IpE5TzOTVgmAKwRCcjzG3Jxm0IQiw2/IiEigceAWPA
JsTXP/RdVsubueT8fhVQCePswGk8l+i6F5/WaTYpf96yhWMiGwBkjdmxGCVjipgg
tbb0ORi+khLn5wa+J4notcir4x4jANyNHPkoumYFGq/YPQATARD6nSxeQPIooD+C
K55KS2nH7v6OjmF2S+IjGQJpESKHiUopU3SsxVPu7EnZ+J/C8C8/QFx69w84HW9p
N+y4EDwoGcQGeds+ZOqjIYLyNRzYaQ9dTTa9+sZTmRDWJiTCZa1OhM9SpVuGI6Ab
moWrCcRKvbR5m+b0wq9p5QeuST2HLvB437CoPjYgkutlnVhoSpHOXHcy7zUNYRKk
TQAWv581I+5oGEdU/8aXSe6jskssNuy6MwhN4hk9yiqhpcGLGnpX6xZUXyNbxbFo
9F3xWjmZq/6NQRw6oGNlz5qNKrfkN9w5NKT0KmQpELXhyJxKe5KhTQgeuAz7DzLV
OSWAG5RGIP/IIqqHFP7J1wJyaUtODSU89Z7k91EdZPyssjUr0hfKkwGeOxpoHonq
DLo=
=sj7o
-----END PGP MESSAGE-----
"
;;; secret entries
"-----BEGIN PGP MESSAGE-----

jA0ECQMIw/fDEhBN3CHs0ukBhAbnf5NdLxHp7uIT0YmM9ygmwnhmbhXGVH49H2r4
LgbfOL4McVL8rb620pHoVQwoPcylUUwaKz9r5YzyiSPSrJEDSour6Ism2NXqeWXh
pZUdq3zVkqlSqcYF825NFYi/+pMa6v9Mr5vRUaO4Jvsk3okK9ZBi89l7JSEu85sz
GM8Z8SncH8XP2ujgUrPctqfWgsd00rHUx6ZlzkXh82kYZchRg8qbbrcfyM09XGtB
Nt20DF7qb40/zyccz0b7mUkWnsqMUzh1ZTRCaMqXSukNskKqfBondVesnAanCBRz
ltAttb3RS7PGgnBE5IVxYm9PUTOUIB4LNe/2w/hhy2oc/759PNXwMrUYUh3cSe+I
+euhd016eUYBIY6ttVaomVExFjhXFIHQ/7lE9AeR2as8DuDcXFpx6x4tb+gu0c7B
N9Qi1NTX+QUb2oqrdsflyPlUpRWnLDTRoHma0CEzgXvZN7KjsPnuft5tXKCoo6au
Aq+Pi+yCrCrOliZfsKcGiCyChaldmSB7Kc3P7BjqNHTThtBsD+eGirkyG/p7WabS
VSw9jv7PdkR9CSeGgD5oRgCBh1jQT5gjtYJX5/7MJA5wvVOt6srz3+fiRJypzgKu
kJJ97ceh6YevAETxmMVGaE1QdddKWOGZKIhrrp9Ve3xYfFRPGKyCjddPhsakQx/N
XcDyamWagTnaW1XykhIth5Z+U2hpL7yYDFlKUgNa4EXtd8Z4Rlun82fzvvKRvtYW
0eYo6kgZmwOAGeP3KcmQzZzw7YYSMJ6AGrxvzEAtT/mkr8z7X/G5NZ0ZhYNLry3t
7B0/E6GCyqFgLAdpK+Ovxhfa9oOcnrWjLE7IUYcm5R39OxdRLQOU0F6UdCnHjEUY
W5cYwKx/zFe6ZCS7gtTnwAUP5WJy/8Uw3TGsmFIrkzIY5jaZqSpk97ajEStGXg2l
xjhLKOfE4bkUKCeIjQguQExIXdu5jW5iLQAz6ePFsg3yrgBmYO9uLtIhBtokvdAW
5NKY1HiiH2pNnjU2TRpg8WX5mjcuZZIPh5iQrlzw6Trm84xzQvvyymEP7mrcEcZW
j2obcFbCpJltesFNVyKRO/GE4QmaxzElCXBNp7J8aNid0rVj0FmQs2ERR2LqMvnd
lu4sbqf6kdJmXnWw4yuXwRdpb3k444853439caMbqR70cawKQKIcFGBdtoKxJjK0
tiD5Aa9IOPplKKNQ2MUpgwbu0sqY5WYurvSPF0vk7j3k1iXh3n3bGviEbQf7CGBJ
OvrAvCc=
=lhKE
-----END PGP MESSAGE-----
"

* org-roam
#+begin_src emacs-lisp :tangle yes
     (use-package org-roam
     :ensure t
     :custom
     (org-roam-directory (file-truename "~/Dropbox/Zettelkasten/zettles"))
     :bind (("C-c n l" . org-roam-buffer-toggle)
            ("C-c n f" . org-roam-node-find)
            ("C-c n g" . org-roam-graph)
            ("C-c n i" . org-roam-node-insert)
            ("C-c n c" . org-roam-capture)
            ;; Dailies
            ("C-c n j" . org-roam-dailies-capture-today))
     :config
     ;; If you're using a vertical completion framework, you might want a more informative completion interface
     (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
     (org-roam-db-autosync-mode)
     ;; If using org-roam-protocol
     (require 'org-roam-protocol))

(setq org-roam-capture-templates
      '(
	("d" "default" plain "* ${title}\n:PROPERTIES:\n:ID: %(org-id-new)\n:CREATED: %<%Y-%m-%d %H:%M>\n:END:\n\n%?"
        :if-new (file "~/Dropbox/Zettelkasten/zettles/zettles.org"))

	))


(use-package org-roam-bibtex
  :after org-roam) 
#+end_src

#+RESULTS:

  '(("d" "default" plain "%?"
     :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t))

      \"* %?\n %a\"
#+RESULTS:
: org-roam-dailies-capture-today

* hi-lock
#+begin_src emacs-lisp :tangle yes
(global-hi-lock-mode 1)
;https://github.com/emacs-mirror/emacs/blob/master/lisp/hi-lock.el
(setq hi-lock-file-patterns-policy (lambda (pattern) t))
; from https://stackoverflow.com/questions/17380898/persistent-colors-in-an-emacs-text-buffer
#+end_src

#+RESULTS:
: #[(pattern) (t) nil]


* org-super-link
#+begin_src emacs-lisp :tangle yes
(use-package org-super-links
  :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github :commit "0.4")
  :bind (("C-c s s" . org-super-links-link)
       ("C-c s l" . org-super-links-store-link)
       ("C-c s C-l" . org-super-links-insert-link))
    :config
  (setq org-super-links-related-into-drawer nil
  	))
  

#+end_src

#+RESULTS:
: org-super-links-insert-link

* olivetti mode
#+BEGIN_SRC emacs-lisp :tangle yes :results none
(use-package olivetti)
(set-face-attribute 'olivetti-fringe nil :background "gray0")
#+END_SRC


* denote
#+begin_src emacs-lisp :tangle yes
;; Remember that the website version of this manual shows the latest
;; developments, which may not be available in the package you are
;; using.  Instead of copying from the web site, refer to the version
;; of the documentation that comes with your package.  Evaluate:
;;
;;     (info "(denote) Sample configuration")
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode)
  :bind
  (("C-c n n" . denote)
   ("C-c n r" . denote-rename-file)
   ("C-c n l" . denote-link)
   ("C-c n b" . denozte-backlinks)
   ("C-c n d" . denote-dired)
   ("C-c n g" . denote-grep))
  :config
  (setq denote-directory (expand-file-name "~/Dropbox/Zettelkasten/zettles/"))

  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have, for example, a literal
  ;; "[D]" followed by the file's title.  Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (denote-rename-buffer-mode 1))



#+end_src

#+RESULTS:
: denote-grep

* org linker and org linker edna
#+begin_src emacs-lisp :tangle yes
(use-package org-linker
  :quelpa (org-linker :repo "toshism/org-linker" :fetcher github))

(use-package org-linker-edna
  :quelpa (org-linker-edna :repo "toshism/org-linker-edna" :fetcher github)
  :bind (("C-c s e" . org-linker-edna)) ;; follows org-super-link binding patterns
)


#+end_src

#+RESULTS:
: org-linker-edna

* reading docs
** pdfs
  #+BEGIN_SRC emacs-lisp :tangle yes
        ;[2025-10-14 Tue] troubleshooting pdf tools
                        (use-package pdf-tools
                          :magic ("%PDF" . pdf-view-mode)
                          :config
                          (pdf-tools-install :no-query))
                        (use-package pdf-view-restore)
        
                  ;       (setq pdf-view-continuous nil)
                   ;   (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
             (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))
        
             ;   (load "org-pdfview") -> no longer maintained, replaced by org-pdftools
        
                                                        ;     (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))
        
        
        
        
                (add-to-list 'org-file-apps 
                             '("\\.pdf\\'" . (lambda (file link)
                                               (org-pdfview-open link))))
        
         
    ;              (use-package pdf-continuous-scroll-mode
     ;               :quelpa (pdf-continuous-scroll-mode :fetcher github :repo "dalanicolai/pdf-continuous-scroll-mode.el"))
      ;      (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode)
        
        
    
        
  #+END_SRC

  #+RESULTS:
  : org-pdf-open

      ;;to get PDFS to open on a specific page. added 12/27/21 from this link: https://emacs.stackexchange.com/questions/30344/how-to-link-and-open-a-pdf-file-to-a-specific-page-skim-adobe. haven't tested it out yet. 
            (org-add-link-type "pdf" 'org-pdf-open nil)
        
        (defun org-pdf-open (link)
          "Where page number is 105, the link should look like:
           [[pdf:/path/to/file.pdf#page=105][My description.]]"
          (let* ((path+page (split-string link "#page="))
                 (pdf-file (car path+page))
                 (page (car (cdr path+page))))
            (start-process "view-pdf" nil "evince" "--page-index" page pdf-file)))

  (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
  (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" .  org-pdfview-open))


  (use-package org-pdf-tools
  :straight t)

  (use-package org-noter-pdf-tools
  :straight t)


** nov.el mode

#+BEGIN_SRC emacs-lisp :tangle yes
(setq nov-text-width t)
#+END_SRC

#+RESULTS:
: t

* appearance

** space between lines

#+begin_src emacs-lisp :tangle yes

(set-face-attribute 'fixed-pitch nil :family "Fantasque sans mono") ; this gets rid of the weird space that gets added when things are indented in org-indent-mode
#+end_src

#+RESULTS:
| org-padding-mode | org-tempo-setup | org-download-enable | org-auto-tangle-mode | org-clock-load | org-ref-org-menu | #[nil ((org-superstar-mode 1)) nil] | #[nil ((auto-revert-mode 1)) nil] | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** org superstar
:LOGBOOK:
CLOCK: [2025-07-17 Thu 18:13]--[2025-07-17 Thu 18:14] =>  0:01
:END:
("â" "â¤" "â""â¢" "â ""â­" )
"â"
"â" 
"â¤"
 "â"
"â"  "â¶" "â¢"
 "Â¶"  "â§" 
#+begin_src emacs-lisp :tangle yes

    (use-package org-superstar
      :config
      (setq org-superstar-headline-bullets-list '("â" "âº" "â»" "â"  "â¡"  "â§" "â³" "â ")
            org-superstar-item-bullet-alist (quote ((42  . 33) (43 . 62) (45 . 45)))
            )
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

#+end_src

#+RESULTS:
: t




** set-face-attributes
[[file:custom.el]]
*** org headline faces

#+BEGIN_SRC emacs-lisp :tangle yes :results none
(set-face-attribute 'org-level-1 nil
		     :foreground "#66a3ff"
		     :inherit 'outline-1
		     :weight 'normal)

(set-face-attribute 'org-level-2 nil
		     :foreground "coral"
		     :inherit 'outline-2
		     :weight 'normal)

(set-face-attribute 'org-level-3 nil
		     :foreground "#8cd9b3"
		     :inherit 'org-level-1
		     :weight 'normal)

(set-face-attribute 'org-level-4 nil
		     :foreground "#e699ff"
		     :inherit 'org-level-1
		     :weight 'normal)

(set-face-attribute 'org-level-5 nil
		     :foreground "#66d9ff"
		     :inherit 'org-level-1
		     :weight 'normal)

 (set-face-attribute 'org-level-6 nil
		     :foreground "dark goldenrod"
		     :inherit 'org-level-1
		     :weight 'normal)

 (set-face-attribute 'org-level-7 nil
		     :foreground "#fbcd4b"
		     :inherit 'org-level-1
		     :weight 'normal)

 (set-face-attribute 'org-level-8 nil
		     :foreground "#e05858"
		     :inherit 'org-level-1
		     :weight 'normal)


#+END_SRC
*** emacs faces
#+BEGIN_SRC emacs-lisp :tangle yes :results none
(set-face-attribute 'bold nil :foreground "#faaf08" :weight 'bold)
(set-face-attribute 'italic nil :foreground "yellow green" :slant 'italic)
(set-face-attribute 'underline nil :foreground "dodger blue" :underline t)

#+END_SRC

*** org faces

#+BEGIN_SRC emacs-lisp :tangle yes :results none
(set-face-attribute 'org-cite nil :foreground "medium orchid")
(set-face-attribute 'org-date nil :foreground "#ECBE7B" :underline t :family "monofur")
(set-face-attribute 'org-drawer nil :foreground "#999966" :height 0.8)
(set-face-attribute 'org-property-value nil :foreground "#83898d" :height 0.8)
(set-face-attribute 'org-link nil :inherit 'link :foreground "peru" :family "monofur")
(set-face-attribute 'org-tag nil :foreground "goldenrod")
(set-face-attribute 'org-block nil :inherit 'modus-themes-fixed-pitch :extend t :background "gray9" :foreground "#ffffff")
(set-face-attribute 'org-block-begin-line nil :inherit 'modus-themes-fixed-pitch :extend t :foreground "medium slate blue")
(set-face-attribute 'org-quote nil :extend t :background "gray23" :foreground "#c6eaff")
(set-face-attribute 'org-column nil :background "gray0" :foreground "pale green" :strike-through nil :underline nil :slant 'normal :weight 'normal)
(set-face-attribute 'org-special-keyword nil :foreground "#83898d" :underline nil :height 0.8)

#+END_SRC


*** org-agenda faces
#+BEGIN_SRC emacs-lisp :tangle yes :results none
(set-face-attribute 'org-scheduled nil :foreground "khaki")
(set-face-attribute 'org-agenda-current-time nil :foreground "magenta")
(set-face-attribute 'org-agenda-calendar-event nil :foreground "dark turquoise")
(set-face-attribute 'org-agenda-date-today nil :background "black" :foreground "#00d3d0")
(set-face-attribute 'org-agenda-done nil :inherit 'modus-themes-grue-nuanced :foreground "dim gray")
(set-face-attribute 'org-scheduled-previously nil :inherit 'org-scheduled :foreground "deep sky blue")
(set-face-attribute 'org-scheduled-today nil :inherit 'modus-themes-bold :inherit 'org-scheduled :foreground "light coral")
(set-face-attribute 'org-super-agenda-header nil :inherit 'org-agenda-structure :foreground "#e2dfa2")
(set-face-attribute 'org-done nil :inherit 'modus-themes-grue :foreground "gray22" :strike-through nil :weight 'bold)
(set-face-attribute 'org-todo nil :foreground "#ffc61a" :underline t :weight 'normal)
(set-face-attribute 'org-headline-done nil :inherit 'modus-themes-variable-pitch :inherit 'modus-themes-grue-nuanced :foreground "dim gray")
#+END_SRC


#+begin_src emacs-lisp :tangle no

 
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-link ((t (:inherit link :foreground "#f9d2ef"))))
 '(ereader-link ((t (:inherit link :family "KoHO"))))
 '(mode-line ((t (:inherit modus-themes-ui-variable-pitch :background "#323232" :foreground "#f4f4f4" :box (:line-width (1 . 1) :color "#a8a8a8") :height 0.8))))
 '(org-block ((t (:inherit modus-themes-fixed-pitch :extend t :background "gray9" :foreground "#ffffff"))))
 '(org-block-begin-line ((t (:inherit modus-themes-fixed-pitch :extend t :foreground "medium slate blue"))))
 '(org-column ((t (:background "gray0" :foreground "pale green" :strike-through nil :underline nil :slant normal :weight normal))))
 '(org-property-value ((t (:foreground "#83898d" :height 0.8))))
 '(org-quote ((t (:extend t :background "gray13" :foreground "#c6eaff"))))
 '(org-special-keyword ((t (:foreground "#83898d" :underline nil :height 0.8))))
 '(org-superstar-item ((t (:inherit default :foreground "turquoise"))))
 '(org-warning ((t (:foreground "green" :weight normal))))
 '(shr-text ((t (:inherit variable-pitch-text :height 1.5 :family "KoHo"))))
 '(variable-pitch ((t (:family "Koho")))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(avy-all-windows 'all-frames)
 '(bibtex-completion-format-citation-functions
   '((org-mode . bibtex-completion-format-citation-org-cite)
     (latex-mode . bibtex-completion-format-citation-cite)
     (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
     (python-mode . bibtex-completion-format-citation-sphinxcontrib-bibtex)
     (rst-mode . bibtex-completion-format-citation-sphinxcontrib-bibtex)
     (default . bibtex-completion-format-citation-default)))
 '(bmkp-last-as-first-bookmark-file "/home/betsy/.emacs.d/bookmarks")
 '(calendar-week-start-day 1)
 '(custom-safe-themes
   '("5a611788d47c1deec31494eb2bb864fde402b32b139fe461312589a9f28835db" default))
 '(default-input-method "korean-hangul")
 '(elfeed-feeds '("https://emacs.tv/"))
 '(fill-column 100)
 '(global-visual-line-mode t)
 '(line-spacing 0)
 '(mu4e-attachment-dir "/home/betsy/Dropbox/2022")
 '(olivetti-body-width 0.6)
 '(olivetti-style 'fancy)
 '(org-agenda-columns-add-appointments-to-effort-sum t)
 '(org-agenda-dim-blocked-tasks t)
 '(org-agenda-exporter-settings '((org-agenda-remove-tags t) (org-agenda-with-colors nil)))
 '(org-agenda-prefix-format
   '((agenda . " %i %-12:c %?-12t% s") (todo . " %i %-12:c") (tags . " %i %-12:c")
     (search . " %i %-12:c")))
 '(org-agenda-scheduled-leaders '("" "Sch.%2dx: "))
 '(org-agenda-tags-column 'auto)
 '(org-agenda-time-grid
   '((daily today require-timed remove-match) (900 1000 1100 1200 1300 1400 1500 1600 1700) " âââââ "
     "âââââââââââââââ"))
 '(org-archive-save-context-info '(time file category todo olpath))
 '(org-cite-global-bibliography '("~/Dropbox/Zettelkasten/references.bib"))
 '(org-clock-sound "\"~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav\"")
 '(org-columns-default-format "%25ITEM %TODO %3PRIORITY %EFFORT %TAGS")
 '(org-columns-default-format-for-agenda "%25ITEM %TODO %SCHEDULED %EFFORT")
 '(org-deadline-warning-days 3)
 '(org-duration-format '(("p" . t) (special . h:mm)))
 '(org-duration-units
   '(("min" . 1) ("h" . 60) ("d" . 1440) ("w" . 10080) ("m" . 43200) ("y" . 525960.0) ("p" . 25)))
 '(org-edit-src-content-indentation 0)
 '(org-ellipsis " Â»")
 '(org-fast-tag-selection-single-key t)
 '(org-fold-catch-invisible-edits 'show-and-error)
 '(org-gcal-auto-archive nil)
 '(org-gcal-remove-api-cancelled-events t)
 '(org-global-properties '(("EFFORT_ALL" . "5 10 15 20 25 30 35 40 45 50 55 60")))
 '(org-habit-graph-column 60)
 '(org-habit-show-habits-only-for-today t)
 '(org-id-link-to-org-use-id 'create-if-interactive)
 '(org-image-actual-width '(400))
 '(org-log-note-headings
   '((done . "State %-12s from %-12S %t") (state . "State %-12s from %-12S %t")
     (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t")
     (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t")
     (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-doi ol-eww ol-gnus org-habit org-id ol-info ol-irc ol-mhe
	     org-protocol ol-rmail org-tempo ol-w3m ol-eshell ol-bookmark org-checklist org-notify
	     org-registry))
 '(org-pomodoro-ticking-sound-states '(:pomodoro))
 '(org-sidebar-default-fns '(org-sidebar-tree-view-buffer))
 '(org-sidebar-side 'left)
 '(org-sticky-header-full-path 'reversed)
 '(org-stuck-projects '("+TODO=\"PROJ\"" ("NEXT" "WAIT") nil ""))
 '(org-timeblock-span 1)
 '(org-use-extra-keys t)
 '(org-use-fast-tag-selection t)
 '(org-yank-image-file-name-function 'org-yank-image-read-filename)
 '(package-selected-packages
   '(org-sidebar typewriter-roll-mode toc-org org-side-tree unfill bufler elfeed org-noter
		 org-tracktable avy jinx centered-window org-ql sound-wav calfw-gcal org-timeblock
		 seq org-notifications org-transclusion mpv emms restart-emacs marginalia
		 modus-vivendi modus-themes org-projectile org-projectile-helm citeproc-org ov
		 org-ref-prettify mu4e org helm async helm-bibtex org-gcal transient pomm yas
		 yasnippet-snippets org-time-budgets org-timeline org-pomodoro zoom yankpad xml+
		 workgroups2 worf which-key wc-mode wc-goal-mode w3m visual-fill-column visible-mark
		 uptimes unkillable-scratch unicode-fonts undo-tree ssh-agency spray speed-type
		 smartparens scrollkeeper rainbow-delimiters quelpa-use-package powerthesaurus
		 pdf-view-restore pdf-continuous-scroll-mode pandoc-mode ox-tufte ox-pandoc ox-clip
		 org-wild-notifier org-web-tools org-wc org-superstar org-sticky-header org-ref
		 org-recent-headings org-plus-contrib org-pdfview org-noter-pdftools org-msg
		 org-mru-clock org-edna org-drill org-download org-clock-today org-clock-split
		 org-clock-convenience org-cliplink org-chef org-bookmark-heading org-auto-tangle
		 org-analyzer org-alert org-ac openwith on-screen olivetti nov mw-thesaurus
		 multiple-cursors mu4e-conversation most-used-words mixed-pitch markdown-preview-eww
		 markdown-mode magit-popup magit ledger-mode latex-preview-pane korean-holidays
		 keychain-environment interleave image+ html2org hl-anything highlight helm-unicode
		 helm-swoop helm-projectile helm-org-rifle helm-org-ql helm-flyspell helm-chronos
		 helm-bufler helm-bibtexkey gnuplot-mode gnuplot gnu-elpa-keyring-update
		 frog-jump-buffer flyspell-correct-helm expand-region doom-themes dired-toggle-sudo
		 diminish deft define-word csv-mode crux counsel copyit-pandoc company-org-roam
		 company-bibtex company-auctex clean-buffers centered-cursor-mode calibredb
		 calfw-org calfw-cal calfw auto-complete-auctex anki-editor anki-connect amread-mode
		 all-the-icons aggressive-indent activity-watch-mode ace-window ace-jump-mode
		 ace-jump-helm-line ace-jump-buffer ac-helm 2048-game))
 '(pdf-annot-default-annotation-properties
   '((t (label . "Betsy")) (text (color . "#ff0000") (icon . "Note"))
     (highlight (color . "light green")) (underline (color . "dark violet"))
     (squiggly (color . "forest green")) (strike-out (color . "red"))))
 '(pdf-annot-list-listed-types
   '(file free-text highlight squiggly strike-out text underline))
 '(safe-local-eval-forms
   '((add-hook 'write-file-hooks 'time-stamp) (add-hook 'write-file-functions 'time-stamp)
     (add-hook 'before-save-hook 'time-stamp nil t)
     (add-hook 'before-save-hook 'delete-trailing-whitespace nil t) (flyspell-mode 1)))
 '(safe-local-variable-values
   '((eval org-side-tree 1) (olivetti-set-width . 110) (olivetti-mode . t)
     (org-download-image-dir . "/home/betsy/.local/share/Anki2/User 1/collection.media")
     (org-reverse-note-order) (eval flyspell-mode 1)))
 '(toc-org-max-depth 6)
 '(typewriter-roll-keep-in-focus 2)
 '(typewriter-roll-prefer-scroll-margin t)
 '(user-mail-address "betsy.yoon@baruch.cuny.edu")
 '(visual-fill-column-center-text t)
 '(warning-suppress-types '((use-package)))
 '(yas-global-mode t))


#+end_src


** org-emphasis-alist

#+BEGIN_SRC emacs-lisp :tangle yes :results none
  ;strikethrough org-emphasis-alist
  (require 'cl)   ; for delete*
(setq org-emphasis-alist
      (cons '("+" '(:strike-through t :foreground "gray"))
            (delete* "+" org-emphasis-alist :key 'car :test 'equal)))

#+END_SRC






* img roll mode

#+begin_src emacs-lisp :tangle yes :results none
;(load "image-roll")

(use-package pdf-tools
:straight (:host github
		 :repo "dalanicolai/pdf-tools"
		 :files ("lisp/*.el"
                              "README"
                              ("build" "Makefile")
                              ("build" "server")
                              (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))

(use-package image-roll
  :straight (:host github
		   :repo "dalanicolai/image-roll.el"))

 



#+end_src

#+RESULTS:


* org gcal
#+begin_src emacs-lisp :tangle yes :results none

   (use-package org-gcal)
        (setq org-gcal-client-id "217294084435-7e5idjaji94bamhu6n5mnchamfl5it6r.apps.googleusercontent.com"
              org-gcal-client-secret "OlIZFIll-Md3n6NxVkpSWr-3"
              org-gcal-fetch-file-alist '(
                                          ("betsy.yoon@gmail.com" . "~/Dropbox/Zettelkasten/events.org" )
					  ("yoonbetsy@protonmail.com" . "~/Dropbox/Zettelkasten/events.org")        
					  ;("ua08veaq1ei5a9li8s2tiiecbg@group.calendar.google.com" . "~/Dropbox/Zettelkasten/time.org")
            ))
;    (org-gcal-reload-client-id-secret)
        (setq org-gcal-recurring-events-mode 'top-level)

    (setq plstore-cache-passphrase-for-symmetric-encryption t)

    (require 'plstore)
 ; (add-to-list 'plstore-encrypt-to '("A922544B1884A3CC"))

     (require 'epa-file)
    ;; And then this setting probably is also the winner.
    (setq epg-pinentry-mode 'loopback)
    (epa-file-enable)
    
    ;; I don't know if this is necessary. I removed it again.
    ;; Essentially it is the path to the downgrade package I used.
  ;  (setq epg-gpg-program "~/Downloads/gnupg-2.4.0/bin/gpg")

    ;; No clue if I need this. But I kept it.
    (setq plstore-cache-passphrase-for-symmetric-encryption t)
    ;; Same thing here. This is more or less
    ;; lazy copy pasting without reading the descriptions
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src
