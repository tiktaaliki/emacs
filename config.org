
#+auto_tangle: t
 
* Minimum Usability


#+BEGIN_SRC emacs-lisp :tangle yes
    (set-fringe-mode '(50 . 50))
    (fset 'yes-or-no-p 'y-or-n-p)
                                            ;  (setq confirm-kill-emacs (quote y-or-n-p))
    (setq confirm-kill-emacs nil
          visible-bell nil
          inhibit-startup-screen t
          org-support-shift-select t
          ring-bell-function (quote ignore)
          split-width-threshold 100
          )


    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)

    (delete-selection-mode) ;allows to delete selected text by typing
    (global-set-key (kbd "M-o") 'other-window)

  ;  (setq debug-on-error t)
#+END_SRC

#+RESULTS:
: other-window




* UX
** navigation
   #+BEGIN_SRC emacs-lisp :tangle yes
     
     (use-package helm
       :config (helm-mode +1)
       :bind (("M-x"   . helm-M-x)
              ([f3] . helm-buffers-list)       
              ("<Hangul> x" . helm-M-x)
              ([f9] . helm-occur )
              ))
     (use-package projectile
       :config
       (projectile-mode +1))
     
     (use-package helm-projectile
       :bind    ([f5] . helm-projectile))
     
     (use-package bufler
       :custom
       (bufler-column-name-width 70)
       (bufler-filter-buffer-modes nil))
     
     (setq org-special-ctrl-a/e (quote (t . t)))
     
     (add-hook 'bufler-list-mode-hook
               (lambda ()
                 (visual-line-mode -1)
                 (toggle-truncate-lines 1)))
     
     (use-package ace-jump-mode)
     (global-set-key (kbd "M-z") 'ace-jump-mode)
     (global-unset-key (kbd "C-z"))
     (global-set-key (kbd "C-z") 'ace-jump-helm-line)
     (setq tab-bar-mode nil)
                         #+END_SRC

#+RESULTS:
   
(use-package good-scroll
:config (good-scroll-mode +1)
)

** dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (load "dired+")
  (define-key dired-mode-map (kbd "<f1>") 'org-capture)
  (setq dired-auto-revert-buffer (quote dired-directory-changed-p)
        dired-omit-verbose nil
        dired-omit-files
        (concat dired-omit-files "\\|^.DS_STORE$\\|^.projectile$\\|^.org~$")
        )
  (add-hook 'dired-load-hook
            (function (lambda () (load "dired-x"))))
  
  (add-hook 'dired-mode-hook
            (lambda ()
              ;; Set dired-x buffer-local variables here.  For example:
              (dired-omit-mode 1)
              ))
  
  ;; toggle `dired-omit-mode' with C-x M-o
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  
  
#+END_SRC

#+RESULTS:
| dired-omit-mode | (lambda nil (dired-omit-mode 1)) | diredp-nb-marked-in-mode-name | diredp--set-up-font-locking | (lambda nil (let ((now (lookup-key dired-mode-map J))) (if (and now (not (eq now 'undefined))) nil (define-key dired-mode-map J 'bmkp-dired-jump)) (setq now (lookup-key dired-mode-map |

** files
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
  (use-package openwith
    :defer t
    :config (progn
              (when (require 'openwith nil 'noerror)
                (setq openwith-associations
                      (list
                                          ;                   (list (openwith-make-extension-regexp
                                          ;                           '("mpg" "mpeg" "mp3" "mp4"
                                          ;                           "avi" "wmv" "wav" "mov" "flv"
                                          ;                          "ogm" "ogg" "mkv"))
                                          ;                      "audacious"
                                          ;                     '(file))
                                          ;                    (list (openwith-make-extension-regexp
                                          ;                          '("xbm" "pbm" "pgm" "ppm" "pnm"
                                          ;                           "png" "bmp" "tif" "jpeg" "jpg"))
                                          ;                       "gpicview"
                                          ;                      '(file))
                                          ;                       (list (openwith-make-extension-regexp
                                          ;                             '("pdf"))
                                          ;                           "zathura"
                                          ;                          '(file))
                       (list (openwith-make-extension-regexp
                              '("doc" "docx" "ppt" "xls" "xlsx" "pptx"))
                             "LibreOffice"
                             '(file))
  
                       ))
                (openwith-mode 1)))
    :ensure t)
  
  
#+END_SRC

#+RESULTS:

** deft

#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :ensure t
    :bind
    ([f8] . deft))
  (setq deft-directory "~/Dropbox/Zettelkasten/"
        deft-default-extension "org"
        deft-time-format " %b-%Y %H:%M"
        deft-use-filename-as-title t
        deft-new-file-format "%Y%b%d"
        deft-text-mode 'org-mode
        deft-recursive nil
        deft-extensions '("org" "txt" "emacs" "bib" "ledger" "el" "tex")
        deft-auto-save-interval 15.0
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase))) 
  
  
  
  (add-hook 'after-init-hook 'deft)
  (add-hook 'deft-mode-hook #'visual-line-mode)
  
  
#+end_src

#+RESULTS:
| visual-line-mode |

** functionality
#+BEGIN_SRC emacs-lisp  :tangle yes
  (use-package s)
  (use-package org
    :ensure org-plus-contrib)
  (use-package unkillable-scratch
    :config
    (unkillable-scratch 1))
  
  
  (use-package aggressive-indent
    :custom (global-aggressive-indent-mode t)
    )
  
  ;;(straight-use-package '(org-plus-contrib :includes org))
  
  
  (setq org-modules
        (quote
         (ol-bibtex ol-docview ol-eww org-habit org-id org-inlinetask org-protocol org-tempo ol-w3m org-annotate-file ol-bookmark org-checklist org-collector org-depend org-invoice org-notify org-registry)))
  
  
  (defun kdm/html2org-clipboard ()
    "Convert clipboard contents from HTML to Org and then paste (yank)."
    (interactive)
    (kill-new (shell-command-to-string "xclip -o -t text/html | pandoc -f html -t json | pandoc -f json -t org --wrap=none"
                                       ))
    (yank))
  
  
  
  (use-package smartparens
    :ensure t
    :defer t
    :init
    (show-smartparens-global-mode 1))
  (smartparens-global-mode 1)
  (setq show-paren-style 'expression)
  
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "_" "_" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))
  (sp-local-pair 'org-mode "+" "+" :actions '(wrap))
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "=" "=" :actions '(wrap))
  (sp-local-pair 'org-mode "-" "-" :actions '(wrap))
  (sp-pair "'" nil :actions :rem)
  
#+END_SRC

#+RESULTS:
| org-mode | (:open - :close - :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) | (:open = :close = :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) | (:open ~ :close ~ :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) | (:open + :close + :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) | (:open * :close * :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add))                                                                  | (:open _ :close _ :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) | (:open / :close / :actions (wrap) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) |                                                             |                                                             |
| t        | (:open \\( :close \\) :actions (insert wrap autoskip navigate))                                           | (:open \{ :close \} :actions (insert wrap autoskip navigate))                                             | (:open \( :close \) :actions (insert wrap autoskip navigate))                                             | (:open \" :close \" :actions (insert wrap autoskip navigate))                                             | (:open " :close " :actions (insert wrap autoskip navigate escape) :unless (sp-in-string-quotes-p) :post-handlers (sp-escape-wrapped-region sp-escape-quotes-after-insert)) | (:open ( :close ) :actions (insert wrap autoskip navigate))                                               | (:open [ :close ] :actions (insert wrap autoskip navigate))                                               | (:open { :close } :actions (insert wrap autoskip navigate)) | (:open ` :close ` :actions (insert wrap autoskip navigate)) |
https://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting
https://ivanaf.com/emacs_drag-drop_pdfs_paste_html_custom_templates.html
(use-package smartparens 
:defer t 
:config
(setq sp-show-pair-from-inside nil)
(require 'smartparens-config)
:diminish smartparens-mode
:custom
(smartparens-global-mode t)
(global-highlight-parentheses-mode 1)
)
(sp-pair "'" nil :actions :rem)
(sp-pair "=" nil :actions :rem)


(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "_" "_" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
(sp-local-pair 'org-mode "+" "+" :actions '(wrap))
(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "=" "=" :actions '(wrap))
(sp-local-pair 'org-mode "-" "-" :actions '(wrap))

  
** calendar


#+BEGIN_SRC emacs-lisp :tangle yes
  
  (use-package calfw)
  (use-package calfw-org)
                                          ;   (use-package calfw-gcal)
  (use-package calfw-cal) 
  (setq package-check-signature nil)
                                          ;  (setq org-gcal-down-days '30)
                                          ;for http400 error, open scratch and evaluate (org-gcal-request-token) using C-x C-e
  
  
  (defun my-open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "pale green")  ; orgmode source
                                          ;    (cfw:cal-create-source "light goldenrod") ; diary source
      ))) 
  (add-hook 'cfw:calendar-mode-hook (lambda () (visual-fill-column-mode 0)))
                                          ;   (setq calendar-daylight-savings-starts '(3 11 year))
                                          ;  (setq calendar-daylight-savings-ends: '(11 4 year))
  (setq calendar-week-start-day 1)
  
  (setq diary-file "~/Dropbox/Zettelkasten/diary")
  
  
  
  (require 'org-gcal)
  (setq org-gcal-client-id "217294084435-7e5idjaji94bamhu6n5mnchamfl5it6r.apps.googleusercontent.com"
        org-gcal-client-secret "OlIZFIll-Md3n6NxVkpSWr-3"
        org-gcal-fetch-file-alist '(
      ("ua08veaq1ei5a9li8s2tiiecbg@group.calendar.google.com" . "~/Dropbox/Zettelkasten/timeblocking.org")
      ("betsy.yoon@gmail.com" . "~/Dropbox/Zettelkasten/events.org" )))
  
  (setq org-gcal-recurring-events-mode 'nested)
  
  
#+end_src

#+RESULTS:
: nested
#+begin_src emacs-lisp :tangle no
 (org-gcal-request-token)
#+end_src

#+RESULTS:
: #s(deferred #[257 "\303!>\204\304\305\306D\"\210\211\307H\303!>\204!\304\305\306D\"\210\310H\303!>\2043\304\305\306D\"\210\311H\312=\203I\313\314\315\"\210\316\317#\202p\211\312=\204b\313\320\321!P\322!\"\210\316\323#\202p\203m\324
: \"\210\325\312!\207" [cl-struct-request-response-tags org-gcal-token-plist org-gcal-token-file type-of signal wrong-type-argument request-response 3 1 4 nil org-gcal--notify "Got Error" "Could not contact remote service. Please check your network connectivity." error "Network connectivity issue %s: %s" "Status code: " number-to-string pp-to-string "Got error %S: %S" org-gcal--save-sexp deferred:succeed] 8 "
: 
: (fn RESPONSE)"] deferred:default-errorback deferred:default-cancel nil nil nil)

** windows
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-indirect-buffer-display 'current-window)
  (defun transpose-windows ()
    (interactive)
    (let ((this-buffer (window-buffer (selected-window)))
          (other-buffer (prog2
                            (other-window +1)
                            (window-buffer (selected-window))
                          (other-window -1))))
      (switch-to-buffer other-buffer)
      (switch-to-buffer-other-window this-buffer)
      (other-window -1)))
  
  (setq pop-up-windows nil)
  (setq switch-to-buffer-obey-display-actions t)
  
#+END_SRC

#+RESULTS:
: t


(use-package good-scroll
:config (good-scroll-mode 1)
)

** autosave/backup
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :init (progn
            (setq magit-repository-directories '("~/Dropbox/" ))))
  (setq global-auto-revert-mode t
        auto-save-interval 5)
  (auto-save-visited-mode 1)
  
  (add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))
  
  (setq vc-follow-symlinks t)
#+END_SRC

#+RESULTS:
: t

** org-protocol
#+BEGIN_SRC emacs-lisp :tangle yes
  
  (server-start)
  (require 'org-protocol)
  (require 'org-protocol-capture-html)
  (setq org-protocol-default-template-key "w")
  
  
#+END_SRC

#+RESULTS:
: w
** org-keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c C-x C-o") 'org-clock-out)
  (global-set-key (kbd "C-c <f2>") 'org-clock-out)
  (global-unset-key (kbd "C-v"))

  (global-set-key (kbd "<f1>") 'org-capture)
  (global-set-key (kbd "C-c C-x C-j") 'org-clock-goto)
  (define-key org-mode-map (kbd "C-a") 'org-beginning-of-line)
  (define-key org-mode-map (kbd "C-e") 'org-end-of-line)
  (define-key org-mode-map (kbd "C-.") 'org-todo)
  (bind-keys
   ("C-c r" . org-clock-report)
   ("C-c l" . org-store-link)
   ("C-c C-l" . org-insert-link)
   ("C-c b" . list-bookmarks)
   ("C-a" . org-beginning-of-line) 
   ("C-e" . end-of-line) 
   ("C-k" . org-kill-line)
   ("C-."   . org-todo)
   ("C-x /" . shrink-window-horizontally)
   ("C-x ." . org-archive-subtree-default)
  
   ([f1] . org-capture)
   ([f2] . org-clock-in)
   ;;f3 is helm
   ([f4] . org-refile)
   ;;f5 is projectile
   ([f6] . helm-bibtex-with-local-bibliography)
   ([f7] . org-agenda)
   ;;f8 is deft
                                          ; ([f10] . org-tree-to-indirect-buffer)
   ([f11] . org-id-goto)
   ([f12] . bury-buffer)     )
  
  
  (global-set-key (kbd "<f10>") (lambda ()
                                  (interactive)
                                  (let ((current-prefix-arg '(4)))
                                    (call-interactively #'org-tree-to-indirect-buffer))))
  
  
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (let ((current-prefix-arg '(4))) (call-interactively #'org-tree-to-indirect-buffer)) |

#+BEGIN_SRC emacs-lisp :tangle yes :results none
  
  
  (define-key key-translation-map (kbd "C-c <up>") (kbd "↑"))
  (define-key key-translation-map (kbd "C-c <down>") (kbd "↓"))
  (define-key key-translation-map (kbd "C-c =") (kbd "≠"))
  (define-key key-translation-map (kbd "C-c <right>") (kbd "→"))
  (define-key key-translation-map (kbd "C-c m") (kbd "—"))
  (define-key key-translation-map (kbd "C-_") (kbd "–"))
  (define-key key-translation-map (kbd "C-c d") (kbd "Δ"))
  (define-key key-translation-map (kbd "C-c z")  (kbd "∴"))
#+END_SRC

#+RESULTS:
: [8756]
** org hydra
#+begin_src emacs-lisp :tangle yes
  
  (defhydra hydra-org (:color amaranth :columns 3)
    "Org Mode Movements"
    ("n" outline-next-visible-heading "next heading")
    ("p" outline-previous-visible-heading "prev heading")
    ("N" org-forward-heading-same-level "next heading at same level")
    ("P" org-backward-heading-same-level "prev heading at same level")
    ("u" outline-up-heading "up heading")
    ("k" kill-region "kill region")
    ("y" yank "paste")
    ("l" helm-show-kill-ring "list" :color blue)  
    ("r" org-refile "refile")
    ("t" org-todo "todo")
    ("g" org-set-tags-command "tags")
    ("s" show-subtree "expand subtree")
    ("h" hide-subtree "collapse subtree")
    ("a" org-archive-subtree "archive")
    ("G" org-goto "goto" :exit t)
    ("q" nil "quit" :color blue)
    )
  
  
  
  
#+end_src

#+RESULTS:
: hydra-org/body


** scratch buffer
#+BEGIN_SRC emacs-lisp  :tangle yes
  ;; Set the default mode of the scratch buffer to Org
  (setq initial-major-mode 'org-mode)
  ;; and change the message accordingly
  (setq initial-scratch-message "\
  # This buffer is for notes you don't want to save. You can use
  # org-mode markup (and all Org's goodness) to organise the notes.
  # If you want to create a file, visit that file with C-x C-f,
  # then enter the text in that file's own buffer.
   
  ")
#+END_SRC

#+RESULTS:
: # This buffer is for notes you don't want to save. You can use
: # org-mode markup (and all Org's goodness) to organise the notes.
: # If you want to create a file, visit that file with C-x C-f,
: # then enter the text in that file's own buffer.
:  

* UI
("◉" "❤" "☆""♢" "★ ""⭆" )
"⁕"
"⁍" 
"❤"
#+BEGIN_SRC emacs-lisp  :tangle yes
  
  (use-package org-superstar
    :config
    (setq org-superstar-headline-bullets-list '("◉" "☆" "❤" "¶" "★" )
          org-superstar-item-bullet-alist (quote ((42  . 33) (43 . 62) (45 . 45)))
          )
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
  (setq org-startup-indented t
        org-hide-emphasis-markers t
        org-startup-folded t
        org-ellipsis " »"
        org-hide-leading-stars t)
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
  
  (setq org-startup-shrink-all-tables t)

#+END_SRC

#+RESULTS:
: t
** mode line format
:LOGBOOK:
CLOCK: [2021-06-08 Tue 13:51]--[2021-06-08 Tue 14:06] =>  0:15
:END:
#+begin_src emacs-lisp :tangle yes
  (setq-default mode-line-format '("%e"  mode-line-front-space
                                   mode-line-mule-info
                                   mode-line-modified
                                   mode-line-misc-info 
                                   mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
                                   (vc-mode vc-mode)
                                   "  " mode-line-modes  mode-line-end-spaces)
                )
  (display-time-mode 1)
#+end_src

#+RESULTS:
: t

** font encoding
:LOGBOOK:
CLOCK: [2021-10-18 Mon 11:25]--[2021-10-18 Mon 11:25] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
    
  (use-package unicode-fonts)
(unicode-fonts-setup)  
#+end_src

#+RESULTS:


#+BEGIN_SRC emacs-lisp  :tangle yes

  
    (defvar symbola-font (if (eq system-type 'gnu/linux)
                             (font-spec :name "Symbola" :size 14)
                           "Symbola"))
    (set-fontset-font "fontset-default" '(#x1100 . #xffdc)
                      '("NanumBarunpen" . "unicode-bmp" ))
    (set-fontset-font "fontset-default" '(#xe0bc . #xf66e) 
                      '("Nanumbarunpen" . "unicode-bmp"))
  
    (set-fontset-font "fontset-default" '(#x2000 . #x206F)
                      '("Symbola" . "unicode-bmp" ))
                                            ;
    (set-fontset-font "fontset-default" '(#x2190 . #x21FF)
                      '("Symbola" . "unicode-bmp" ))
    (set-fontset-font "fontset-default" '(#x2B00 . #x2BFF)
                      '("Symbola" . "unicode-bmp" ))
  
    (set-fontset-font "fontset-default" '(#x2200 . #x22FF)
                      '("Symbola" . "unicode-bmp" ))
  
    (set-fontset-font "fontset-default" '(#x25A0 . #x25FF)
                      '("Symbola" . "unicode-bmp" ))
  
    (set-fontset-font "fontset-default" '(#x2600 . #x26FF)
                      '("Symbola" . "unicode-bmp" ))
    (set-fontset-font "fontset-default" '(#x2700 . #x27BF)
                      '("Symbola" . "unicode-bmp" ))
  
    (set-fontset-font "fontset-default" '(#x1f800 . #x1f8ff)
                      '("Symbola" . "unicode-bmp" ))
  
    (set-fontset-font "fontset-default" '(#x3400 . #x4dbf)
                      '("NanumBarunpen" . "unicode-bmp" ))
    (set-fontset-font "fontset-default" '(#x20000 . #x2EBEF)
                      '("NanumBarunpen" . "unicode-bmp" ))  
  
  
                                            ;https://www.reddit.com/r/emacs/comments/8tz1r0/how_to_set_font_according_to_languages_that_i/e1bjce6?utm_source=share&utm_medium=web2x&context=3
    (when (fboundp #'set-fontset-font)
      (set-fontset-font t 'korean-ksc5601	
                        ;; Noto Sans CJK: https://www.google.com/get/noto/help/cjk/
                        (font-spec :family "Nanum Gothic Coding")))
    (dolist (item '(("Nanum Gothic Coding" . 1.0)))
      (add-to-list 'face-font-rescale-alist item))
  
    (setq use-default-font-for-symbols nil)
  
    (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8) 
  
#+END_SRC  

#+RESULTS:

** org-src
#+BEGIN_SRC emacs-lisp  :tangle yes
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t)
  
  (setq org-fontify-quote-and-verse-blocks t)
#+END_SRC

#+RESULTS:
: t

** accessibility
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra)
  (defhydra hydra-zoom (:color red)  "zoom"
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")
    ("o" (other-window) "other window")
    ("q" nil "quit" :color blue))
  
  (global-set-key (kbd "C-=") 'hydra-zoom/body)
  (use-package visual-fill-column)
  (setq visual-fill-column-center-text t)
#+END_SRC

#+RESULTS:
: t


* editing
:LOGBOOK:
CLOCK: [2021-09-02 Thu 18:05]--[2021-09-02 Thu 18:05] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
    (use-package yasnippet)
     (yas-minor-mode 1)
  
    (defhydra hydra-yasnippet (:color red :hint nil)
      "
                              ^YASnippets^
                --------------------------------------------
                  Modes:    Load/Visit:    Actions:
  
                 _g_lobal  _d_irectory    _i_nsert
                 _m_inor   _f_ile         _t_ryout
                 _e_xtra   _l_ist         _n_ew
                          reload _a_ll
                "
      ("n" down "done")
      ("p" down "up")
      ("N" outline-next-visible-heading "next heading")
      ("P" outline-previous-visible-heading "prev heading")
      ("d" yas-load-directory)
      ("e" yas-activate-extra-mode)
      ("i" yas-insert-snippet)
      ("f" yas-visit-snippet-file :color blue)
      ("n" yas-new-snippet)
      ("t" yas-tryout-snippet)
      ("l" yas-describe-tables)
      ("g" yas-global-mode :color red)
      ("m" yas-minor-mode :color red)
      ("a" yas-reload-all))
  
  
  (eval-after-load "yas-minor-mode" '(progn
 
  
    (define-key yas-minor-mode-map [backtab]    nil)
  
    ;; Strangely, just redefining one of the variations below won't work.
    ;; All rebinds seem to be needed.
    (define-key yas-minor-mode-map [(tab)]        nil)
    (define-key yas-minor-mode-map (kbd "TAB")    nil)
    (define-key yas-minor-mode-map (kbd "<tab>")  nil))
                   )
    (use-package flyspell)
    (define-key flyspell-mode-map (kbd "C-.") nil)
  
    (use-package ace-jump-helm-line)
    (eval-after-load "helm"
      '(define-key helm-map (kbd "C-'") 'ace-jump-helm-line))
  
  
  
#+end_src

#+RESULTS:
: ace-jump-helm-line


#+begin_src emacs-lisp
  
  (define-key yas-minor-mode-map [backtab]     'yas-expand)
  
  ;; Strangely, just redefining one of the variations below won't work.
  ;; All rebinds seem to be needed.
  (define-key yas-minor-mode-map [(tab)]        nil)
  (define-key yas-minor-mode-map (kbd "TAB")    nil)
  (define-key yas-minor-mode-map (kbd "<tab>")  nil)
  
#+end_src

#+RESULTS:


(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
  
  

* org-refile and archiving
:LOGBOOK:
CLOCK: [2021-09-06 Mon 15:03]--[2021-09-06 Mon 15:04] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/Dropbox/Zettelkasten/"
        org-default-notes-file "~/Dropbox/Zettelkasten/inbox.org"
        org-archive-location "~/Dropbox/Zettelkasten/journal.org::datetree/"
        org-contacts-files (quote ("~/Dropbox/Zettelkasten/contacts.org"))
        org-roam-directory "~/Dropbox/Zettelkasten/Zettels/"
        )
  (setq org-archive-reversed-order nil
        org-reverse-note-order t
        org-refile-use-cache t
        org-refile-allow-creating-parent-nodes t
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        )
  
  (setq org-refile-targets '(
                             ("~/Dropbox/Zettelkasten/journal.org" :maxlevel . 5)
                             ("~/Dropbox/Zettelkasten/inbox.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/readings.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/contacts.org" :maxlevel . 1)
                             ("~/Dropbox/Zettelkasten/ndd.org" :maxlevel . 3)
                             ("~/Dropbox/Zettelkasten/baruch.org" :maxlevel . 3)
                             ("~/Dropbox/Zettelkasten/personal.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/lis.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/recipes.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/sysadmin.org" :maxlevel . 1)
                             ("~/Dropbox/Zettelkasten/editing.org" :maxlevel . 2)
                             ("~/Dropbox/Zettelkasten/hold.org" :maxlevel . 1)
                             ("~/Dropbox/Zettelkasten/zettels.org" :maxlevel . 2)
                             )
  
  
        )
  
  (defun my-org-refile-cache-clear ()
    (interactive)
    (org-refile-cache-clear))
  (define-key org-mode-map (kbd "C-0 C-c C-w") 'my-org-refile-cache-clear)
  
  
  
  
                                          ; Refile in a single go
  
                                          ;  (global-set-key (kbd "<f4>") 'org-refile)
  
  
  (setq org-id-link-to-org-use-id (quote create-if-interactive)
        org-id-method (quote org)
        org-return-follows-link t
        org-link-keep-stored-after-insertion nil
        org-goto-interface (quote outline-path-completion)
        org-clock-mode-line-total 'current)
  
                                          ;   (add-hook 'org-mode-hook (lambda () (org-sticky-header-mode 1)))
  
  
  (setq global-visible-mark-mode t)
  
  
#+END_SRC

#+RESULTS:
: t


(setq org-agenda-files (directory-files-recursively "~/Dropbox/Zettelkasten/Zettels/" "\\.org$"))

(setq org-agenda-files
'("~/Dropbox/Zettelkasten/inbox.org"
"~/Dropbox/Zettelkasten/journal.org"
"~/Dropbox/Zettelkasten/readings.org"
"~/Dropbox/Zettelkasten/cal.org"
"~/Dropbox/Zettelkasten/contacts.org"
"~/Dropbox/Zettelkasten/lis.org"
"~/Dropbox/Zettelkasten/recipes.org"
"~/Dropbox/Zettelkasten/ndd.org"
"~/Dropbox/Zettelkasten/personal.org"
"~/Dropbox/Zettelkasten/sysadmin.org"
))

* *scheduling, todos*
** agenda

(setq org-agenda-prefix-format
'((agenda . " %i %-12:c%?-12t% s")
(todo . " %i %-5:c")
(tags . " %i %-12:c")
(search . " %i %-12:c")))

(setq org-agenda-files '("~/Dropbox/Zettelkasten"
"~/Dropbox/Zettelkasten/Zettels"
))

  
#+BEGIN_SRC emacs-lisp :tangle yes
  
        (add-hook 'org-agenda-mode-hook
                                        (lambda ()
                                          (visual-line-mode -1)
                                          (toggle-truncate-lines 1)))
  
         (setq org-agenda-format-date
               (lambda (date)
                 (concat "\n---------------------------------\n" (org-agenda-format-date-aligned date))))
  
  
       (setq org-agenda-overriding-columns-format "%40ITEM %4EFFORT %4CLOCKSUM %16SCHEDULED %16DEADLINE ")
       (setq org-global-properties '(("EFFORT_ALL" . "0:05 0:10 0:15 0:20 0:25 0:30 0:35 0:40 0:45 0:50 0:55 0:60")))
  
       (setq org-agenda-files '("~/Dropbox/Zettelkasten/journal.org"
                                "~/Dropbox/Zettelkasten/inbox.org"
                                "~/Dropbox/Zettelkasten/readings.org"
                                "~/Dropbox/Zettelkasten/contacts.org"
                                "~/Dropbox/Zettelkasten/ndd.org"
                                "~/Dropbox/Zettelkasten/baruch.org"
                                "~/Dropbox/Zettelkasten/personal.org"
                                "~/Dropbox/Zettelkasten/lis.org"
                                "~/Dropbox/Zettelkasten/recipes.org" "~/Dropbox/Zettelkasten/sysadmin.org"
                                "~/Dropbox/Zettelkasten/events.org"
                                "~/Dropbox/Zettelkasten/editing.org"
                                "~/Dropbox/Zettelkasten/zettels.org"  ;"~/Dropbox/Zettelkasten/Zettels/zettel-journal.org"
  ;                              "~/Dropbox/Zettelkasten/Zettels/index.org"
  ;                             "~/Dropbox/Zettelkasten/Zettels/RESEARCH.org"
                                ;"~/Dropbox/Zettelkasten/Zettels/20211021_toward-a-materialist-analysis-of-OER.org"
  
                                ))
  
  
       (setq org-agenda-prefix-format
             '((agenda . " %i %-12:c%?-12t% s")
               (todo . " %i %-12:c")
               (tags . " %i %-12:c")
               (search . " %i %-12:c")))
  
       (setq org-agenda-with-colors t
             org-agenda-start-on-weekday nil  ;; this allows agenda to start on current day
             org-agenda-current-time-string "✸✸✸✸✸"
             org-agenda-start-with-clockreport-mode t
             org-agenda-dim-blocked-tasks t
             org-agenda-window-setup 'only-window
             )
  
  
       ;;skips
       (setq org-agenda-skip-scheduled-if-done t
             org-agenda-skip-deadline-if-done t
             org-agenda-skip-timestamp-if-done t
             org-agenda-skip-deadline-prewarning-if-scheduled t
             )
  
       (setq org-agenda-clockreport-parameter-plist
             (quote
              (:link t :maxlevel 4 :narrow 30 :tcolumns 1 :indent t :tags t :hidefiles nil :fileskip0 t)))
  
       (setq org-clock-report-include-clocking-task t)
#+END_SRC

#+RESULTS:
: t
** org-super-agenda
:LOGBOOK:
CLOCK: [2021-10-13 Wed 17:03]--[2021-10-13 Wed 17:03] =>  0:00
:END:
                
#+begin_src emacs-lisp :tangle yes :results none
  (use-package org-super-agenda)
  (org-super-agenda-mode 1)
  (setq org-super-agenda-mode 1)
  (setq org-agenda-custom-commands
        '(
          ("l" . "just todo lists") ;description for "h" prefix
          ("lt" tags-todo "untagged todos" "-{.*}")
          ("ls" alltodo "all unscheduled" ((org-agenda-skip-function
                                            '(org-agenda-skip-entry-if 'todo '("습관" "HOLD"  "PROJ" "AREA")) )
                                           (org-agenda-todo-ignore-scheduled t) ))
          ("lx" "With deadline columns" alltodo "" 
           ((org-agenda-overriding-columns-format "%40ITEM %SCHEDULED %DEADLINE %EFFORT " )
            (org-agenda-view-columns-initially t)
            (org-agenda-sorting-strategy '(timestamp-up))
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("습관" "HOLD" "WAIT" "PROJ")) ) )      )
          ("la" "all todos" ((alltodo "" ((org-agenda-overriding-header "")
                                          (org-super-agenda-groups
                                           '(
                                             (:name "NOW" :tag "NOW")
                                             (:name "DEEP: necessary and timely" :and (:tag "DEEP" :tag "#necessary" :tag "@timely"))
                                             (:name "SHALLOW: necessary and timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@timely"))
                                             (:name "HOME" :and (:tag "HOME"))
  
                                             (:name "DEEP: necessary but not timely" :and (:tag "DEEP" :tag "#necessary" :tag "@nottimely"))
                                             (:name "SHALLOW: necessary but not timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@nottimely"))
    (:name "SHALLOW: timely" :and (:tag "SHALLOW" :tag "@timely"))
  
                                             (:name "DEEP: timely but not necessary" :and (:tag "DEEP" :tag "#wouldbenice" :tag "@timely"))
                                             (:name "SHALLOW: timely but not necessary" :and (:tag "SHALLOW" :tag "#wouldbenice" :tag "@timely"))                                                       
                                             (:name "necessary but not timely" :and (:tag "#necessary" :tag "@nottimely"))
                                             (:tag "workflow")
  
  
                                             ))))))
  
  
          ("g" "all UNSCHEDULED NEXT|TODAY|IN-PROG"
           ((agenda "" ((org-agenda-span 2)
                        (org-agenda-clockreport-mode nil)))
            (todo "NEXT|TODAY|IN-PROG"))
           ((org-agenda-todo-ignore-scheduled t)))
  
          ("z" "super agenda" ((agenda "" ((org-agenda-span 'day)
                                           (org-super-agenda-groups
                                            '((:name "Day"
                                                     :time-grid t
                                          ;   :date today
                                          ;    :todo "TODAY"
                                          ;  :scheduled today
                                                     :order 1)))))
                               (alltodo "" ((org-agenda-overriding-header "")
                                            (org-super-agenda-groups
                                             '(
                                            (:name "DEEP: necessary and timely" :and (:tag "DEEP" :tag "#necessary" :tag "@timely"))
                                                   (:name "SHALLOW: necessary and timely" :and (:tag "SHALLOW" :tag "#necessary" :tag "@timely"))
                                               (:name "wait" :todo "WAIT")
                                               ))))
                               )
           ((org-agenda-skip-function
             '(org-agenda-skip-entry-if 'todo '("습관" "HOLD"  "PROJ" "AREA")) )
            (org-agenda-todo-ignore-scheduled t) )
  
           )
  
  
  
          ))
            #+end_src

#+BEGIN_SRC emacs-lisp :tangle yes  :results none
 
#+END_SRC



          

#+RESULTS:
: 1
*** archived stuff
#+BEGIN_SRC emacs-lisp :tangle no
 (:name "Waiting"
:todo "WAIT" )
(:name "Next Items"
:time-grid t
:todo "NEXT")

(setq org-super-agenda-groups
'(
         

))
   (:name "today" :scheduled today)
                                            ;                (:name "next" :todo "NEXT")
                                                 (:name "In PROGRESS" :todo "PROG")
                                                 (:name "Next" :todo "NEXT")
                                                 (:name "baruch" :and ( :category "baruch" :not (:todo "WAIT") ))  
                                                 (:name "to read" :tag "read")
                                                 (:name "research" :tag "research")
                                                 (:name "Waiting" :todo "WAIT")
                                                 (:name "Deadlines" 
                                                        :and (:deadline t :scheduled nil))
  
                                                 (:name "ndd" :category "ndd")
                                                 (:name "lis" :category "lis")
                                                 (:name "csi" :category "CSI")
                                                 (:discard (:todo "HOLD"))
                                            ;     (:name "not scheduled"
                                            ;           :and (:deadline nil :scheduled nil))
                                                 (:name "past due" :scheduled past)
  
#+END_SRC

** org-todo
#+begin_src emacs-lisp :tangle yes :results none
  (setq org-enforce-todo-dependencies t
        org-clock-out-when-done t
        )
  
  (setq org-log-into-drawer t)
  
  (setq org-todo-keywords
        (quote
         ((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "WAIT(w)" "|" "DONE(d)"  "x(c)" )
          (type    "HOLD(l)"  "|" "DONE(d)")     )))
  
  (setq org-todo-keyword-faces
        '(("WAIT" :weight regular :underline nil :inherit org-todo :foreground "yellow")
                                          ;          ("TODO" :weight regular :underline nil :inherit org-todo :foreground "#89da59")
          ("TODO" :weight regular :underline nil :inherit org-todo :foreground "#d0b17c")
          ("NEXT" :weight regular :underline nil :inherit org-todo :foreground "#c7d800")
          ("PROG" :weight bold :underline nil :inherit org-todo :foreground "#fa4032")
          ("to-process" :foreground "magenta")
          ("to-read" :foreground "magenta")
          ("in-prog" :foreground "magenta")
          ("HOLD" :weight bold :underline nil :inherit org-todo :foreground "#336b87")))
  
  
  (use-package org-edna)
  (org-edna-mode 1)
  (setq org-log-done 'time)
  
#+end_src
** org-capture
:PROPERTIES:
:ID:       eqodj18147j0
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        '(
          ("a" "current activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** %? \n" :clock-in t :clock-keep t :kill-buffer nil )
  
          ("c" "calendar" entry (file+headline "~/Dropbox/Zettelkasten/inbox.org" "Events") "** %^{EVENT}\n%^t\n%a\n%?")
  
          ("e" "emacs log" item (id "config") "%U %a %?" :prepend t) 
          ("f" "Anki Flashcards")
          ("fb" "Anki basic" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic (and reversed card)\n:ANKI_DECK: Default\n:END:\n** Front\n%^{Front}\n** Back\n%^{Back}%?")
  
          ("fc" "Anki cloze" entry (file+headline "~/Dropbox/Zettelkasten/anki.org" "Dispatch Shelf") "* %<%H:%M>   \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Default\n:END:\n** Text\n%^{Front}%?\n** Extra")
  
          ("j" "journal" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** journal :journal: \n%U  \n%?\n\n"   :clock-in t :clock-resume t :clock-keep nil :kill-buffer nil :append t) 
  
          ("t" "todo" entry (file "~/Dropbox/Zettelkasten/inbox.org") "* TODO %? \nSCHEDULED: %t\n%a\n" :prepend nil)
  
          ("w" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
           "* %a \nSCHEDULED: %t %?\n%:initial" )
          ("x" "org-protocol" entry (file "~/Dropbox/Zettelkasten/inbox.org")
           "* TODO %? \nSCHEDULED: %t\n%a\n\n%:initial" )
          ("p" "org-protocol" table-line (id "pens")
           "|%^{Pen}|%A|%^{Price}|%U|" )
  
          ("y" "org-protocol" item (id "resources")
           "[ ] %a %U %:initial" )
  
          ))
  
  
  
#+END_SRC

#+RESULTS:
| a         | current activity | entry       | (file+olp+datetree ~/Dropbox/Zettelkasten/journal.org)  | ** %?        |     |
| :clock-in | t                | :clock-keep | t                                                       | :kill-buffer | nil |
| c         | calendar         | entry       | (file+headline ~/Dropbox/Zettelkasten/inbox.org Events) | ** %^{EVENT} |     |

removed templates:
- ("d" "download" table-line (id "reading") "|%^{Author} | %^{Title} | %^{Format}|"  )
- ("l" "look up" item (id "5br4n6815pi0") "[ ] %? %U %a" :prepend nil)
- ("s" "to buy" item (id "shopping") "[ ] %?" :prepend t)
- ("z" "zettel" entry (file "~/Dropbox/Zettelkasten/zettels.org") "* %^{TOPIC}\n%U\n %? \n%a\n\n\n" :prepend nil :unarrowed t)
-           ("m" "meditation" table-line (id "meditation") "|%u | %^{Time} | %^{Notes}|" :table-line-pos "II-1" )


    ("a" "Activities")
          ("aa" "current activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/journal.org") "** %? \n" :clock-in t :clock-keep t :kill-buffer nil )
  
          ("ab" "baruch activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/baruch.org") "** %? \n" :clock-in t :clock-keep t :kill-buffer nil )
  
          ("an" "ndd activity" entry (file+olp+datetree "~/Dropbox/Zettelkasten/ndd.org") "** %? %^g \n" :clock-in t :clock-keep t :kill-buffer nil )
  


(use-package org-plus-contrib)
#+RESULTS:
** org-clock
#+begin_src emacs-lisp :tangle yes
(setq org-clock-out-remove-zero-time-clocks t)
  
#+end_src

#+RESULTS:
: t

*** org-mru

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-mru-clock
    :bind     ("M-<f2>" . org-mru-clock-in)
    :config
    (setq org-mru-clock-how-many 80)
    (setq org-mru-clock-keep-formatting t)
    (setq org-mru-clock-completing-read 'helm--completing-read-default)
    )
  
  (setq org-clock-mode-line-total 'current)
  
#+END_SRC


*** chronos
#+begin_src emacs-lisp :tangle yes
  
  (use-package org-alert)
  (use-package chronos
    :config
    (setq chronos-expiry-functions '(chronos-sound-notify
                                     chronos-dunstify
                                     chronos-buffer-notify
                                     ))
    (setq chronos-notification-wav "~/Dropbox/emacs/.emacs.d/sms-alert-1-daniel_simon.wav")
    )
  (use-package helm-chronos
    :config
    (setq helm-chronos-standard-timers
          '(
            ;;intermittent fasting
            "=13:00/end fast + =21:00/begin fast"
  
            ))
  
    )
  
#+end_src

#+RESULTS:
: t

** org-tag
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-tag-alist '(
                        (:startgroup . nil)
                        ("ndd" . ?n)
                        ("self" . ?s)
                        ("baruch" . ?b)
                        ("sysadmin" . ?y)
                        ("home" . ?h)
                        (:endgroup . nil)
                        ))
  
    (setq org-complete-tags-always-offer-all-agenda-tags nil)
    (setq org-tags-column 0)
  
#+END_SRC

#+RESULTS:
: 0

#+begin_src emacs-lisp :tangle no
    (setq org-tag-alist '(  ("NOW" . ?n) ("workflow" . ?w)
                        (:startgroup . nil)
                        ("SHALLOW" . ?s) ("DEEP" . ?d) ("HOME" . ?h) 
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("#necessary" . ?c) ("#wouldbenice" . ?b)
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("@timely". ?t) ("@nottimely" . ?e)
                        (:endgroup . nil)
                       
                        ))
  
#+end_src
#+RESULTS:
: 0

** org-pomodoro
:PROPERTIES:
:ID:       pomodoro
:END:
:LOGBOOK:
CLOCK: [2021-10-18 Mon 10:47]--[2021-10-18 Mon 10:47] =>  0:00
CLOCK: [2021-05-04 Tue 11:33]--[2021-05-04 Tue 12:02] =>  0:29
CLOCK: [2021-05-04 Tue 10:21]--[2021-05-04 Tue 10:22] =>  0:01
CLOCK: [2021-05-04 Tue 10:18]--[2021-05-04 Tue 10:19] =>  0:01
CLOCK: [2021-04-30 Fri 12:07]--[2021-04-30 Fri 12:09] =>  0:02
CLOCK: [2021-04-30 Fri 12:06]--[2021-04-30 Fri 12:07] =>  0:01
CLOCK: [2021-04-30 Fri 12:03]--[2021-04-30 Fri 12:04] =>  0:01
CLOCK: [2021-04-30 Fri 11:58]--[2021-04-30 Fri 12:00] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  
  
  (use-package pomm)
  (use-package org-pomodoro)
  (setq org-pomodoro-ticking-sound-p t)
  (setq org-pomodoro-finished-sound-p t) ;i couldn't remember why this is nil [2021-10-16 Sat]:-- this is nil b/c the short break sound and long break sound signal the end of the pomodoro
  (setq org-pomodoro-overtime-sound "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
  (setq org-pomodoro-short-break-sound "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
  (setq org-pomodoro-long-break-sound  "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
  (setq org-pomodoro-finished-sound  "/home/betsy/.emacs.d/sms-alert-1-daniel_simon.wav")
  
  (setq org-pomodoro-keep-killed-pomodoro-time t)
  (setq org-pomodoro-manual-break nil)
  (setq org-pomodoro-ticking-sound-states '(:pomodoro :overtime))
  (setq org-pomodoro-length 25
        org-pomodoro-short-break-length 5)
  
#+end_src

#+RESULTS:
: 5
 (setq org-pomodoro-length 25
          org-pomodoro-short-break-length 5)
************
** checklists
#+begin_src emacs-lisp :tangle yes :results none
   (setq org-list-demote-modify-bullet
         '(("+" . "-") ("-" . "+") ))

   (defun my/org-checkbox-todo ()
     "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
     (let ((todo-state (org-get-todo-state)) beg end)
       (unless (not todo-state)
         (save-excursion
           (org-back-to-heading t)
           (setq beg (point))
           (end-of-line)
           (setq end (point))
           (goto-char beg)
           (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                  end t)
               (if (match-end 1)
                   (if (equal (match-string 1) "100%")
                       (unless (string-equal todo-state "DONE")
                         (org-todo 'done))
                     (unless (string-equal todo-state "✶")
                       (org-todo 'todo)))
                 (if (and (> (match-end 2) (match-beginning 2))
                          (equal (match-string 2) (match-string 3)))
                     (unless (string-equal todo-state "DONE")
                       (org-todo 'done))
                   (unless (string-equal todo-state "✶")
                     (org-todo 'todo)))))))))

   (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+end_src


* org
#+BEGIN_SRC emacs-lisp :tangle yes
                (use-package org-auto-tangle
                  :hook (org-mode . org-auto-tangle-mode)
  
                  )
    (setq org-html-head "<link rel=\"stylesheet\" href=\"\\home\\betsy\\Dropbox\\Zettelkasten\\css\\tufte.css\" type=\"text/css\" />")
    (setq org-agenda-export-html-style "/home/betsy/Dropbox/Zettelkasten/css/tufte.css")
  (setq org-export-with-toc nil)
  (setq org-export-initial-scope 'subtree)
    (setq org-export-with-section-numbers nil)
  (use-package org-clock-split)
#+END_SRC

#+RESULTS:


(add-hook 'org-mode-hook 'org-auto-tangle-mode) = :hook (org-mode . org-auto-tangle-mode)


* *mentat*
#+begin_src emacs-lisp :tangle yes
(load "annot")
  (require 'annot)

#+end_src

#+RESULTS:
: annot

** anki
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package anki-editor
  :after org
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t)
  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
  #+END_SRC

  #+RESULTS:
  | anki-editor-reset-cloze-number |
  :after org

  ; Reset cloze-number after each capture.

  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number)
  #+RESULTS:


** epub
   #+BEGIN_SRC emacs-lisp :tangle yes

(use-package olivetti)
(use-package nov
:config
  (setq nov-post-html-render-hook  (lambda () (visual-line-mode 1)))
  (add-hook 'nov-post-html-render-hook 'olivetti-mode)
)
   #+END_SRC

   #+RESULTS:
   : t

** pdfs
  #+BEGIN_SRC emacs-lisp :tangle yes
    
                    (use-package pdf-tools
                      :magic ("%PDF" . pdf-view-mode)
                      :config
                      (pdf-tools-install :no-query))
                    (use-package pdf-view-restore)
    
                     (setq pdf-view-continuous t)
                  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
         (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))
    
            (load "org-pdfview")
    
                                                    ;     (add-hook 'pdf-view-mode-hook (lambda () (visual-fill-column-mode 0)))
    
    
    
    
            (add-to-list 'org-file-apps 
                         '("\\.pdf\\'" . (lambda (file link)
                                           (org-pdfview-open link))))
    
        (use-package quelpa)
           (quelpa
            '(quelpa-use-package
              :fetcher git
              :url "https://github.com/quelpa/quelpa-use-package.git"))
           (require 'quelpa-use-package)
    
              (use-package pdf-continuous-scroll-mode
                :quelpa (pdf-continuous-scroll-mode :fetcher github :repo "dalanicolai/pdf-continuous-scroll-mode.el"))
        (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode)
    
    
    ;;to get PDFS to open on a specific page. added 12/27/21 from this link: https://emacs.stackexchange.com/questions/30344/how-to-link-and-open-a-pdf-file-to-a-specific-page-skim-adobe. haven't tested it out yet. 
        (org-add-link-type "pdf" 'org-pdf-open nil)
    
    (defun org-pdf-open (link)
      "Where page number is 105, the link should look like:
       [[pdf:/path/to/file.pdf#page=105][My description.]]"
      (let* ((path+page (split-string link "#page="))
             (pdf-file (car path+page))
             (page (car (cdr path+page))))
        (start-process "view-pdf" nil "evince" "--page-index" page pdf-file)))
    
  #+END_SRC

  #+RESULTS:
  | (lambda nil (visual-fill-column-mode 0)) | pdf-continuous-scroll-mode | pdf-tools-enable-minor-modes | pdf-view-restore-mode |

  (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
  (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" .  org-pdfview-open))


  (use-package org-pdf-tools
  :straight t)

  (use-package org-noter-pdf-tools
  :straight t)

** org-roam
:PROPERTIES:
:ID:       qjfd04u0u7j0
:END:

:file-name "%(format-time-string \"%Y%m%d-%H%M_${slug}\" (current-time) )"

(file "~/Dropbox/Zettelkasten/Zettels/%(format-time-string \"%Y%m%d-%H%M_${slug}\" (current-time) ${slug}.org")

    (setq org-roam-capture-templates '(("d" "default" plain :target 
                                        "* ${title}\n:PROPERTIES:\n:VISIBILITY: all\n:CREATED: %U\n:CATEGORY: zettels\n:CONTEXT: %a\n:END:\n%?\n\n
  \n\n\n
  ----------------------
  \n
  - What is the purpose of this zettel?\n
  - What is the nature of the content I wish to include in this zettel?\n
  - How does it relate to the existing network?\n
  - How do I wish to discover this information in the future?\n" 
                                        "#+title: ${title}" :unnarrowed t :kill-buffer t)))

                                        

  (setq org-roam-capture-templates '(("d" "default" plain "%$" #'org-roam--capture-get-point "* ${title}\n:PROPERTIES:\n:VISIBILITY: all\n:CREATED: %U\n:CATEGORY: zettels\n:CONTEXT: %a\n:END:\n%?\n\n
- What is the purpose of this zettel?\n
- What is the nature of the content I wish to include in this zettel?\n
- How does it relate to the existing network?\n
- How do I wish to discover this information in the future?\n

" :file-name "%(format-time-string \"%Y%m%d-%H%M_${slug}\" (current-time) )"
                                      "#+title: ${title}" :unnarrowed t :kill-buffer t)))

                                        (file+head "%<%Y%m%d%>_${slug}.org" "#+title: ${title}\n   \n\n\n
  ----------------------
  \n
  - What is the purpose of this zettel?\n
%?
  - What is the nature of the content I wish to include in this zettel?\n
  - How does it relate to the existing network?\n
  - How do I wish to discover this information in the future?\n")

                                      
#+begin_src emacs-lisp  :tangle yes 
    
      (use-package org-roam
    :bind 
       ("C-c <f1>" . org-roam-capture))

       (setq org-roam-capture-templates '(("d" "default" plain "#+title: ${title}\n* ${title}\n%?\n* Metadata \n- What is the purpose of this zettel?\n\n- What is the nature of the content I wish to include in this zettel?\n- How does it relate to the existing network?\n- How do I wish to discover this information in the future?" :target
   (file+head "%<%Y%m%d%H%M%S>_${slug}.org" "") :jump-to-captured t :unnarrowed t)))
    
    (setq org-roam-completion-system 'helm)
    
     
    (setq org-roam-v2-ack t)
    
    
      (defun my/org-roam--title-to-slug (title) ;;<< changed the name
        "Convert TITLE to a filename-suitable slug."
        (cl-flet* ((nonspacing-mark-p (char)
                                      (eq 'Mn (get-char-code-property char 'general-category)))
                   (strip-nonspacing-marks (s)
                                           (apply #'string (seq-remove #'nonspacing-mark-p
                                                                       (ucs-normalize-NFD-string s))))
                   (cl-replace (title pair)
                               (replace-regexp-in-string (car pair) (cdr pair) title)))
          (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-")  ;; convert anything not alphanumeric << nobiot underscore to hyphen
                          ("__*" . "-")  ;; remove sequential underscores << nobiot underscore to hyphen
                          ("^_" . "")  ;; remove starting underscore
                          ("_$" . "")))  ;; remove ending underscore
                 (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
            (downcase slug))))
    
    
      (setq org-roam-title-to-slug-function 'my/org-roam--title-to-slug)
    

#+end_src

#+RESULTS:
: my/org-roam--title-to-slug

** references/citations

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package org-ref)
  (setq reftex-default-bibliography '("~/Dropbox/Zettelkasten/references.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/Dropbox/Zettelkasten/readings.org"
        org-ref-default-bibliography '("~/Dropbox/Zettelkasten/references.bib")
        org-ref-pdf-directory "~/Dropbox/Library/BIBTEX/"
        org-ref-prefer-bracket-links t
        )

  (setq bibtex-completion-bibliography "~/Dropbox/Zettelkasten/references.bib"
        bibtex-completion-notes-path "~/Dropbox/Zettelkasten/readings.org")

  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))


                                          ;  (setq pdf-view-continuous nil)

                                          ;  (setq bibtex-autokey-year-title-separator "")
                                          ; (setq bibtex-autokey-titleword-length 0)


  (setq bibtex-completion-notes-template-one-file "\n* ${author} (${year}). /${title}/.\n:PROPERTIES:\n:Custom_ID: ${=key=}\n:ID: ${=key=}\n:CITATION: ${author} (${year}). /${title}/. /${journal}/, /${volume}/(${number}), ${pages}. ${publisher}. ${url}\n:DISCOVERY:\n:DATE_ADDED: %t\n:READ_STATUS:\n:INGESTED:\n:FORMAT:\n:TYPE:\n:AREA:\n:END:")

  (setq bibtex-maintain-sorted-entries t)

  (use-package org-noter
    :ensure t
    :defer t
    :config
    (setq org-noter-property-doc-file "INTERLEAVE_PDF"
          org-noter-property-note-location "INTERLEAVE_PAGE_NOTE"
          org-noter-default-notes-file-names "~/Dropbox/Zettelkasten/readings.org"
          org-noter-notes-search-path "~/Dropbox/Zettelkasten/"
          ;;org noter windows
          org-noter-always-create-frame nil
          org-noter-notes-window-location (quote horizontal-split)
          org-noter-doc-split-fraction (quote (0.75 . 0.75))
          org-noter-kill-frame-at-session-end nil

          org-noter-auto-save-last-location t
          org-noter-default-heading-title "$p$: "
          org-noter-insert-note-no-questions t
          org-noter-insert-selected-text-inside-note t
          ))
                                          ;       (setq org-noter-notes-window-location 'other-frame)
                                          ;      (setq org-noter-default-heading-title "p. $p$") 
    (use-package interleave 
      :defer t
      )


#+END_SRC

#+RESULTS:

** bibtex
#+begin_src emacs-lisp :tangle yes
  (setq bibtex-autokey-additional-names "etal"
        bibtex-autokey-name-separator "-"
        bibtex-autokey-name-year-separator "_"
        bibtex-autokey-names 2
        bibtex-autokey-titleword-length 0
              bibtex-autokey-titleword-separator ""
      bibtex-autokey-year-length 4
    bibtex-autokey-name-case-convert-function 'capitalize
        )

#+end_src

#+RESULTS:
: capitalize

* latex
#+begin_src emacs-lisp :tangle yes 
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))



  (setq TeX-auto-save t)
  (setq TeX-parse-self t)


#+end_src

#+RESULTS:


  (use-package tex :ensure auctex)


  (use-package company-auctex)
  (company-auctex-init)


* load files
:LOGBOOK:
CLOCK: [2021-04-13 Tue 10:17]--[2021-04-13 Tue 10:17] =>  0:00
:END:

#+RESULTS:
: -0.8

#+BEGIN_SRC emacs-lisp :tangle yes
  (find-file "~/Dropbox/Zettelkasten/inbox.org")
     (find-file "/home/betsy/.emacs")
 
  
   (define-key dired-mode-map (kbd "M-z") 'ace-jump-mode)
#+END_SRC  

#+RESULTS:


 
  
  
