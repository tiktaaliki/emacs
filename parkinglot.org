
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
   ;(use-package centered-window-mode)
  ; (use-package centered-cursor-mode
  ; :defer t
  ; )

 
   (define-key key-translation-map (kbd "C-c s") (kbd "ß"))
   (define-key key-translation-map (kbd "C-c o") (kbd "ö"))

   (define-key key-translation-map (kbd "C-c a") (kbd "ä"))
   (define-key key-translation-map (kbd "C-c u") (kbd "ü"))


              ("M-_" . insert-pair)
              ("M-*" . insert-pair)
              ("M-\/" . insert-pair)
;(add-hook 'org-mode-hook 'turn-on-flyspell)

       ; (eval-after-load 'org '(require 'org-pdfview))


 ;    (defun my-org-clock-select-task ()
   ;      (interactive)
    ;     (org-clock-select-task))


#+end_src 

* buffer management
#+BEGIN_SRC emacs-lisp :tangle yes

(defun kill-other-buffers ()
     "Kill all other buffers."
     (interactive)
     (mapc 'kill-buffer 
           (delq (current-buffer) 
                 (remove-if-not 'buffer-file-name (buffer-list)))))

(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
          (defun unfill-paragraph (&optional region)
            "Takes a multi-line paragraph and makes it into a single line of text."
            (interactive (progn (barf-if-buffer-read-only) '(t)))
            (let ((fill-column (point-max))
                  ;; This would override `fill-column' if it's an integer.
                  (emacs-lisp-docstring-fill-column t))
              (fill-paragraph nil region)))

;   (add-hook 'after-init-hook 'org-clock-persistence-insinuate)

#+END_SRC

#+RESULTS:
: kill-other-buffers

* structure editing
#+BEGIN_SRC emacs-lisp :tangle yes

                                        
 #+BEGIN_SRC emacs-lisp :tangle yes


 ;(setq csv-separators '(":" "	"))
    ;(setq org-image-actual-width 350)
    ;(setq org-sparse-tree-default-date-type 'all)


					    ;(require 'smart-quotes) 


;    (add-to-list 'insert-pair-alist (list ?\* ?\*))
 ;   (add-to-list 'insert-pair-alist (list ?\_ ?\_))
  ;  (add-to-list 'insert-pair-alist (list ?\/ ?\/))
					    ;   (add-to-list 'insert-pair-alist (list ?\" ?\"))

 (setq org-habit-following-days 5)
   (setq org-habit-show-habits-only-for-today t)
   (setq  org-habit-show-all-today t)
   (setq org-habit-preceding-days 12)
                                           ;   (setq org-habit-completed-glyph 128504)
   (setq org-habit-show-done-always-green t)
   (setq org-habit-graph-column 60)

      (org-edna-mode)

 #+END_SRC

          ;  (defun shr-html2text ()
                                             ;   "Replacement for standard html2text using shr."
                                             ;  (interactive)
                                             ; (let ((dom (libxml-parse-html-region (point-min) (point-max)))
                                             ;      (shr-width fill-column)
                                             ;      (shr-inhibit-images t)
                                             ;     (shr-bullet " "))
                                             ;    (erase-buffer)
                                             ;   (shr-insert-document dom)
                                             ;  (goto-char (point-min))))

* mu4e

 #+BEGIN_SRC emacs-lisp :tangle yes
              (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") 
             ; (use-package mu4e) 
             ; (use-package mu4e-contrib)
           (require 'mu4e)
           (require 'org-mu4e)
              ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
              (setq mu4e-sent-messages-behavior 'delete)
              (setq message-kill-buffer-on-exit t)
              (setq mu4e-change-filenames-when-moving t)
              (setq mu4e-compose-format-flowed t)
              (setq smtpmail-default-smtp-server "smtp.gmail.com")
       (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
       (add-hook 'mu4e-view-mode-hook 'visual-fill-column-mode)

    ;;  (defun vfcm-on ()
    ;;  ;turn on visual fill column mode
    ;;  (visual-fill-column-mode 1))

    ;; (add-hook 'mu4e-view-mode-hook #'vfcm-on)




    ;  (setq visual-fill-column-width 100)

     (defun no-auto-fill ()
       "Turn off auto-fill-mode."
       (auto-fill-mode -1))





    (defun vcfm-off ()
    ;turn off visual fill column mode
    (visual-fill-column-mode nil))

    (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
    (add-hook 'mu4e-headers-mode-hook (lambda ()(visual-line-mode -1)))
  #+END_SRC
  
  #+RESULTS:
  | lambda | nil | (visual-line-mode -1) |
  
** message view

  #+BEGIN_SRC emacs-lisp :tangle yes
;  (setq mu4e-attachment-dir "/home/betsy/Dropbox/Spring 2019/")




  (setq shr-color-visible-luminance-min 50) 
  (setq shr-color-visible-distance-min 5)
  ;(setq mu4e-view-html-plaintext-ratio-heuristic 'most-positive-fixnum)
  (setq message-yank-prefix ""
        message-yank-empty-prefix ""
        message-yank-cited-prefix "")

  (setq w3m-default-desplay-inline-images t)
    (defun mu4e-action-view-in-w3m ()
      "View the body of the message in emacs w3m."
      (interactive)
      (w3m-browse-url (concat "file://"
          (mu4e~write-body-to-html (mu4e-message-at-point t)))))


  ;; customize the reply-quote-string
  (setq message-citation-line-format "\n\nOn %a %d %b %Y at %R, %f wrote:\n")
  ;; choose to use the formatted string
  (setq message-citation-line-function 'message-insert-formatted-citation-line)


  (setq mu4e-view-scroll-to-next nil)

  (add-hook 'message-mode-hook 'visual-fill-column-mode)


  (use-package bbdb)

  (bbdb-initialize)
  (autoload 'bbdb-insinuate-mu4e "bbdb-mu4e")
  (bbdb-initialize 'message 'mu4e)

  (setq bbdb-mail-user-agent 'mu4e-user-agent)
  ;(setq mu4e-view-mode-hook 'bbdb-mua-auto-update visual-line-mode)
  (setq mu4e-compose-complete-addresses t)
  (setq bbdb-mua-pop-up t)
  (setq bbdb-mua-pop-up-window-size 5)
  (setq mu4e-view-show-addresses t)  
  (setq bbdb-default-country "United States")



  #+END_SRC

  #+RESULTS:
  : United States

** headers view

   (setq mu4e-headers-fields
	  '( (:human-date    .  15)    ;; alternatively, use :human-date
	     (:flags         .   5)
	     (:from          .  20)
;	     (:thread-subject       . 70 )
             (:thread-subject       . 120 )
	     )) 


  #+BEGIN_SRC emacs-lisp :tangle yes

 
     (setq org-mu4e-link-query-in-headers-mode nil)
     ;(setq mu4e-update-interval 60)
     ;(setq mu4e-index-update-in-background t)
     (setq mu4e-view-prefer-html t)
     (setq mu4e-headers-skip-duplicates t)
     (setq mu4e-headers-auto-update t)
     (setq mu4e-view-show-addresses t)
     (setq mu4e-headers-date-format "%x")
     (setq mu4e-headers-time-format "%H:%M")
  #+END_SRC

  #+RESULTS:
  : %H:%M

** settings

  #+BEGIN_SRC emacs-lisp :tangle yes

    ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "true")

  #+END_SRC 

  #+RESULTS:
  : true

** folders

  #+BEGIN_SRC emacs-lisp :tangle yes

  (setq mu4e-maildir-shortcuts
    '( ("/INBOX"  . ?i)
   	("/Sent"   . ?s)
   	("/Trash"  . ?t)
   	("/All"    . ?a)))

  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/Sent")
  (setq mu4e-trash-folder  "/Trash")
  (setq mu4e-refile-folder "/All")
  (setq mu4e-maildir "~/Maildir")
  (setq mu4e-attachment-dir "~/Dropbox")
  #+END_SRC 

  #+RESULTS:
  : ~/Dropbox

  






* writing environment
  #+BEGIN_SRC emacs-lisp :tangle yes

     (use-package writeroom-mode :defer t)
     (setq writeroom-extra-line-spacing 2)
     (setq writeroom-restore-window-config t)
     (setq writeroom-major-modes '(text-mode org-mode))
  (setq writeroom-fullscreen-effect 'maximized)
                                            ;  global-writeroom-mode t

     (use-package olivetti :defer t)
  #+END_SRC

  #+RESULTS:

* auctex


  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
       (setq-default TeX-master nil)

  (setq TeX-view-program-selection
  '(((output-dvi has-no-display-manager)
     "dvi2tty")
    ((output-dvi style-pstricks)
     "dvips and gv")
    (output-dvi "xdvi")
    (output-pdf "PDF Tools")
    (output-html "xdg-open")))
