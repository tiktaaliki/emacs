
#+STARTUP: content


* files
:PROPERTIES:
:visibility: all
:END:
| [[file:12.ndd.org][12.ndd]]            |
| [[file:4.work.org][4.work]]            |
| [[file:2.budget.org][2.budget]]          |
| [[file:8.personal.org][8.personal]]        |
| [[file:5.journal.org][5.journal]]         |
| [[file:6.calendar.org][6.calendar]]        |
| [[file:3.notes.org][3.notes]]           |
| [[file:9.reference-vault.org][9.reference-vault]] |
| [[file:7.lis.org][7.library science]] |
| [[file:10.games.org][10.games]]          |
| [[file:11.references.bib][11.references]]     |
| [[file:~/Dropbox/emacs/settings.org][init file]]         |
| [[file:~/Dropbox/emacs/.emacs][emacs file]]        |
|                   |

* conkeror user manual

*** Overview of the Keys

***** Browsing
| key   | M-x command | meaning                     |
| g     | find-url    | open new URL                |
| B     | back        |                             |
| F     | forward     |                             |
| r     | reload      |                             |
| C-g   | abort       | stop                        |
| C-h i | help-page   | Show this page.             |
| C-h t | tutorial    | Show the Conkeror tutorial. |
***** Movement
| C-a | beginning of line      |
| C-e | end of line            |
| C-f | Forward a column       |
| C-b | backward a column      |
| C-n | Forward a line         |
| C-p | backward a line        |
| C-v | Page down              |
| M-v | Page up                |
| M-< | Beginning of document  |
| M-> | End of document        |
| C-s | Open i-search forward  |
| C-r | Open i-search backward |
***** I-Search
| <10>       | <15>            |
| C-s        | Search forward  |
| C-r        | Search backward |
| C-g        | Quit i-search (jump back to where i-search started) |
| backspace  | Undo search     |
| any modifier plus a key, RET or TAB | Close i-search  |

*** Webjumps

Webjumps are similar to, but potentially more powerful than Firefox's bookmark keywords. You type a webjump name into the location prompt, followed by one or more search terms. Conkeror substitutes your search terms into an url associated with the webjump.

Conkeror has a few webjumps already, but you can find many more, and share your own at the webjumps page of the conkeror wiki.
| conkerorwiki    | Search conkeror.org               |
| answers         | search answers.com                |
| bugzilla        | search mozilla bugzilla           |
| clhs            | search the Common Lisp Hyper Spec |
| cliki           | search the Common Lisp wiki       |
| creativecommons | search creativecommons.org        |
| dictionary      | Search dictionary.reference.com   |
| duckduckgo      | Search with duckduckgo            |
| ebay            | search ebay.com                   |
| google          | Search with google                |
| image           | Search google images              |
| kuro5hin        | search kuro5hin.com               |
| lucky           | Google "I'm feeling lucky" search |
| maps            | Search Google Maps                |
| ratpoisonwiki   | search the ratpoison wiki         |
| savannah        | search savannah.gnu.org           |
| scholar         | search google scholar             |
| slang           | Search urbandictionary.com        |
| slashdot        | search slashdot.com               |
| sourceforge     | search sourceforge.net            |
| stumpwmwiki     | search the StumpWM wiki           |
| wikipedia       | Search wikipedia.org              |
| wiktionary      | Search wiktionary.org             |
| yahoo           | search yahoo                      |

delicious webjumps can be added by putting the following in your rc file:

add_delicious_webjumps("myusername");

this will create the following webjumps:
adelicious	Add a delicious bookmark.
delicious	View your delicious bookmarks
sdelicious	Search your delicious bookmarks
sadelicious	Search all delicious bookmarks

lastfm webjumps can be added by putting the following in your rc file:

define_lastfm_webjumps("myusername");

this will create the following webjumps:
lastfm	 
lastfm-user	 
lastfm-music	 
lastfm-group	 
lastfm-tag	 
lastfm-label	 
lastfm-event	 

You can easily add your own custom webjumps as such:

define_webjump("reddit", "http://www.reddit.com/search?q=%s");

The above will define the "reddit" webjump which searches reddit threads. The "%s" in the URL will be replaced by the search term you enter after the webjump name. I.e. entering "reddit haskell compiler" in the minibuffer will redirect you to the search results for reddit threads matching "haskell compiler" as a search string.
*** Buffer Management
| <10>       | <25>                      |
| C-u g      | Open an URL in a new buffer |
| C-x b      | Select a buffer based on it's name. |
| M-p        | previous buffer           |
| M-n        | Next buffer               |
| C-x k      | kill buffer               |
| C-x 5 f or C-u C-u g | Open an URL in a new window |
| C-x 5 0    | Close the current window (and all buffers in it) |
| C-x C-c    | Quit conkeror             |

*** Universal Argument

Conkeror support the universal argument, C-u. It's a prefix binding that changes how a command behaves. In Conkeror, C-u has two main effects. The first effect is that the command will be executed multiple times. For example, typing C-u C-n will cause conkeror to scroll down 4 lines. C-u 12 C-n will cause conkeror to scroll down 12 lines. The second effect is to open in a new buffer or a new window. C-u g conkeror.org RET This opens the conkeror project web page in a new buffer. C-u C-u n 12 RET will open link no. 12 in a new window.

There are some commands where the effect is ambiguous. Does C-u B go back four pages in the history or does it go back one and open the result in a new buffer? We are working on adding a second universal argument that would allow you to do both. 

* key bindings
- M-x auto-fill-mode, C-x f --> fill column variable
- M-q to reformat paragraph
- c-c c-x b --> hoist a headline
- set tags c-c c-c
- set property: C-c C-x p (org-set-property) Style: habit
- C-u C-x s or C-x s --> save all open buffers

* to dos

*** [TODO] get NY driver's license -- see when James can go
*** [TODO] get new bank
***** which bank to use?
******* TD bank
******* simple
******* ally bank
*** [TODO] add verizon payments to shared bills spreadsheet
*** [TODO] figure out website
*** [TODO] add Yongchan to KEEP alumni mailing list
:LOGBOOK:
CLOCK: [2017-03-19 Sun 16:13]--[2017-03-19 Sun 16:13] =>  0:00
:END:
*** [TODO] contact CVS health benefit extras - 888-789-0404
*** [TODO] post event on NDD website
*** [✓] see if Meejin, Haruki, and Jas are coming
- State "[✓]"        from "[TODO]"     [2017-04-09 Sun 21:51]


* notes on intro to programming
*** key bindings
- M-C-\ --> indent code
| <11>        | <17>              | <60>                                                         |
|             |                   |                                                              |
|-------------+-------------------+--------------------------------------------------------------|
| C-x C-e     | eval-last-sexp    | evaluates the previous symbolic expression and returns the value in the echo area |
| C-u C-x C-e |                   | returns C-x C-e value after the expression and not in the echo area |
| C-x b       | switch-to-buffer  | switches to most recent buffer that is NOT visible           |
| C-x o       | other-window      |                                                              |
|             | other-buffer      |                                                              |
|             | set-buffer        |                                                              |

| symbol | <10>       | <50>                                               |   |
|--------+------------+----------------------------------------------------+---|
| +      | number     | sums the argument                                  |   |
|        |            |                                                    |   |



| concat           | strings             | combines 2+ strings                                                                 |   |
| substring        | strings and numbers | returns part of a string based on the numbers given                                 |   |
| number-to-string | number              | converts number to string                                                           |   |
| message          |                     | send messages to user                                                               |   |
| current-buffer   |                     |                                                                                     |   |
| buffer-name      |                     |                                                                                     |   |
| buffer-size      |                     | # of words in current buffer                                                        |   |
| point            |                     | returns # that tells u what number character is at the cursor starting from the top |   |
| point-min        |                     | minimum permissible value of point in current buffer                                |   |
| point-max        |                     | value of maximum permissible value of point in current buffer                       |   |
|                  |                     |                                                                                     |   |

(switch-to-buffer (other-buffer (current-buffer) t))
--> other buffer tells it to skip the current buffer
--> other buffer has 2 arguments: 
      1. (current-buffer): skip current buffer
      2. t: ok to switch to visible buffer

(switch-to-buffer (other-buffer))  
***** C-x C-e : eval-last-sexp
    - sexp = symbolic expression
*** symbols:
    2 types:
    - value AND/OR 
    - function definition (a set of instructions for the computer)
*** error messages
    - void-variable --> function does not have a value as a variable
    - void-function-this --> function did not have a definition
*** functions
    - first item of a list that is not preceded by a quote mark.
    - command for the computer. 
    - lists preceded by a quote mark are lists. the quote mark tells lisp to do nothing with the list and to just take it as written

*** arguments: 
          - arguments are the atoms or list that follow a function
          - e.g., in (+ 2 2), + is the function, and 2 2 are the arguments
        - arguments can be symbols that return value when evaluated
      - e.g., "fill-column", which is a symbol that returns a value when used w/o parentheses, and an be used as an argument 

***** data types:
     - numbers
     - strings (text)

***** substring: 
     - takes 3 arguments:
       1. string of characters
       2. number indicating the beginning of substring
       3. number indicating end of substring
***** message
     - (message "The name of this buffer is: %s." (buffer-name))
       - function "buffer-name" returns the name of the buffer as a string. function "message" then inserts this string where %s is. (%s can be ssss
       - %d -> print value as an integer
	 - (message "The value of fill-column is %d." fill-column)
	   fill-column is a variable so it's not put in parentheses
           - cf. "buffer-name" is a function, so it is put in parentheses.
*** setting the value of a variable
    - functions: set, setq, let
***** set:
     - (set 'flowers '(rose violet daisy buttercup)) 
       - the SET function RETURNS the stuff in the innermost parentheses
       - thereafter, eval-ing flowers (no quotes or parentheses) returns (rose violet daisy buttercup)
       - OTOH, evaling 'flowers returns flowers (because the qm tells lisp to take what follows as given).
***** setq:
     - same as SET, except the first argument (in the previous one, 'flowers) is quoted automatically
       (setq carnivores '(lion tiger leopard))
     - (set 'carnivores '(lion tiger leopard))
     - (setq trees '(pine fir oak maple)
             herbivores '(gazelle antelope zebra))
       - can use setq to set multiple values to multiple variables.
     - for COUNTING:
       (setq counter 0) ; the initializer. sets the counter variable to zero
       (setq counter (+ counter 1)) ; This is the incrementer.
       counter ; This is the counter.
*** function definitions
    - mark-whole-buffer: this is a symbol. it has code attached to it that tells the computer what to do when the function is called.
    - composed of 5 parts:
      1. name of symbol that is attached to function definition
      2. list of arguments to be passed to the function
      3. documentation describing the function
      4. an expression to make the function interactive (i.e., allowing you to use M-x __ or a keybinding)
      5. the body (i.e., code that tells comp what to do
	 (defun function-name (arguments...)
	 "optional documentation"
	 (interactive argument-passing-info)
	 body...)

(defun multiply-by-seven (number) -->
  "Multiply NUMBER by seven."
  (* 7 number))



