
#+STARTUP: content


* files
:PROPERTIES:
:visibility: all
:END:
| [[file:4.work.org][4.work]]            |
| [[file:2.budget.org][2.budget]]          |
| [[file:8.personal.org][8.personal]]        |
| [[file:5.journal.org][5.journal]]         |
| [[file:6.calendar.org][6.calendar]]        |
| [[file:3.notes.org][3.notes]]           |
| [[file:9.reference-vault.org][9.reference-vault]] |
| [[file:7.lis.org][7.library science]] |
| [[file:10.games.org][10.games]]          |
| [[file:11.references.bib][11.references]]     |
| [[file:12.ndd.org][12.ndd]]            |
| [[file:~/Dropbox/emacs/settings.org][init file]]         |
| [[file:~/Dropbox/emacs/.emacs][emacs file]]        |
|                   |
* dkfjdk* 
      
* key bindings
- M-x auto-fill-mode, C-x f --> fill column variable
- M-q to reformat paragraph
- c-c c-x b --> hoist a headline
- set tags c-c c-c
- set property: C-c C-x p (org-set-property) Style: habit
- C-u C-x s or C-x s --> save all open buffers

* to dos
** [TODO] get NY driver's license -- see when James can go
** [TODO] get new bank
*** which bank to use?
**** TD bank
**** simple
**** ally bank
** [TODO] add verizon payments to shared bills spreadsheet
** [TODO] figure out website
** [TODO] add Yongchan to KEEP alumni mailing list
:LOGBOOK:
CLOCK: [2017-03-19 Sun 16:13]--[2017-03-19 Sun 16:13] =>  0:00
:END:
** [TODO] contact CVS health benefit extras - 888-789-0404
** [TODO] post event on NDD website
** [✓] see if Meejin, Haruki, and Jas are coming
- State "[✓]"        from "[TODO]"     [2017-04-09 Sun 21:51]
** 


* notes on intro to programming
** key bindings
- M-C-\ --> indent code
| <11>        | <17>              | <60>                                                         |
|             |                   |                                                              |
|-------------+-------------------+--------------------------------------------------------------|
| C-x C-e     | eval-last-sexp    | evaluates the previous symbolic expression and returns the value in the echo area |
| C-u C-x C-e |                   | returns C-x C-e value after the expression and not in the echo area |
| C-x b       | switch-to-buffer  | switches to most recent buffer that is NOT visible           |
| C-x o       | other-window      |                                                              |
|             | other-buffer      |                                                              |
|             | set-buffer        |                                                              |

| symbol | <10>       | <50>                                               |   |
|--------+------------+----------------------------------------------------+---|
| +      | number     | sums the argument                                  |   |
|        |            |                                                    |   |



| concat           | strings             | combines 2+ strings                                                                 |   |
| substring        | strings and numbers | returns part of a string based on the numbers given                                 |   |
| number-to-string | number              | converts number to string                                                           |   |
| message          |                     | send messages to user                                                               |   |
| current-buffer   |                     |                                                                                     |   |
| buffer-name      |                     |                                                                                     |   |
| buffer-size      |                     | # of words in current buffer                                                        |   |
| point            |                     | returns # that tells u what number character is at the cursor starting from the top |   |
| point-min        |                     | minimum permissible value of point in current buffer                                |   |
| point-max        |                     | value of maximum permissible value of point in current buffer                       |   |
|                  |                     |                                                                                     |   |

(switch-to-buffer (other-buffer (current-buffer) t))
--> other buffer tells it to skip the current buffer
--> other buffer has 2 arguments: 
      1. (current-buffer): skip current buffer
      2. t: ok to switch to visible buffer

(switch-to-buffer (other-buffer))  
*** C-x C-e : eval-last-sexp
    - sexp = symbolic expression
*** symbols:
    2 types:
    - value AND/OR 
    - function definition (a set of instructions for the computer)
*** error messages
    - void-variable --> function does not have a value as a variable
    - void-function-this --> function did not have a definition
*** functions
    - first item of a list that is not preceded by a quote mark.
    - command for the computer. 
    - lists preceded by a quote mark are lists. the quote mark tells lisp to do nothing with the list and to just take it as written

*** arguments: 
          - arguments are the atoms or list that follow a function
          - e.g., in (+ 2 2), + is the function, and 2 2 are the arguments
        - arguments can be symbols that return value when evaluated
      - e.g., "fill-column", which is a symbol that returns a value when used w/o parentheses, and an be used as an argument 

**** data types:
     - numbers
     - strings (text)

**** substring: 
     - takes 3 arguments:
       1. string of characters
       2. number indicating the beginning of substring
       3. number indicating end of substring
**** message
     - (message "The name of this buffer is: %s." (buffer-name))
       - function "buffer-name" returns the name of the buffer as a string. function "message" then inserts this string where %s is. (%s can be ssss
       - %d -> print value as an integer
	 - (message "The value of fill-column is %d." fill-column)
	   fill-column is a variable so it's not put in parentheses
	 - cf. "buffer-name" is a function, so it is put in parentheses.
*** setting the value of a variable
    - functions: set, setq, let
**** set:
     - (set 'flowers '(rose violet daisy buttercup)) 
       - the SET function RETURNS the stuff in the innermost parentheses
       - thereafter, eval-ing flowers (no quotes or parentheses) returns (rose violet daisy buttercup)
       - OTOH, evaling 'flowers returns flowers (because the qm tells lisp to take what follows as given).
**** setq:
     - same as SET, except the first argument (in the previous one, 'flowers) is quoted automatically
       (setq carnivores '(lion tiger leopard))
     - (set 'carnivores '(lion tiger leopard))
     - (setq trees '(pine fir oak maple)
             herbivores '(gazelle antelope zebra))
       - can use setq to set multiple values to multiple variables.
     - for COUNTING:
       (setq counter 0) ; the initializer. sets the counter variable to zero
       (setq counter (+ counter 1)) ; This is the incrementer.
       counter ; This is the counter.
*** function definitions
    - mark-whole-buffer: this is a symbol. it has code attached to it that tells the computer what to do when the function is called.
    - composed of 5 parts:
      1. name of symbol that is attached to function definition
      2. list of arguments to be passed to the function
      3. documentation describing the function
      4. an expression to make the function interactive (i.e., allowing you to use M-x __ or a keybinding)
      5. the body (i.e., code that tells comp what to do
	 (defun function-name (arguments...)
	 "optional documentation"
	 (interactive argument-passing-info)
	 body...)

(defun multiply-by-seven (number) -->
  "Multiply NUMBER by seven."
  (* 7 number))


* habits
** [TODO] jump rope
SCHEDULED: <2017-02-02 Thu .+1d>
:PROPERTIES:
:style:    habit
:LAST_REPEAT: [2017-02-01 Wed 12:14]
:END:
:LOGBOOK:
- State "[✓]"        from "[TODO]"        [2017-02-01 Wed 12:14] \\
  120
:END:
** [TODO] take meds
SCHEDULED: <2017-03-07 Tue .+1d>
:PROPERTIES:
:style:    habit
:LAST_REPEAT: [2017-03-06 Mon 22:36]
:END:
:LOGBOOK:
- State "[✓]"        from "[TODO]"     [2017-03-06 Mon 22:36]
- State "[✓]"        from "[TODO]"     [2017-02-23 Thu 21:22]
- State "[✓]"        from "[TODO]"     [2017-02-21 Tue 20:27]
- State "[✓]"        from "[TODO]"     [2017-02-14 Tue 22:49]
- State "[✓]"        from "[TODO]"     [2017-02-14 Tue 00:05]
- State "[✓]"        from "[TODO]"     [2017-02-01 Wed 12:16]
:END:
** [TODO] litterbox
SCHEDULED: <2017-02-02 Thu .+1d>
:PROPERTIES:
:style:    habit
:LAST_REPEAT: [2017-02-01 Wed 21:25]
:END:
:LOGBOOK:
- State "[✓]"        from "[TODO]"     [2017-02-01 Wed 21:25]
:END:
** [TODO] floss
SCHEDULED: <2017-02-02 Thu .+1d>
:PROPERTIES:
:style:    habit
:LAST_REPEAT: [2017-02-01 Wed 15:23]
:END:


